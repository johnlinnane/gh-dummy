{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/traveller-collection/client/src/components/Categories/cat_view.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getItemsByCat, getCatById, getAllSubCats } from '../../actions';\nimport PanelView from '../PanelView_DELETE/panel_view';\nimport NavigationBar from '../../widgetsUI/navigation';\n\nclass CatView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      info: [],\n      theseSubcats: []\n    };\n    this.navInfo = {\n      catTitle: null,\n      catId: null,\n      subCatTitle: null,\n      subCatId: null,\n      type: 'Categories'\n    };\n\n    this.addDefaultImg = ev => {\n      const newImg = '/images/default/default.jpg';\n\n      if (ev.target.src !== newImg) {\n        ev.target.src = newImg;\n      }\n    };\n\n    this.renderSubCatItems = subcat => {\n      // write subcat title\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 16\n        }\n      }, \"Hi\"); // loop through all items\n      // check if they have the subcat ref\n      // if they do, render them\n\n      {\n        /* // loop through available subcats\n              // this.state.theseSubcats.map ( allsubcat => {\n                  \n              //     if (item.subcategory_ref[0] == allsubcat.subcat_id) {\n              //         console.log(item.subcategory_ref[0], allsubcat.subcat_id);\n              //         return (\n              //             <p>Hiiiiii</p>\n              //         )\n              //     } else {return <p>By</p>}\n              // })\n               // loop through subcats of item\n               // if the first one is equal to \n                // <Link to={`/items/${item._id}`}key={i}>\n              //     <figure key={i}>\n              //         <img src={`/images/items/${item._id}/sq_thumbnail/0.jpg`} \n              //             alt={item.title} \n              //             onError={this.addDefaultImg} />\n              //         <figcaption>{item.title}</figcaption>\n              //     </figure>\n              // </Link> */\n      }\n    };\n\n    this.renderItemsBySub = () => {\n      // loop through all subcats\n      this.state.theseSubcats.map(subcat => {\n        // render the items in each subcat\n        console.log(subcat);\n        this.renderSubCatItems(subcat.subcat_id);\n      });\n    };\n\n    this.renderGrid = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cat_grid_row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cat_grid_column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }\n      }, this.props.catitems && this.props.catitems.length ? this.renderItemsBySub() : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 23\n        }\n      }, \"There are no items in this category.\")));\n    };\n\n    this.getCatName = () => {\n      if (this.props.catinfo && this.props.catinfo.length) {\n        this.navInfo.catTitle = this.props.catinfo[0].title;\n        this.navInfo.catId = this.props.catinfo[0].cat_id;\n      }\n    };\n  }\n\n  componentDidMount() {\n    let catId = this.props.match.params.id;\n    this.props.dispatch(getItemsByCat(catId));\n    this.props.dispatch(getCatById(catId));\n    this.props.dispatch(getAllSubCats(catId));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.catitems && nextProps.catitems.length) {\n      let tempArray = [];\n      nextProps.catitems.map((item, i) => tempArray.push({\n        // src: `/images/sq_thumb/${item.omeka.omeka_id}.jpg`,\n        src: `/images/items/${item._id}/sq_thumbnail/0.jpg`,\n        caption: item.title,\n        link: `/items/${item._id}`\n      }));\n\n      if (tempArray.length) {\n        this.setState({\n          info: [...tempArray]\n        });\n      }\n    }\n\n    if (this.props.catinfo && this.props.catinfo.length) {\n      this.setState({\n        navInfo: {\n          catTitle: this.props.catinfo[0].title,\n          catId: this.props.catinfo[0].cat_id\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.subcats !== prevProps.subcats) {\n      if (this.props.subcats && this.props.subcats.length) {\n        let theseSubcats = [];\n        this.props.subcats.map(subcat => {\n          if (subcat.parent_cat == this.props.match.params.id) {\n            theseSubcats.push(subcat);\n          }\n        });\n        this.setState({\n          theseSubcats\n        });\n      }\n    }\n  }\n\n  render() {\n    this.getCatName(); // console.log(this.state);\n\n    let catinfo = this.props.catinfo;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cat_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavigationBar, {\n      navinfo: this.navInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }), catinfo && catinfo.length > 0 ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }, catinfo[0].title) : null, this.props.catitems ? this.renderGrid() : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    catitems: state.cats.catitems,\n    catinfo: state.cats.catinfo,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(CatView);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/traveller-collection/client/src/components/Categories/cat_view.js"],"names":["React","Component","connect","Link","getItemsByCat","getCatById","getAllSubCats","PanelView","NavigationBar","CatView","state","info","theseSubcats","navInfo","catTitle","catId","subCatTitle","subCatId","type","addDefaultImg","ev","newImg","target","src","renderSubCatItems","subcat","renderItemsBySub","map","console","log","subcat_id","renderGrid","props","catitems","length","getCatName","catinfo","title","cat_id","componentDidMount","match","params","id","dispatch","componentWillReceiveProps","nextProps","tempArray","item","i","push","_id","caption","link","setState","componentDidUpdate","prevProps","prevState","subcats","parent_cat","render","mapStateToProps","cats"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n\nimport { getItemsByCat, getCatById, getAllSubCats } from '../../actions';\nimport PanelView from '../PanelView_DELETE/panel_view';\nimport NavigationBar from '../../widgetsUI/navigation';\n\n\nclass CatView  extends Component {\n    \n\n    componentDidMount() {\n        let catId = this.props.match.params.id\n        this.props.dispatch(getItemsByCat(catId));\n        this.props.dispatch(getCatById(catId));\n        this.props.dispatch(getAllSubCats(catId));\n\n    }\n\n\n    state = {\n        info: [],\n        theseSubcats: []\n    }\n\n    \n    navInfo = {\n        catTitle: null,\n        catId: null,\n        subCatTitle: null,\n        subCatId: null,\n        type: 'Categories'\n    }\n\n    componentWillReceiveProps(nextProps) {\n        \n        if (nextProps.catitems && nextProps.catitems.length) {\n            let tempArray = []\n            nextProps.catitems.map( (item, i) => (\n                    tempArray.push(\n                        {\n                            // src: `/images/sq_thumb/${item.omeka.omeka_id}.jpg`,\n                            src: `/images/items/${item._id}/sq_thumbnail/0.jpg`,\n                            caption: item.title,\n                            link: `/items/${item._id}` \n                        }\n                    )\n            ))\n            if (tempArray.length) {\n                this.setState({ info: [...tempArray]});\n            }\n        }\n        if (this.props.catinfo && this.props.catinfo.length) {\n            this.setState({\n                navInfo: {\n                    catTitle: this.props.catinfo[0].title,\n                    catId: this.props.catinfo[0].cat_id\n                }\n            })\n        }\n    }\n\n    addDefaultImg = (ev) => {\n        const newImg = '/images/default/default.jpg';\n        if (ev.target.src !== newImg) {\n            ev.target.src = newImg\n        }  \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.subcats !== prevProps.subcats) {\n\n            if (this.props.subcats && this.props.subcats.length) {\n                let theseSubcats = [];\n                \n                this.props.subcats.map( subcat => {\n                    if (subcat.parent_cat == this.props.match.params.id) {\n                        theseSubcats.push(subcat)\n                    }\n                })\n                this.setState({\n                    theseSubcats\n                })\n            }\n        }\n    }\n\n\n\n    renderSubCatItems = (subcat) => {\n\n        // write subcat title\n        return <div>Hi</div>\n        // loop through all items\n\n\n        // check if they have the subcat ref\n\n\n        // if they do, render them\n\n\n\n         {/* // loop through available subcats\n                // this.state.theseSubcats.map ( allsubcat => {\n                    \n                //     if (item.subcategory_ref[0] == allsubcat.subcat_id) {\n                //         console.log(item.subcategory_ref[0], allsubcat.subcat_id);\n                //         return (\n                //             <p>Hiiiiii</p>\n                //         )\n                //     } else {return <p>By</p>}\n                // })\n\n                // loop through subcats of item\n\n                // if the first one is equal to \n\n\n                // <Link to={`/items/${item._id}`}key={i}>\n                //     <figure key={i}>\n                //         <img src={`/images/items/${item._id}/sq_thumbnail/0.jpg`} \n                //             alt={item.title} \n                //             onError={this.addDefaultImg} />\n                //         <figcaption>{item.title}</figcaption>\n                //     </figure>\n                // </Link> */}\n\n\n    }\n\n    renderItemsBySub = () => {\n\n        // loop through all subcats\n        this.state.theseSubcats.map( subcat => {\n            // render the items in each subcat\n            console.log(subcat);\n            this.renderSubCatItems(subcat.subcat_id)\n        })\n    }\n\n  \n\n\n\n    renderGrid = () => {\n        return(\n            <div className=\"cat_grid_row\">\n                <div className=\"cat_grid_column\">\n                    { this.props.catitems && this.props.catitems.length ?\n                        this.renderItemsBySub()\n                    : <p>There are no items in this category.</p> }\n                </div>\n            </div>\n    )}\n\n\n\n\n\n    getCatName = () => {\n        if (this.props.catinfo && this.props.catinfo.length) {\n            this.navInfo.catTitle = this.props.catinfo[0].title;\n            this.navInfo.catId = this.props.catinfo[0].cat_id;\n        }\n    }\n\n\n\n    render() {\n\n        this.getCatName();\n\n        // console.log(this.state);\n\n        let catinfo = this.props.catinfo;\n\n        return (\n            <div className=\"main_view\">\n                <div className=\"cat_view\">\n                    <NavigationBar navinfo={this.navInfo}/>\n                    { catinfo && catinfo.length > 0? \n                        <h2 className=\"title\">{catinfo[0].title}</h2>\n                    :null\n                    }\n\n                    \n                    { this.props.catitems ?\n                        this.renderGrid()\n                    : null }\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        catitems: state.cats.catitems,\n        catinfo: state.cats.catinfo,\n        subcats: state.cats.subcats\n        \n    }\n}\n\n\nexport default connect(mapStateToProps)(CatView)"]},"metadata":{},"sourceType":"module"}