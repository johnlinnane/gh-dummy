{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { getAllCats, getItemById, updateItem } from '../../actions';\n\nclass Sandbox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      catOptions: [],\n      selected: [{\n        value: '1',\n        label: 'Geography'\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getAllCats());\n    this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let newCatOptions = prevState.catOptions;\n    let newSelected = prevState.selected; // check if props have arrived\n\n    if (nextProps.cats && nextProps.cats.length) {\n      // create list of all categories and ids\n      nextProps.cats.map((cat, i) => {\n        newCatOptions.push({\n          value: cat.cat_id,\n          label: cat.title\n        });\n      }); // chack for any categories already set\n\n      if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length) {\n        nextProps.items.item.category_ref.map((catref, i) => {\n          console.log(nextProps);\n          let catTitle; // get title of existing cats\n\n          nextProps.cats.map((cat, i) => {\n            if (cat.cat_id == catref) {\n              catTitle = cat.title;\n            }\n          }); // add to list of selected cats\n\n          newSelected.push({\n            value: catref,\n            label: catTitle\n          });\n        });\n      }\n    }\n\n    return {\n      catOptions: newCatOptions,\n      selected: newSelected\n    };\n  }\n\n  render() {\n    // console.log(this.props)\n    const catOptions = this.state.catOptions;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, this.props.items.item && this.props.items.item.title ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, this.props.items.item.title) : null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, \"Categories:\"), /*#__PURE__*/React.createElement(Select // defaultValue={[catOptions[2], catOptions[3]]}\n    , {\n      defaultValue: this.state.selected,\n      isMulti: true,\n      name: \"colors\",\n      options: catOptions,\n      className: \"basic-multi-select\",\n      classNamePrefix: \"select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, this.props.cats && this.props.cats.length ? this.props.cats.map((cat, i) => /*#__PURE__*/React.createElement(\"p\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, cat.title)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 23\n      }\n    }, \"no cats yet\")));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  // console.log(state); \n  return {\n    items: state.items,\n    cats: state.cats.cats\n  };\n}\n\nexport default connect(mapStateToProps)(Sandbox);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js"],"names":["React","connect","Select","getAllCats","getItemById","updateItem","Sandbox","Component","state","catOptions","selected","value","label","componentDidMount","props","dispatch","getDerivedStateFromProps","nextProps","prevState","newCatOptions","newSelected","cats","length","map","cat","i","push","cat_id","title","items","item","category_ref","catref","console","log","catTitle","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\n\nimport { getAllCats, getItemById, updateItem } from '../../actions';\n\n\n\n \nclass Sandbox extends React.Component {\n    \n    state = {\n        catOptions: [],\n        selected: [\n            { value: '1', label: 'Geography' }\n        ]\n    }\n\n    componentDidMount() {\n        this.props.dispatch(getAllCats());\n        this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        \n        let newCatOptions = prevState.catOptions;\n        let newSelected = prevState.selected;\n\n        // check if props have arrived\n        if (nextProps.cats && nextProps.cats.length) {\n            // create list of all categories and ids\n            nextProps.cats.map( (cat, i) => {\n                newCatOptions.push({\n                    value: cat.cat_id,\n                    label: cat.title\n                })\n            })\n\n            // chack for any categories already set\n            if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n\n\n\n\n                nextProps.items.item.category_ref.map( (catref, i) => {\n                    console.log(nextProps);\n\n\n                    let catTitle;\n                    // get title of existing cats\n                    nextProps.cats.map( (cat, i) => {\n                        \n                        if (cat.cat_id == catref) {\n                            catTitle = cat.title;\n                        }\n                    })\n    \n    \n                    // add to list of selected cats\n                    newSelected.push({\n                        value: catref,\n                        label: catTitle\n                    })\n                })\n                \n            }\n\n\n\n            \n        }\n\n        \n\n\n        return {\n            catOptions: newCatOptions,\n            selected: newSelected\n        }\n    \n    \n    }\n\n\n    \n    render() {\n\n        // console.log(this.props)\n\n        const catOptions = this.state.catOptions;\n\n\n        \n\n        return (\n            <div>\n                {this.props.items.item && this.props.items.item.title ?\n                    <h2>{this.props.items.item.title}</h2>\n                : null }\n\n                <h2>Categories:</h2>\n\n                <Select\n                    // defaultValue={[catOptions[2], catOptions[3]]}\n                    defaultValue={this.state.selected}\n                    isMulti\n                    name=\"colors\"\n                    options={catOptions}\n                    className=\"basic-multi-select\"\n                    classNamePrefix=\"select\"\n                />\n\n\n                <div>\n                    {this.props.cats && this.props.cats.length ?\n                        this.props.cats.map( (cat, i) => (\n                            <p key={i}>{cat.title}</p>\n                        ))\n                    : <p>no cats yet</p>}\n                </div>\n            \n            </div>\n        );\n    }\n\n\n};\n \n\nfunction mapStateToProps(state) {\n    // console.log(state); \n    return {\n        items:state.items,\n        cats:state.cats.cats\n    }\n}\n\n\n\nexport default connect(mapStateToProps)(Sandbox);\n\n"]},"metadata":{},"sourceType":"module"}