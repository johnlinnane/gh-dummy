{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar invariant = require('invariant');\n\nfunction cloneWithRef(element, newRef) {\n  var previousRef = element.ref;\n  invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n\n  if (!previousRef) {\n    // When there is no ref on the element, use the new ref directly\n    return react_1.cloneElement(element, {\n      ref: newRef\n    });\n  }\n\n  return react_1.cloneElement(element, {\n    ref: function (node) {\n      newRef(node);\n\n      if (previousRef) {\n        previousRef(node);\n      }\n    }\n  });\n}\n\nexports.default = cloneWithRef;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/node_modules/react-dnd/lib/utils/cloneWithRef.js"],"names":["Object","defineProperty","exports","value","react_1","require","invariant","cloneWithRef","element","newRef","previousRef","ref","cloneElement","node","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,SAASE,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC;AACnC,MAAIC,WAAW,GAAGF,OAAO,CAACG,GAA1B;AACAL,EAAAA,SAAS,CAAC,OAAOI,WAAP,KAAuB,QAAxB,EAAkC,yEACvC,sFADuC,GAEvC,kGAFK,CAAT;;AAGA,MAAI,CAACA,WAAL,EAAkB;AACd;AACA,WAAON,OAAO,CAACQ,YAAR,CAAqBJ,OAArB,EAA8B;AACjCG,MAAAA,GAAG,EAAEF;AAD4B,KAA9B,CAAP;AAGH;;AACD,SAAOL,OAAO,CAACQ,YAAR,CAAqBJ,OAArB,EAA8B;AACjCG,IAAAA,GAAG,EAAE,UAAUE,IAAV,EAAgB;AACjBJ,MAAAA,MAAM,CAACI,IAAD,CAAN;;AACA,UAAIH,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACG,IAAD,CAAX;AACH;AACJ;AANgC,GAA9B,CAAP;AAQH;;AACDX,OAAO,CAACY,OAAR,GAAkBP,YAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar invariant = require('invariant');\nfunction cloneWithRef(element, newRef) {\n    var previousRef = element.ref;\n    invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' +\n        'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' +\n        'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n    if (!previousRef) {\n        // When there is no ref on the element, use the new ref directly\n        return react_1.cloneElement(element, {\n            ref: newRef,\n        });\n    }\n    return react_1.cloneElement(element, {\n        ref: function (node) {\n            newRef(node);\n            if (previousRef) {\n                previousRef(node);\n            }\n        },\n    });\n}\nexports.default = cloneWithRef;\n"]},"metadata":{},"sourceType":"script"}