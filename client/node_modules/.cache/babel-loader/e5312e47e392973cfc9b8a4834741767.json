{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { getAllColls, getItemById, updateItem } from '../../actions';\n\nclass Sandbox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // catOptions: [],\n      // selected: [],\n      // savedCats: [],\n      testOptions: [{\n        value: '1',\n        label: 'Geography'\n      }, {\n        value: '2',\n        label: 'History'\n      }, {\n        value: '3',\n        label: 'Literature'\n      }, {\n        value: '4',\n        label: 'Photography'\n      }, {\n        value: '5',\n        label: 'Music'\n      }, {\n        value: '6',\n        label: 'Theatre'\n      }, {\n        value: '7',\n        label: 'Visual Arts'\n      }, {\n        value: '8',\n        label: 'Language'\n      }, {\n        value: '9',\n        label: 'Heritage'\n      }, {\n        value: '10',\n        label: 'Politics'\n      }, {\n        value: '11',\n        label: 'Film'\n      }, {\n        value: '12',\n        label: 'Radio'\n      }, {\n        value: '13',\n        label: 'Traveller Organisations'\n      }],\n      collOptions: [],\n      collSelection: [],\n      savedColl: null,\n      updated: false,\n      isClearable: true,\n      isDisabled: false,\n      isLoading: false,\n      isRtl: false,\n      isSearchable: true\n    };\n\n    this.handleChange = newValue => {\n      if (newValue) {\n        this.setState({\n          savedColl: newValue\n        }); // newValue is not an array if empty\n      } else {\n        this.setState({\n          savedColl: null\n        });\n      }\n    };\n\n    this.onClickHandler = () => {\n      let updateData = {\n        _id: '5edcbc5027c3271205b2360a',\n        collection_id: null\n      };\n\n      if (this.state.savedColl) {\n        updateData.collection_id = this.state.savedColl;\n      } // console.log(updateData);\n      // this.props.dispatch(updateItem({\n      //     ...updateData\n      // }))\n\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getAllColls());\n    this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // let newCatOptions = prevState.catOptions;\n    // let newSelected = prevState.selected;\n    let tempCollOptions = [];\n    let tempCollSelection = []; // console.log(nextProps);\n\n    if (nextProps.colls && nextProps.colls.length) {\n      // create list of all collection titles and ids\n      nextProps.colls.map(coll => {\n        tempCollOptions.push({\n          value: coll.id,\n          label: coll.title\n        });\n      }); // chack for any categories already set\n\n      if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n        nextProps.colls.map(coll => {\n          let collTitle = null;\n\n          if (coll.id == nextProps.items.item.collection_id) {\n            collTitle = coll.title;\n            tempCollSelection.push({\n              value: nextProps.items.item.collection_id,\n              label: collTitle\n            });\n          }\n        });\n      }\n\n      return {\n        collOptions: tempCollOptions,\n        collSelection: tempCollSelection,\n        updated: true\n      };\n    } // // check if props have arrived\n    // if (nextProps.cats && nextProps.cats.length) {\n    //     // create list of all categories and ids\n    //     nextProps.cats.map( (cat, i) => {\n    //         newCatOptions.push({\n    //             value: cat.cat_id,\n    //             label: cat.title\n    //         })\n    //     })\n    //     // chack for any categories already set\n    //     if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n    //         nextProps.items.item.category_ref.map( (catref, i) => {\n    //             let catTitle;\n    //             nextProps.cats.map( (cat, i) => {\n    //                 if (cat.cat_id == catref) {\n    //                     catTitle = cat.title;\n    //                     newSelected.push({\n    //                         value: catref,\n    //                         label: catTitle\n    //                     })\n    //                 }\n    //             })\n    //         })\n    //     }\n    // }\n    // return {\n    //     catOptions: newCatOptions,\n    //     selected: newSelected,\n    //     updated: true\n    // }\n\n  }\n\n  render() {\n    console.log(this.state);\n    const {\n      isClearable,\n      isSearchable,\n      isDisabled,\n      isLoading,\n      isRtl\n    } = this.state;\n    const testOptions = this.state.testOptions;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, this.props.items.item && this.props.items.item.title ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, this.props.items.item.title) : null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, \"Collections:\"), this.state.updated ? /*#__PURE__*/React.createElement(Select, {\n      className: \"basic-single\",\n      classNamePrefix: \"select\",\n      defaultValue: testOptions[0],\n      isDisabled: isDisabled,\n      isLoading: isLoading,\n      isClearable: isClearable,\n      isRtl: isRtl,\n      isSearchable: isSearchable,\n      name: \"color\",\n      options: testOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  // console.log(state);\n  return {\n    items: state.items,\n    colls: state.collections.colls\n  };\n}\n\nexport default connect(mapStateToProps)(Sandbox);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js"],"names":["React","connect","Select","getAllColls","getItemById","updateItem","Sandbox","Component","state","testOptions","value","label","collOptions","collSelection","savedColl","updated","isClearable","isDisabled","isLoading","isRtl","isSearchable","handleChange","newValue","setState","onClickHandler","updateData","_id","collection_id","componentDidMount","props","dispatch","getDerivedStateFromProps","nextProps","prevState","tempCollOptions","tempCollSelection","colls","length","map","coll","push","id","title","items","item","collTitle","render","console","log","mapStateToProps","collections"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\n\nimport { getAllColls, getItemById, updateItem } from '../../actions';\n\n\nclass Sandbox extends React.Component {\n    \n    state = {\n        // catOptions: [],\n        // selected: [],\n        // savedCats: [],\n        testOptions: [\n            { value: '1', label: 'Geography' },\n            { value: '2', label: 'History' },\n            { value: '3', label: 'Literature' },\n            { value: '4', label: 'Photography' },\n            { value: '5', label: 'Music' },\n\n            { value: '6', label: 'Theatre' },\n            { value: '7', label: 'Visual Arts' },\n            { value: '8', label: 'Language' },\n            { value: '9', label: 'Heritage' },\n            { value: '10', label: 'Politics' },\n            { value: '11', label: 'Film' },\n            { value: '12', label: 'Radio' },\n            { value: '13', label: 'Traveller Organisations' }\n        ],\n        collOptions: [],\n        collSelection: [],\n        savedColl: null,\n        updated: false,\n  \n        isClearable: true,\n        isDisabled: false,\n        isLoading: false,\n        isRtl: false,\n        isSearchable: true,\n      };\n\n    componentDidMount() {\n        this.props.dispatch(getAllColls());\n        this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        \n        // let newCatOptions = prevState.catOptions;\n        // let newSelected = prevState.selected;\n        let tempCollOptions = [];\n        let tempCollSelection = [];\n\n        // console.log(nextProps);\n\n        if (nextProps.colls && nextProps.colls.length) {\n            // create list of all collection titles and ids\n            nextProps.colls.map( coll => {\n                tempCollOptions.push({\n                    value: coll.id,\n                    label: coll.title\n                })\n            })\n\n            // chack for any categories already set\n            if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n                nextProps.colls.map ( coll => {\n                    let collTitle = null;\n                    if (coll.id == nextProps.items.item.collection_id) {\n                        collTitle = coll.title;\n\n                        tempCollSelection.push({\n                            value: nextProps.items.item.collection_id,\n                            label: collTitle\n                        })\n                    }\n                })\n            }\n\n            return {\n                collOptions: tempCollOptions,\n                collSelection: tempCollSelection,\n                updated: true\n            }\n\n\n\n\n        }\n        \n\n        // // check if props have arrived\n        // if (nextProps.cats && nextProps.cats.length) {\n        //     // create list of all categories and ids\n        //     nextProps.cats.map( (cat, i) => {\n        //         newCatOptions.push({\n        //             value: cat.cat_id,\n        //             label: cat.title\n        //         })\n        //     })\n\n        //     // chack for any categories already set\n        //     if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n\n        //         nextProps.items.item.category_ref.map( (catref, i) => {\n\n        //             let catTitle;\n\n        //             nextProps.cats.map( (cat, i) => {\n        //                 if (cat.cat_id == catref) {\n        //                     catTitle = cat.title;\n\n        //                     newSelected.push({\n        //                         value: catref,\n        //                         label: catTitle\n        //                     })\n        //                 }\n        //             })\n        //         })\n                \n        //     }\n        // }\n        // return {\n        //     catOptions: newCatOptions,\n        //     selected: newSelected,\n        //     updated: true\n        // }\n    }\n\n\n    handleChange = (newValue) => {\n        if (newValue) {\n            this.setState({ \n                savedColl: newValue\n            });\n        // newValue is not an array if empty\n        } else {\n            this.setState({ \n                savedColl: null\n            });\n        }\n\n\n    };\n\n    onClickHandler = () => {\n\n        let updateData = {\n            _id: '5edcbc5027c3271205b2360a',\n            collection_id: null\n        };\n\n        if (this.state.savedColl ) {\n            updateData.collection_id = this.state.savedColl;\n           \n        } \n        // console.log(updateData);\n        // this.props.dispatch(updateItem({\n        //     ...updateData\n        // }))\n    }\n    \n    render() {\n        console.log(this.state);\n\n        const {\n            isClearable,\n            isSearchable,\n            isDisabled,\n            isLoading,\n            isRtl,\n          } = this.state;\n\n        const testOptions = this.state.testOptions;\n\n        return (\n            <div>\n                {this.props.items.item && this.props.items.item.title ?\n                    <h2>{this.props.items.item.title}</h2>\n                : null }\n\n                <p>Collections:</p>\n                    \n                {this.state.updated ?\n                    <Select\n                        className=\"basic-single\"\n                        classNamePrefix=\"select\"\n                        defaultValue={testOptions[0]}\n                        isDisabled={isDisabled}\n                        isLoading={isLoading}\n                        isClearable={isClearable}\n                        isRtl={isRtl}\n                        isSearchable={isSearchable}\n                        name=\"color\"\n                        options={testOptions}\n                    />\n                : null}\n\n                <button type=\"button\"onClick={this.onClickHandler}>Submit</button> \n            \n            </div>\n        );\n    }\n};\n \n\nfunction mapStateToProps(state) {\n    // console.log(state);\n    return {\n        items:state.items,\n        colls:state.collections.colls\n    }\n}\n\nexport default connect(mapStateToProps)(Sandbox);\n\n"]},"metadata":{},"sourceType":"module"}