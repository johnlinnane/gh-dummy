{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dropCollect = exports.dragSource = exports.tagTarget = exports.tagSource = undefined;\n\nvar _reactDom = require('react-dom');\n\nvar _utils = require('./utils');\n\nvar tagSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.tag.index,\n      index: props.index\n    };\n  },\n  canDrag: function canDrag(props) {\n    return (0, _utils.canDrag)(props);\n  }\n};\nvar tagTarget = {\n  hover: function hover(props, monitor, component) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index;\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect();\n    var hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n    var clientOffset = monitor.getClientOffset();\n    var hoverClientX = clientOffset.x - hoverBoundingRect.left; // Only perform the move when the mouse has crossed half of the items width\n\n    if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n      return;\n    }\n\n    if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n      return;\n    }\n\n    props.moveTag(dragIndex, hoverIndex);\n    monitor.getItem().index = hoverIndex;\n  },\n  canDrop: function canDrop(props) {\n    return (0, _utils.canDrop)(props);\n  }\n};\n\nvar dragSource = function dragSource(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar dropCollect = function dropCollect(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nexports.tagSource = tagSource;\nexports.tagTarget = tagTarget;\nexports.dragSource = dragSource;\nexports.dropCollect = dropCollect;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/node_modules/react-tag-input/dist-modules/components/DragAndDropHelper.js"],"names":["Object","defineProperty","exports","value","dropCollect","dragSource","tagTarget","tagSource","undefined","_reactDom","require","_utils","beginDrag","props","id","tag","index","canDrag","hover","monitor","component","dragIndex","getItem","hoverIndex","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleX","right","left","clientOffset","getClientOffset","hoverClientX","x","moveTag","canDrop","connect","connectDragSource","isDragging","connectDropTarget","dropTarget"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,SAAR,GAAoBJ,OAAO,CAACK,SAAR,GAAoBC,SAAnF;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIH,SAAS,GAAG;AACdK,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACnC,WAAO;AAAEC,MAAAA,EAAE,EAAED,KAAK,CAACE,GAAN,CAAUC,KAAhB;AAAuBA,MAAAA,KAAK,EAAEH,KAAK,CAACG;AAApC,KAAP;AACD,GAHa;AAIdC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBJ,KAAjB,EAAwB;AAC/B,WAAO,CAAC,GAAGF,MAAM,CAACM,OAAX,EAAoBJ,KAApB,CAAP;AACD;AANa,CAAhB;AASA,IAAIP,SAAS,GAAG;AACdY,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeL,KAAf,EAAsBM,OAAtB,EAA+BC,SAA/B,EAA0C;AAC/C,QAAIC,SAAS,GAAGF,OAAO,CAACG,OAAR,GAAkBN,KAAlC;AACA,QAAIO,UAAU,GAAGV,KAAK,CAACG,KAAvB;;AAEA,QAAIK,SAAS,KAAKE,UAAlB,EAA8B;AAC5B;AACD;;AAED,QAAIC,iBAAiB,GAAG,CAAC,GAAGf,SAAS,CAACgB,WAAd,EAA2BL,SAA3B,EAAsCM,qBAAtC,EAAxB;AACA,QAAIC,YAAY,GAAG,CAACH,iBAAiB,CAACI,KAAlB,GAA0BJ,iBAAiB,CAACK,IAA7C,IAAqD,CAAxE;AACA,QAAIC,YAAY,GAAGX,OAAO,CAACY,eAAR,EAAnB;AACA,QAAIC,YAAY,GAAGF,YAAY,CAACG,CAAb,GAAiBT,iBAAiB,CAACK,IAAtD,CAX+C,CAa/C;;AACA,QAAIR,SAAS,GAAGE,UAAZ,IAA0BS,YAAY,GAAGL,YAA7C,EAA2D;AACzD;AACD;;AAED,QAAIN,SAAS,GAAGE,UAAZ,IAA0BS,YAAY,GAAGL,YAA7C,EAA2D;AACzD;AACD;;AAEDd,IAAAA,KAAK,CAACqB,OAAN,CAAcb,SAAd,EAAyBE,UAAzB;AAEAJ,IAAAA,OAAO,CAACG,OAAR,GAAkBN,KAAlB,GAA0BO,UAA1B;AACD,GA1Ba;AA2BdY,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBtB,KAAjB,EAAwB;AAC/B,WAAO,CAAC,GAAGF,MAAM,CAACwB,OAAX,EAAoBtB,KAApB,CAAP;AACD;AA7Ba,CAAhB;;AAgCA,IAAIR,UAAU,GAAG,SAASA,UAAT,CAAoB+B,OAApB,EAA6BjB,OAA7B,EAAsC;AACrD,SAAO;AACLkB,IAAAA,iBAAiB,EAAED,OAAO,CAAC/B,UAAR,EADd;AAELiC,IAAAA,UAAU,EAAEnB,OAAO,CAACmB,UAAR;AAFP,GAAP;AAID,CALD;;AAOA,IAAIlC,WAAW,GAAG,SAASA,WAAT,CAAqBgC,OAArB,EAA8B;AAC9C,SAAO;AACLG,IAAAA,iBAAiB,EAAEH,OAAO,CAACI,UAAR;AADd,GAAP;AAGD,CAJD;;AAMAtC,OAAO,CAACK,SAAR,GAAoBA,SAApB;AACAL,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACAJ,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACAH,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dropCollect = exports.dragSource = exports.tagTarget = exports.tagSource = undefined;\n\nvar _reactDom = require('react-dom');\n\nvar _utils = require('./utils');\n\nvar tagSource = {\n  beginDrag: function beginDrag(props) {\n    return { id: props.tag.index, index: props.index };\n  },\n  canDrag: function canDrag(props) {\n    return (0, _utils.canDrag)(props);\n  }\n};\n\nvar tagTarget = {\n  hover: function hover(props, monitor, component) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index;\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect();\n    var hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n    var clientOffset = monitor.getClientOffset();\n    var hoverClientX = clientOffset.x - hoverBoundingRect.left;\n\n    // Only perform the move when the mouse has crossed half of the items width\n    if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n      return;\n    }\n\n    if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n      return;\n    }\n\n    props.moveTag(dragIndex, hoverIndex);\n\n    monitor.getItem().index = hoverIndex;\n  },\n  canDrop: function canDrop(props) {\n    return (0, _utils.canDrop)(props);\n  }\n};\n\nvar dragSource = function dragSource(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nvar dropCollect = function dropCollect(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n};\n\nexports.tagSource = tagSource;\nexports.tagTarget = tagTarget;\nexports.dragSource = dragSource;\nexports.dropCollect = dropCollect;"]},"metadata":{},"sourceType":"script"}