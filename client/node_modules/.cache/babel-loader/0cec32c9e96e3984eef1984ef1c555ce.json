{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/traveller-collection/client/src/components/AdminSection/admin_cat.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport { getAllColls, getAllCats, getAllSubCats } from '../../actions';\nimport { addCat, deleteCat, addSubcat, deleteSubcat, updateCat, updateSubcat } from '../../actions';\n\nclass AdminCat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formdata: {\n        cat: {\n          _id: this.props.chosenCatInfo._id || null,\n          title: this.props.chosenCatInfo.title || null,\n          description: this.props.chosenCatInfo.description || null\n        },\n        subcats: []\n      }\n    };\n\n    this.handleInput = (event, type, field, subcatId) => {\n      // make a copy of formdata\n      const newFormdata = { ...this.state.formdata\n      }; // console.log(newFormdata);\n\n      if (type === 'cat') {\n        if (field === 'cat_title') {\n          newFormdata.cat.title = event.target.value;\n        } else if (field === 'cat_description') {\n          newFormdata.cat.description = event.target.value;\n        }\n      }\n\n      if (type === 'subcat') {\n        this.state.formdata.subcats.map((subcat, i) => {\n          if (subcat._id === subcatId) {\n            if (field === 'title') {\n              newFormdata.subcats[i].title = event.target.value;\n            } else if (field === 'description') {\n              newFormdata.subcats[i].description = event.target.value;\n            }\n          }\n        });\n      } // copy it back to state\n\n\n      this.setState({\n        formdata: newFormdata\n      });\n      console.log(newFormdata);\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getAllColls());\n    this.props.dispatch(getAllCats());\n    this.props.dispatch(getAllSubCats());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.subcats && this.props.subcats.length) {\n      if (this.props.subcats != prevProps.subcats) {\n        let tempSubcats = [];\n\n        if (this.props.subcats) {\n          this.props.subcats.map((subcat, i) => {\n            if (subcat.parent_cat == this.props.chosenCatInfo._id) {\n              tempSubcats.push(subcat);\n            }\n          });\n        }\n\n        this.setState({\n          formdata: { ...this.state.formdata,\n            subcats: tempSubcats\n          }\n        });\n      }\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, this.props.chosenCatInfo ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 41\n      }\n    }, \"Title\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: this.props.chosenCatInfo.title,\n      defaultValue: this.props.chosenCatInfo.title,\n      onChange: event => this.handleInput(event, 'cat', 'cat_title'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 41\n      }\n    }, \"Description\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      placeholder: \"Enter category description\",\n      defaultValue: null,\n      onChange: event => this.handleInput(event, 'cat', 'cat_description'),\n      rows: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"change_cat_img\",\n      src: `/images/cover_img_cat/${this.props.chosenCatInfo._id}.jpg`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 37\n      }\n    }, \"Change image\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 41\n      }\n    }, \"Sub-categories\"))), this.state.formdata.subcats.length ? this.state.formdata.subcats.map((subcat, i) => subcat.parent_cat == this.props.chosenCatInfo._id ? /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: subcat.title,\n      defaultValue: subcat.title,\n      onChange: event => this.handleInput(event, 'subcat', 'title', subcat._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Description\",\n      defaultValue: subcat.description,\n      onChange: event => this.handleInput(event, 'subcat', 'description', subcat._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 61\n      }\n    }, \"Remove\"))) : null) : null, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Add new subcategory\",\n      defaultValue: null,\n      onChange: event => this.handleInput(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Description\",\n      defaultValue: null,\n      onChange: event => this.handleInput(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 61\n      }\n    }, \"+\")))))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 25\n      }\n    }, \"Delete Category\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, \"Save Changes\")) : null);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    colls: state.collections.colls,\n    cats: state.cats.cats,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(AdminCat);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/traveller-collection/client/src/components/AdminSection/admin_cat.js"],"names":["React","Component","connect","Tab","Tabs","TabList","TabPanel","getAllColls","getAllCats","getAllSubCats","addCat","deleteCat","addSubcat","deleteSubcat","updateCat","updateSubcat","AdminCat","state","formdata","cat","_id","props","chosenCatInfo","title","description","subcats","handleInput","event","type","field","subcatId","newFormdata","target","value","map","subcat","i","setState","console","log","componentDidMount","dispatch","componentDidUpdate","prevProps","length","tempSubcats","parent_cat","push","render","submitForm","mapStateToProps","colls","collections","cats"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\n\nimport { getAllColls, getAllCats, getAllSubCats  } from '../../actions';\n\nimport { addCat, deleteCat, addSubcat, deleteSubcat, updateCat, updateSubcat  }  from '../../actions';\n\nclass AdminCat extends Component {\n\n\n    state = {\n        formdata: {\n            cat: {\n                _id: this.props.chosenCatInfo._id || null,\n                title: this.props.chosenCatInfo.title || null,\n                description: this.props.chosenCatInfo.description || null\n\n            },\n            subcats: []\n        }\n    }\n\n    componentDidMount() {\n        this.props.dispatch(getAllColls())\n        this.props.dispatch(getAllCats());\n        this.props.dispatch(getAllSubCats());\n    }\n\n    componentDidUpdate(prevProps) {\n    \n\n        if (this.props.subcats && this.props.subcats.length) {\n            if (this.props.subcats != prevProps.subcats) {\n                let tempSubcats = []\n\n                if (this.props.subcats) {\n                    this.props.subcats.map( (subcat, i) => {\n                        if (subcat.parent_cat == this.props.chosenCatInfo._id) {\n                            tempSubcats.push(subcat)\n                        }\n                    })\n                }\n                \n                this.setState({\n                    formdata: {\n                        ...this.state.formdata,\n                        subcats: tempSubcats\n                    }\n                })\n            }\n        }\n    \n    }\n\n\n    handleInput = (event, type, field, subcatId) => {\n\n\n        // make a copy of formdata\n        const newFormdata = {\n            ...this.state.formdata\n        }\n\n        // console.log(newFormdata);\n        if (type === 'cat') {\n            if (field === 'cat_title') {\n                newFormdata.cat.title = event.target.value;\n\n            } else if (field === 'cat_description') {\n                newFormdata.cat.description = event.target.value;\n            } \n        }\n\n        if (type === 'subcat') {\n            this.state.formdata.subcats.map( (subcat, i ) => {\n                if (subcat._id === subcatId) {\n                    if (field === 'title') {\n                        newFormdata.subcats[i].title = event.target.value;\n                    } else if (field === 'description') {\n                        newFormdata.subcats[i].description = event.target.value;\n                    }\n\n\n                }\n            })\n\n         \n        \n\n        }\n\n\n        // copy it back to state\n        this.setState({\n            formdata: newFormdata\n\n        })\n        console.log(newFormdata);\n    }\n\n\n    render() {\n\n\n        console.log(this.state)\n        return (\n            <div>\n                { this.props.chosenCatInfo ? \n                    <div>\n                        <form onSubmit={this.submitForm}>\n                            <table>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <h2>Title</h2>\n                                    </td>\n                                    <td>\n\n                                        <input\n                                            type=\"text\"\n                                            placeholder={this.props.chosenCatInfo.title}\n                                            defaultValue={this.props.chosenCatInfo.title} \n                                            onChange={(event) => this.handleInput(event, 'cat', 'cat_title')}\n                                        />\n\n\n\n\n                                    </td>\n                                </tr>\n\n\n                                <tr>\n                                    <td>\n                                        <h2>Description</h2>\n                                    </td>\n                                    <td>\n                                        <textarea\n                                            type=\"text\"\n                                            placeholder=\"Enter category description\"\n                                            defaultValue={null} \n                                            onChange={(event) => this.handleInput(event, 'cat', 'cat_description')}\n                                            rows={6}\n                                        />\n                                    </td>\n                                </tr>\n\n\n                                <tr>\n                                    <td>\n                                        <img className=\"change_cat_img\" src={`/images/cover_img_cat/${this.props.chosenCatInfo._id}.jpg`}  />\n                                    </td>\n                                    <td>\n                                        Change image\n                                    </td>\n                                </tr>\n\n                                <tr>\n                                    <td>\n                                        <h3>Sub-categories</h3>\n                                    </td>\n                                </tr>\n\n\n                                { this.state.formdata.subcats.length ?\n                                    this.state.formdata.subcats.map( (subcat, i) => (\n                                        \n                                                subcat.parent_cat == this.props.chosenCatInfo._id ? \n                                                    <tr key={i}>\n                                                        <td>\n\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder={subcat.title}\n                                                                defaultValue={subcat.title} \n                                                                onChange={(event) => this.handleInput(event, 'subcat', 'title', subcat._id)}\n                                                            />\n\n\n\n\n                                                        </td>\n\n                                                        <td>\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Description\"\n                                                                defaultValue={subcat.description} \n                                                                onChange={(event) => this.handleInput(event, 'subcat', 'description', subcat._id)}\n                                                            />\n                                                        </td>\n                                                        <td>\n                                                            <button type=\"button\">Remove</button>\n\n                                                        </td>\n                                                    </tr>\n                                                \n                                                : null \n                                            \n                                        \n                                    ) )    \n                                : null }\n                                <tr >\n                                                        <td>\n\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Add new subcategory\"\n                                                                defaultValue={null} \n                                                                onChange={(event) => this.handleInput(event)}\n                                                            />\n\n\n\n\n                                                        </td>\n\n                                                        <td>\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Description\"\n                                                                defaultValue={null} \n                                                                onChange={(event) => this.handleInput(event)}\n                                                            />\n                                                        </td>\n                                                        <td>\n                                                            <button type=\"button\">+</button>\n\n                                                        </td>\n                                                    </tr>\n                            </tbody>\n                            </table>\n                        </form>\n                        <button type=\"button\">Delete Category</button>\n                        <button type=\"submit\">Save Changes</button>\n                    </div>\n                : null }\n            </div>\n    \n                \n\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        colls:state.collections.colls,\n        cats:state.cats.cats,\n        subcats:state.cats.subcats\n    }\n}\n\nexport default connect(mapStateToProps)(AdminCat);"]},"metadata":{},"sourceType":"module"}