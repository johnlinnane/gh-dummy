{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/containers/Admin/edit_item.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom'; // import axios from 'axios';\n// import { ToastContainer, toast } from 'react-toastify';\n\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions';\nimport { getAllColls, getAllCats, getAllSubCats } from '../../actions';\n\nclass EditItem extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formdata: {\n        _id: this.props.match.params.id,\n        title: '',\n        creator: '',\n        subject: '',\n        description: '',\n        source: '',\n        date_created: '',\n        contributor: '',\n        // collection_id: '',     \n        item_format: '',\n        materials: '',\n        physical_dimensions: '',\n        pages: '',\n        editor: '',\n        publisher: '',\n        further_info: '',\n        language: '',\n        reference: '',\n        rights: '',\n        file_format: '',\n        address: '',\n        // category_ref: '',\n        subcategory_ref: '',\n        // tags: [\n        //     {\n        //         id: '',\n        //         text: ''\n        //     }\n        // ],\n        external_link: {\n          url: '',\n          text: ''\n        },\n        geo: {\n          address: ''\n        }\n      } // selectedFile: null,\n      // loaded: 0,\n      // // categories\n      // catOptions: [],\n      // existingCats: [],\n      // updatedCats: [],\n      // catsAreUpdated: false,\n      // // tags\n      // existingTags: [],\n      // updatedTags: [],\n      // tagsAreUpdated: false,\n      // // collection\n      // collOptions: [{ value: null, label: 'None' } ],\n      // existingColl: null,\n      // updatedColl: null,\n      // collIsUpdated: false,\n      // isClearable: true,\n      // isDisabled: false,\n      // isLoading: false,\n      // isRtl: false,\n      // isSearchable: true\n\n    };\n\n    this.handleInput = (event, name, level) => {\n      // make a copy of formdata\n      const newFormdata = { ...this.state.formdata\n      };\n\n      if (level === 'external_link') {\n        newFormdata.external_link[name] = event.target.value;\n      } else if (level === 'geo') {\n        newFormdata.geo[name] = event.target.value; // } else if (level === 'tags') {\n        //     newFormdata.tags[name] = event.target.value;\n      } else {\n        newFormdata[name] = event.target.value;\n      } // copy it back to state\n\n\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.deletePost = () => {\n      this.props.dispatch(deleteItem(this.state.formdata._id));\n      this.props.history.push('/user/all-items');\n    };\n\n    this.redirectUser = () => {\n      setTimeout(() => {\n        this.props.history.push('/user/all-items');\n      }, 1000);\n    };\n\n    this.submitForm = e => {\n      e.preventDefault(); // console.log(this.state.formdata);\n\n      let updateData = { ...this.state.formdata\n      }; // if (this.state.updatedCats && this.state.updatedCats.length) {\n      //     this.state.updatedCats.map( cat => {\n      //         updateData.category_ref.push(cat.value);\n      //     })\n      // } \n      // if (this.state.updatedTags && this.state.updatedTags.length) {\n      //     this.state.updatedTags.map( tag => {\n      //         updateData.tags.push(tag);\n      //     })\n      // } \n      // if (this.state.updatedColl ) {\n      //     updateData.collection_id = this.state.updatedColl.value;\n      // } \n      // this.onClickHandlerCats();\n      // this.onClickHandlerTags();\n      // this.onClickHandlerColl();\n      // console.log(this.state);\n\n      this.props.dispatch(updateItem({ ...updateData // ...this.state.formdata\n\n      }));\n    };\n\n    this.createTextInput = (stateVar, name, placeholder, label, level) => {\n      // let string = `this.state.formdata.${variable}`;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 17\n        }\n      }, label), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form_element\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: placeholder,\n        value: stateVar,\n        onChange: event => this.handleInput(event, name, level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 25\n        }\n      }))));\n    };\n\n    this.addDefaultImg = ev => {\n      const newImg = '/images/default/default.jpg';\n\n      if (ev.target.src !== newImg) {\n        ev.target.src = newImg;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getItemById(this.props.match.params.id)); // this.props.dispatch(getAllColls())\n    // this.props.dispatch(getAllCats());\n    // this.props.dispatch(getAllSubCats());\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(clearItem());\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // console.log(nextProps);\n    let formReturn; // let catReturn;\n    // let tagReturn;\n    // let collReturn;\n    // *********** GENERAL FORM STUFF *****************************\n\n    if (nextProps.items.item) {\n      let item = nextProps.items.item;\n      let formdata = prevState.formdata; // console.log(formdata);\n\n      formdata = { ...formdata,\n        _id: item._id,\n        title: item.title,\n        //\n        creator: item.creator,\n        //\n        description: item.description,\n        //\n        pages: item.pages,\n        //\n        // collection_id:item.collection_id,  //\n        source: item.source,\n        //\n        subject: item.subject,\n        date_created: item.date_created,\n        // tags: item.tags,\n        contributor: item.contributor,\n        item_format: item.item_format,\n        materials: item.materials,\n        physical_dimensions: item.physical_dimensions,\n        editor: item.editor,\n        publisher: item.publisher,\n        further_info: item.further_info,\n        language: item.language,\n        reference: item.reference,\n        rights: item.rights,\n        file_format: item.file_format,\n        // category_ref: item.category_ref,\n        subcategory_ref: item.subcategory_ref\n      }; // console.log(formdata);\n\n      if (item.external_link && item.external_link.length && item.external_link.url) {\n        formdata = { ...formdata,\n          external_link: {\n            url: item.external_link[0].url,\n            text: item.external_link[0].text\n          }\n        };\n      } // console.log(formdata);\n\n\n      if (item.geo && item.geo.length && item.geo.address) {\n        formdata = { ...formdata,\n          geo: {\n            address: item.geo.address\n          }\n        };\n      } // console.log(formdata);\n\n\n      formReturn = formdata; // console.log(formReturn);\n    } // // *********** CATEGORY SELECT *****************************\n    // let catOptionsFromProps = prevState.catOptions;\n    // let catsFromProps = prevState.existingCats;\n    // let catsDone = false;\n    // // let catOptionsFromProps = [];\n    // // let catsFromProps = [];\n    // console.log(prevState.catsAreUpdated);\n    // if (nextProps.cats && nextProps.cats.length && !prevState.catsAreUpdated) {\n    //     nextProps.cats.map( (cat, i) => {\n    //         catOptionsFromProps.push({\n    //             value: cat.cat_id,\n    //             label: cat.title\n    //         })\n    //     })\n    //     if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n    //         // console.log(nextProps.items.item.category_ref);\n    //         nextProps.items.item.category_ref.map( (catref, i) => {\n    //             let catTitle;\n    //             nextProps.cats.map( (cat, i) => {\n    //                 if (cat.cat_id == catref) {\n    //                     catTitle = cat.title;\n    //                     let element = {\n    //                         value: catref,\n    //                         label: catTitle\n    //                     };\n    //                     if (!catsFromProps.includes(element)) {\n    //                         // console.log('push!');\n    //                         catsFromProps.push(element)\n    //                     }\n    //                 }\n    //             })\n    //         })\n    //         catsDone = true;\n    //     }\n    // }\n    // // console.log(catsFromProps);\n    // catReturn = {\n    //     catOptions: catOptionsFromProps,\n    //     existingCats: catsFromProps,\n    //     catsAreUpdated: catsDone\n    // }\n    // // console.log(catReturn);\n    // // *********** TAGS SELECT *****************************\n    // let tagsFromProps = [];\n    // if (nextProps.items.item && nextProps.items.item.tags) {\n    //     nextProps.items.item.tags.map( tag => {\n    //         tagsFromProps.push({\n    //             value: tag.value,\n    //             label: tag.label\n    //         })\n    //     })\n    // }\n    // tagReturn = {\n    //     existingTags: tagsFromProps,\n    //     tagsAreUpdated: true\n    // }\n    // // *********** COLLECTION SELECT *****************************\n    // let collOptionsFromProps = [];\n    // let collFromProps = null;\n    // if (nextProps.colls && nextProps.colls.length) {\n    //     nextProps.colls.map( coll => {\n    //         collOptionsFromProps.push({\n    //             value: coll.id,\n    //             label: coll.title\n    //         })\n    //     })\n    //     if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n    //         nextProps.colls.map ( coll => {\n    //             let collTitle = null;\n    //             if (coll.id == nextProps.items.item.collection_id) {\n    //                 collTitle = coll.title;\n    //                 collFromProps = {\n    //                     value: nextProps.items.item.collection_id,\n    //                     label: collTitle\n    //                 }\n    //             }\n    //         })\n    //     }\n    //     // console.log(collOptionsFromProps);\n    //     collReturn =  {\n    //         collOptions: collOptionsFromProps,\n    //         existingColl: collFromProps,\n    //         collIsUpdated: true\n    //     }\n    //     // console.log(collReturn);\n    // }\n    // *********** RETURN *****************************\n    // let allColls, prevColls, updateColls = [];\n    // if (collReturn) {\n    //     allColls = [prevState.collOptions, ...collReturn.collOptions];\n    //     prevColls = collReturn.existingColl;\n    //     updateColls = collReturn.collIsUpdated;\n    // }\n\n\n    return {\n      formdata: { ...formReturn\n      } // catOptions: catReturn.catOptions,\n      // existingCats: catReturn.existingCats,\n      // catsAreUpdated: catReturn.catsAreUpdated,\n      // existingTags: tagReturn.existingTags,\n      // tagsAreUpdated: tagReturn.tagsAreUpdated,\n      // collOptions: allColls,\n      // existingColl: prevColls,\n      // collIsUpdated: updateColls,\n      // updated: true,\n\n    };\n  } // // CAT HANDLERS\n  // handleChangeCats = (newValue) => {\n  //     if (newValue && newValue.length) {\n  //         this.setState({ \n  //             updatedCats: [...newValue]\n  //         });\n  //     } else {\n  //         this.setState({ \n  //             updatedCats: []\n  //         });\n  //     }\n  // };\n  // onClickHandlerCats = () => {\n  //     let updateData = {\n  //         _id: this.props.match.params.id,\n  //         category_ref: []\n  //     };\n  //     if (this.state.updatedCats && this.state.updatedCats.length) {\n  //         this.state.updatedCats.map( cat => {\n  //             updateData.category_ref.push(cat.value);\n  //         })\n  //     } \n  //     this.props.dispatch(updateItem({\n  //         ...updateData\n  //     }))\n  // }\n  // // TAG HANDLERS\n  // handleChangeTags = (newValue) => {\n  //     if (newValue && newValue.length) {\n  //         console.log(newValue)\n  //         this.setState({ \n  //             updatedTags: [...newValue]\n  //         });\n  //     } else {\n  //         this.setState({ \n  //             updatedTags: []\n  //         });\n  //     }\n  // };\n  // onClickHandlerTags = () => {\n  //     let updateData = {\n  //         _id: this.props.match.params.id,\n  //         tags: []\n  //     };\n  //     if (this.state.updatedTags && this.state.updatedTags.length) {\n  //         this.state.updatedTags.map( tag => {\n  //             updateData.tags.push(tag);\n  //         })\n  //     } \n  //     this.props.dispatch(updateItem({\n  //         ...updateData\n  //     }))\n  // }\n  // // COLL HANDLERS\n  // handleChangeColl = (newValue) => {\n  //     console.log(newValue);\n  //     if (newValue) {\n  //         this.setState({ \n  //             updatedColl: newValue\n  //         });\n  //     } \n  // };\n  // onClickHandlerColl = () => {\n  //     let updateData = {\n  //         _id: this.props.match.params.id,\n  //         collection_id: null\n  //     };\n  //     if (this.state.updatedColl ) {\n  //         updateData.collection_id = this.state.updatedColl.value;\n  //     } \n  //     this.props.dispatch(updateItem({\n  //         ...updateData\n  //     }))\n  // }\n\n\n  render() {\n    let items = this.props.items;\n    const {\n      isClearable,\n      isSearchable,\n      isDisabled,\n      isLoading,\n      isRtl\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rl_container article edit_page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 13\n      }\n    }, items.updateItem ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit_confirm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 29\n      }\n    }, \"Post updated, \", /*#__PURE__*/React.createElement(Link, {\n      to: `/items/${items.item._id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 47\n      }\n    }, \"Click here to see your post\")) : null, items.itemDeleted ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"red_tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 29\n      }\n    }, \"Item Deleted\", this.redirectUser()) : null, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 25\n      }\n    }, \"Edit item:\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: `/images/items/${this.state.formdata._id}/sq_thumbnail/0.jpg`,\n      alt: \"Item\",\n      onError: this.addDefaultImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 25\n      }\n    }, this.createTextInput(this.state.formdata.title, 'title', \"Enter title\", \"Title\"), this.createTextInput(this.state.formdata.creator, 'creator', \"Enter creator\", \"Creator\"), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 33\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      value: this.state.formdata.description,\n      onChange: event => this.handleInput(event, 'description'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 33\n      }\n    }, \"Pages\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      placeholder: \"Enter pages\",\n      value: this.state.formdata.pages,\n      onChange: event => this.handleInput(event, 'pages'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 41\n      }\n    })))), this.createTextInput(this.state.formdata.source, 'source', \"Enter item source\", \"Source\"), this.createTextInput(this.state.formdata.subject, 'subject', \"Subject\", \"Subject\"), this.createTextInput(this.state.formdata.date_created, 'date_created', \"Date item was created\", \"Date\"), this.createTextInput(this.state.formdata.contributor, 'contributor', \"contributor\", \"Contributor\"), this.createTextInput(this.state.formdata.item_format, 'item_format', \"The item's format\", \"Format\"), this.createTextInput(this.state.formdata.materials, 'materials', \"materials\", \"Materials\"), this.createTextInput(this.state.formdata.physical_dimensions, 'physical_dimensions', \"Physical dimensions\", \"Dimensions\"), this.createTextInput(this.state.formdata.editor, 'editor', \"editor\", \"Editor\"), this.createTextInput(this.state.formdata.publisher, 'publisher', \"publisher\", \"Publisher\"), this.createTextInput(this.state.formdata.further_info, 'further_info', \"Enter any further info, resources..\", \"Further Info\"), this.createTextInput(this.state.formdata.language, 'language', \"language\", \"Language\"), this.createTextInput(this.state.formdata.reference, 'reference', \"reference\", \"Ref\"), this.createTextInput(this.state.formdata.rights, 'rights', \"rights\", \"Rights\"))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 25\n      }\n    }, \"Submit Edit\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"delete_post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: e => {\n        if (window.confirm('Are you sure you wish to delete this item?')) this.deletePost(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 29\n      }\n    }, \"Delete item\"))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    items: state.items,\n    colls: state.collections.colls,\n    cats: state.cats.cats,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(EditItem);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/containers/Admin/edit_item.js"],"names":["React","PureComponent","connect","Link","Select","CreatableSelect","getItemById","updateItem","clearItem","deleteItem","getAllColls","getAllCats","getAllSubCats","EditItem","state","formdata","_id","props","match","params","id","title","creator","subject","description","source","date_created","contributor","item_format","materials","physical_dimensions","pages","editor","publisher","further_info","language","reference","rights","file_format","address","subcategory_ref","external_link","url","text","geo","handleInput","event","name","level","newFormdata","target","value","setState","deletePost","dispatch","history","push","redirectUser","setTimeout","submitForm","e","preventDefault","updateData","createTextInput","stateVar","placeholder","label","addDefaultImg","ev","newImg","src","componentDidMount","componentWillUnmount","getDerivedStateFromProps","nextProps","prevState","formReturn","items","item","length","render","isClearable","isSearchable","isDisabled","isLoading","isRtl","itemDeleted","window","confirm","mapStateToProps","colls","collections","cats","subcats"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// import axios from 'axios';\n// import { ToastContainer, toast } from 'react-toastify';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\n\n\n\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions';\nimport { getAllColls, getAllCats, getAllSubCats  } from '../../actions';\n\n\n\nclass EditItem extends PureComponent {\n\n\n    state = {\n        formdata:{\n            _id:this.props.match.params.id,\n            title: '',\n            creator: '',\n            subject: '',\n            description: '',\n            source: '',\n            date_created: '',\n            \n            contributor: '',\n            // collection_id: '',     \n            item_format: '',\n            materials: '',\n            physical_dimensions: '',\n            pages: '',        \n            editor: '',\n            publisher: '',\n            further_info: '',\n            language: '',\n            reference: '',\n            rights: '',\n            file_format: '',\n            address: '',\n            // category_ref: '',\n            subcategory_ref: '',\n            // tags: [\n            //     {\n            //         id: '',\n            //         text: ''\n            //     }\n            // ],\n            external_link: {\n                url: '',\n                text: ''\n            },\n            geo: {\n                address: ''\n            }\n        },\n        // selectedFile: null,\n        // loaded: 0,\n        // // categories\n        // catOptions: [],\n        // existingCats: [],\n        // updatedCats: [],\n        // catsAreUpdated: false,\n        // // tags\n        // existingTags: [],\n        // updatedTags: [],\n        // tagsAreUpdated: false,\n        // // collection\n        // collOptions: [{ value: null, label: 'None' } ],\n        // existingColl: null,\n        // updatedColl: null,\n        // collIsUpdated: false,\n  \n        // isClearable: true,\n        // isDisabled: false,\n        // isLoading: false,\n        // isRtl: false,\n        // isSearchable: true\n    }\n\n\n    componentDidMount() {\n        this.props.dispatch(getItemById(this.props.match.params.id))\n        // this.props.dispatch(getAllColls())\n        // this.props.dispatch(getAllCats());\n        // this.props.dispatch(getAllSubCats());\n    }\n\n\n    componentWillUnmount() {\n        this.props.dispatch(clearItem())\n    }\n\n    handleInput = (event, name, level) => {\n        // make a copy of formdata\n        const newFormdata = {\n            ...this.state.formdata\n        }\n\n\n        if (level === 'external_link') {\n            newFormdata.external_link[name] = event.target.value;\n        } else if (level === 'geo') {\n            newFormdata.geo[name] = event.target.value;\n        // } else if (level === 'tags') {\n        //     newFormdata.tags[name] = event.target.value;\n        } else {\n            newFormdata[name] = event.target.value;\n        }\n\n\n        // copy it back to state\n        this.setState({\n            formdata:newFormdata\n\n        })\n    }\n\n\n\n\n    \n\n\n    deletePost = () => {\n        this.props.dispatch(deleteItem(this.state.formdata._id));\n        this.props.history.push('/user/all-items');\n    }\n\n\n\n    redirectUser = () => {\n        setTimeout(() => {\n            this.props.history.push('/user/all-items')\n        }, 1000)\n    }\n\n\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        \n        // console.log(nextProps);\n\n        let formReturn;\n        // let catReturn;\n        // let tagReturn;\n        // let collReturn;\n\n        // *********** GENERAL FORM STUFF *****************************\n        if (nextProps.items.item ) {\n\n            let item = nextProps.items.item;\n                        \n            let formdata = prevState.formdata;\n            // console.log(formdata);\n\n            formdata = {\n                ...formdata,\n                _id:item._id,\n                title:item.title,  //\n                creator:item.creator,  //\n                description:item.description,  //\n                pages:item.pages,  //\n                // collection_id:item.collection_id,  //\n                source:item.source,   //\n\n                subject: item.subject,\n                date_created: item.date_created,\n                // tags: item.tags,\n                contributor: item.contributor,\n                item_format: item.item_format,\n                materials: item.materials,\n                physical_dimensions: item.physical_dimensions,\n                editor: item.editor,\n                publisher: item.publisher,\n                further_info: item.further_info,\n                language: item.language,\n                reference: item.reference,\n                rights: item.rights,\n                file_format: item.file_format,\n                // category_ref: item.category_ref,\n                subcategory_ref: item.subcategory_ref\n            }\n\n            // console.log(formdata);\n            \n            if (item.external_link && item.external_link.length && item.external_link.url) {\n                formdata = {\n                    ...formdata,\n                    external_link : {\n                        url: item.external_link[0].url,\n                        text: item.external_link[0].text\n                    }\n                }\n\n            }\n                \n            // console.log(formdata);\n\n\n            if (item.geo && item.geo.length && item.geo.address) {\n                formdata = {\n                    ...formdata,\n                    geo: {\n                        address: item.geo.address\n                    }\n                }\n            }\n\n            // console.log(formdata);\n            formReturn = formdata;\n            \n            // console.log(formReturn);\n\n        }\n\n\n        // // *********** CATEGORY SELECT *****************************\n\n        // let catOptionsFromProps = prevState.catOptions;\n        // let catsFromProps = prevState.existingCats;\n        // let catsDone = false;\n        // // let catOptionsFromProps = [];\n        // // let catsFromProps = [];\n        // console.log(prevState.catsAreUpdated);\n\n\n        // if (nextProps.cats && nextProps.cats.length && !prevState.catsAreUpdated) {\n        //     nextProps.cats.map( (cat, i) => {\n        //         catOptionsFromProps.push({\n        //             value: cat.cat_id,\n        //             label: cat.title\n        //         })\n        //     })\n\n        //     if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n        //         // console.log(nextProps.items.item.category_ref);\n        //         nextProps.items.item.category_ref.map( (catref, i) => {\n        //             let catTitle;\n        //             nextProps.cats.map( (cat, i) => {\n        //                 if (cat.cat_id == catref) {\n        //                     catTitle = cat.title;\n        //                     let element = {\n        //                         value: catref,\n        //                         label: catTitle\n        //                     };\n        //                     if (!catsFromProps.includes(element)) {\n        //                         // console.log('push!');\n        //                         catsFromProps.push(element)\n        //                     }\n        //                 }\n        //             })\n                    \n        //         })\n        //         catsDone = true;\n        //     }\n        // }\n\n        // // console.log(catsFromProps);\n\n        // catReturn = {\n        //     catOptions: catOptionsFromProps,\n        //     existingCats: catsFromProps,\n        //     catsAreUpdated: catsDone\n        // }\n\n        // // console.log(catReturn);\n\n        // // *********** TAGS SELECT *****************************\n\n        // let tagsFromProps = [];\n\n        // if (nextProps.items.item && nextProps.items.item.tags) {\n        //     nextProps.items.item.tags.map( tag => {\n        //         tagsFromProps.push({\n        //             value: tag.value,\n        //             label: tag.label\n        //         })\n        //     })\n            \n        // }\n        // tagReturn = {\n        //     existingTags: tagsFromProps,\n        //     tagsAreUpdated: true\n        // }\n\n        // // *********** COLLECTION SELECT *****************************\n        // let collOptionsFromProps = [];\n        // let collFromProps = null;\n\n\n        // if (nextProps.colls && nextProps.colls.length) {\n        //     nextProps.colls.map( coll => {\n        //         collOptionsFromProps.push({\n        //             value: coll.id,\n        //             label: coll.title\n        //         })\n        //     })\n\n        //     if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n        //         nextProps.colls.map ( coll => {\n        //             let collTitle = null;\n        //             if (coll.id == nextProps.items.item.collection_id) {\n        //                 collTitle = coll.title;\n\n        //                 collFromProps = {\n        //                     value: nextProps.items.item.collection_id,\n        //                     label: collTitle\n        //                 }\n        //             }\n        //         })\n        //     }\n\n        //     // console.log(collOptionsFromProps);\n\n        //     collReturn =  {\n        //         collOptions: collOptionsFromProps,\n        //         existingColl: collFromProps,\n        //         collIsUpdated: true\n        //     }\n        //     // console.log(collReturn);\n        // }\n        // *********** RETURN *****************************\n\n  \n        // let allColls, prevColls, updateColls = [];\n        // if (collReturn) {\n        //     allColls = [prevState.collOptions, ...collReturn.collOptions];\n        //     prevColls = collReturn.existingColl;\n        //     updateColls = collReturn.collIsUpdated;\n        // }\n\n\n\n\n        return {\n            formdata: {...formReturn},\n\n            // catOptions: catReturn.catOptions,\n            // existingCats: catReturn.existingCats,\n            // catsAreUpdated: catReturn.catsAreUpdated,\n            \n            // existingTags: tagReturn.existingTags,\n            // tagsAreUpdated: tagReturn.tagsAreUpdated,\n            \n            // collOptions: allColls,\n            // existingColl: prevColls,\n            // collIsUpdated: updateColls,\n\n            // updated: true,\n        }\n\n    }\n\n    // // CAT HANDLERS\n\n    // handleChangeCats = (newValue) => {\n    //     if (newValue && newValue.length) {\n    //         this.setState({ \n    //             updatedCats: [...newValue]\n    //         });\n    //     } else {\n    //         this.setState({ \n    //             updatedCats: []\n    //         });\n    //     }\n\n\n    // };\n\n    // onClickHandlerCats = () => {\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         category_ref: []\n    //     };\n    //     if (this.state.updatedCats && this.state.updatedCats.length) {\n    //         this.state.updatedCats.map( cat => {\n    //             updateData.category_ref.push(cat.value);\n    //         })\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n\n    // // TAG HANDLERS\n\n    // handleChangeTags = (newValue) => {\n    //     if (newValue && newValue.length) {\n    //         console.log(newValue)\n    //         this.setState({ \n    //             updatedTags: [...newValue]\n    //         });\n\n    //     } else {\n    //         this.setState({ \n    //             updatedTags: []\n    //         });\n    //     }\n    // };\n\n    // onClickHandlerTags = () => {\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         tags: []\n    //     };\n\n    //     if (this.state.updatedTags && this.state.updatedTags.length) {\n    //         this.state.updatedTags.map( tag => {\n    //             updateData.tags.push(tag);\n    //         })\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n    // // COLL HANDLERS\n\n    // handleChangeColl = (newValue) => {\n    //     console.log(newValue);\n    //     if (newValue) {\n    //         this.setState({ \n    //             updatedColl: newValue\n    //         });\n    //     } \n    // };\n\n    // onClickHandlerColl = () => {\n\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         collection_id: null\n    //     };\n    //     if (this.state.updatedColl ) {\n    //         updateData.collection_id = this.state.updatedColl.value;\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n    submitForm = (e) => {\n        e.preventDefault();\n        // console.log(this.state.formdata);\n\n\n        let updateData = { ...this.state.formdata }\n\n        \n\n        \n        // if (this.state.updatedCats && this.state.updatedCats.length) {\n\n        //     this.state.updatedCats.map( cat => {\n        //         updateData.category_ref.push(cat.value);\n        //     })\n        // } \n\n        // if (this.state.updatedTags && this.state.updatedTags.length) {\n        //     this.state.updatedTags.map( tag => {\n        //         updateData.tags.push(tag);\n        //     })\n        // } \n        // if (this.state.updatedColl ) {\n        //     updateData.collection_id = this.state.updatedColl.value;\n        // } \n\n\n        // this.onClickHandlerCats();\n        // this.onClickHandlerTags();\n        // this.onClickHandlerColl();\n\n        // console.log(this.state);\n\n        this.props.dispatch(updateItem({\n                ...updateData\n                // ...this.state.formdata\n            }\n        ))\n    }\n\n    \n\n\n\n    createTextInput = (stateVar, name, placeholder, label, level) => {\n        // let string = `this.state.formdata.${variable}`;\n\n        return (\n            <tr>\n                <td>\n                    {label}\n                </td>\n                <td>\n                    <div className=\"form_element\">\n                        <input\n                            type=\"text\"\n                            placeholder={placeholder}\n                            value={stateVar} \n                            onChange={(event) => this.handleInput(event, name, level)}\n                        />\n                    </div>\n                </td>\n                \n            </tr>\n        )\n    }\n\n\n\n    // ****************************************************\n\n    addDefaultImg = (ev) => {\n        const newImg = '/images/default/default.jpg';\n        if (ev.target.src !== newImg) {\n            ev.target.src = newImg\n        }  \n    } \n\n    render() {\n\n        let items = this.props.items;\n\n        const {\n            isClearable,\n            isSearchable,\n            isDisabled,\n            isLoading,\n            isRtl,\n        } = this.state;\n\n        return (\n            \n            \n            <div className=\"rl_container article edit_page\">\n                {/* { this.state.loaded ? */}\n                    \n                    {\n                        items.updateItem ?\n                            <div className=\"edit_confirm\">\n                                Post updated, <Link to={`/items/${items.item._id}`}>\n                                    Click here to see your post\n                                </Link>\n                            </div>\n                        : null\n                    }\n\n\n                    {\n                        items.itemDeleted ?\n                            <div className=\"red_tag\">\n                                Item Deleted    \n                                {this.redirectUser()}\n                            </div>\n\n                        : null\n                    }\n\n\n                    <form onSubmit={this.submitForm}>\n                        \n                        <h2>Edit item:</h2>\n\n                        <img src={`/images/items/${this.state.formdata._id}/sq_thumbnail/0.jpg`} alt=\"Item\" onError={this.addDefaultImg}/>\n\n                        <table>\n                        <tbody>\n                        \n                            {this.createTextInput(this.state.formdata.title,'title', \"Enter title\", \"Title\")}\n                            {this.createTextInput(this.state.formdata.creator,'creator', \"Enter creator\", \"Creator\")}\n\n\n\n\n                            <tr>\n                                <td className=\"label\">\n                                    Description\n                                </td>\n                                <td>\n                                    <textarea\n                                        value={this.state.formdata.description}\n                                        onChange={(event) => this.handleInput(event, 'description')}\n                                    />\n                                </td>\n                            </tr>\n\n                            \n                            <tr>\n                                <td className=\"label\">\n                                    Pages\n                                </td>\n                                <td>\n                                    <div className=\"form_element\">\n                                        <input\n                                            type=\"number\"\n                                            placeholder=\"Enter pages\"\n                                            value={this.state.formdata.pages} \n                                            onChange={(event) => this.handleInput(event, 'pages')}                        />\n                                    </div>\n                                </td>\n                            </tr>\n\n                            {this.createTextInput(this.state.formdata.source,'source', \"Enter item source\", \"Source\")}\n                            {this.createTextInput(this.state.formdata.subject,'subject', \"Subject\", \"Subject\")}\n                            {this.createTextInput(this.state.formdata.date_created,'date_created', \"Date item was created\", \"Date\")}\n                            {/* <tr>\n                                <td>\n                                    Tags\n                                </td>\n                                <td>\n                                    {this.state.tagsAreUpdated && this.props.items && this.props.items.item?\n                                        <CreatableSelect\n                                            key={`tag_${this.props.items.item._id}`}\n                                            defaultValue={this.state.existingTags}\n                                            isMulti\n                                            onChange={this.handleChangeTags}\n                                            options={this.state.updatedTags}\n                                        />\n                                    : null}\n                                    {/* <Tags tags={this.state.formdata.tags} id={this.props.match.params.id}/> */}\n                                {/* </td>\n                            </tr>  */}\n                            {this.createTextInput(this.state.formdata.contributor,'contributor', \"contributor\", \"Contributor\")}\n                            {this.createTextInput(this.state.formdata.item_format,'item_format', \"The item's format\", \"Format\")}\n                            {this.createTextInput(this.state.formdata.materials,'materials', \"materials\", \"Materials\")}\n                            {this.createTextInput(this.state.formdata.physical_dimensions,'physical_dimensions', \"Physical dimensions\", \"Dimensions\")}\n                            {this.createTextInput(this.state.formdata.editor,'editor', \"editor\", \"Editor\")}\n                            {this.createTextInput(this.state.formdata.publisher,'publisher', \"publisher\", \"Publisher\")}\n                            {this.createTextInput(this.state.formdata.further_info,'further_info', \"Enter any further info, resources..\", \"Further Info\")}\n                            \n                            {/* {this.createTextInput(this.state.formdata.external_link.url,'url', \"External link url\", \"URL\")} */}\n                            {/* {this.createTextInput(this.state.formdata.external_link.text,'text', \"External link text\", 'Description of the link', \"Link Description\")} */}\n\n                            {this.createTextInput(this.state.formdata.language,'language', \"language\", \"Language\")}\n                            {this.createTextInput(this.state.formdata.reference,'reference', \"reference\", \"Ref\")}\n                            {this.createTextInput(this.state.formdata.rights,'rights', \"rights\", \"Rights\")}\n                            {/* {this.createTextInput(this.state.formdata.geo.address,'address', \"Item address\", \"Address\")} */}\n                            \n                        \n\n                            {/* <tr>\n                                <td>\n                                    \n                                </td>\n                                <td>\n                                    <span>Selected: \n                                        { this.state.formdata.category_ref && this.state.formdata.category_ref.length > 0 ?\n                                            this.state.formdata.category_ref.map( (ref, i) => (\n                                                <span>{ref} </span>\n                                            )) \n                                        : <span>No categories selected</span>}\n                                    </span>\n                                </td>\n                            </tr> */}\n\n                    \n\n                            \n                        </tbody>\n                        </table>\n\n                        <button type=\"submit\">Submit Edit</button>\n                        \n                        <div className=\"delete_post\">\n                            <div className=\"button\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) this.deletePost(e) } }>\n                                Delete item\n                            </div>\n                        </div>\n\n                    </form>\n            </div>\n            \n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        items:state.items,\n        colls:state.collections.colls,\n        cats:state.cats.cats,\n        subcats:state.cats.subcats\n    }\n}\n\nexport default connect(mapStateToProps)(EditItem)\n\n\n"]},"metadata":{},"sourceType":"module"}