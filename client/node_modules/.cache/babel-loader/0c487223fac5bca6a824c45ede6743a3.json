{"ast":null,"code":"import axios from 'axios';\nexport function getBooks(limit = 10, start = 0, order = 'asc', list = '') {\n  const request = axios.get(`/api/books?limit=${limit}&skip=${start}&order=${order}`).then(response => {\n    if (list) {\n      return [...list, ...response.data];\n    } else {\n      return response.data;\n    }\n  }); // console.log(request);\n\n  return {\n    type: 'GET_BOOKS',\n    payload: request\n  };\n} // two requests inside one action, book and user. user reduxthunk\n\nexport function getBookWithReviewer(id) {\n  // reduxthunk's dispatched function sends payload to reducers whenever we are ready\n  // as an alternative to getBooks\n  const request = axios.get(`/api/getBook?id=${id}`); // return a dispatch function\n\n  return dispatch => {\n    // get the promise, using {{{destructuring}}}\n    request.then(({\n      data\n    }) => {\n      let book = data; // console.log(book);\n\n      axios.get(`/api/getReviewer?id=${book.ownerId}`).then(({\n        data\n      }) => {\n        let response = {\n          book,\n          reviewer: data\n        };\n        console.log(response); // only gets executed when ready\n\n        dispatch({\n          type: 'GET_BOOK_W_REVIEWER',\n          payload: response\n        });\n      });\n    });\n  };\n}\nexport function clearBookWithReviewer() {\n  return {\n    type: 'CLEAR_BOOK_W_REVIEWER',\n    payload: {\n      book: {},\n      reviewer: {}\n    }\n  };\n} // ******************** USER ACTIONS ********************\n\nexport function loginUser({\n  email,\n  password\n}) {\n  const request = axios.post('/api/login', {\n    email,\n    password\n  }).then(response => response.data);\n  return {\n    type: 'USER_LOGIN',\n    payload: request\n  };\n}\nexport function auth() {\n  const request = axios.get('/api/auth').then(response => response.data);\n  return {\n    type: 'USER_AUTH'\n  };\n}","map":{"version":3,"sources":["/Users/johnlinnane/DEV/react-bootcamp/13_book_shelf/client/src/actions/index.js"],"names":["axios","getBooks","limit","start","order","list","request","get","then","response","data","type","payload","getBookWithReviewer","id","dispatch","book","ownerId","reviewer","console","log","clearBookWithReviewer","loginUser","email","password","post","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,OAAO,SAASC,QAAT,CACHC,KAAK,GAAG,EADL,EAEHC,KAAK,GAAG,CAFL,EAGHC,KAAK,GAAG,KAHL,EAIHC,IAAI,GAAG,EAJJ,EAKL;AACE,QAAMC,OAAO,GAAGN,KAAK,CAACO,GAAN,CAAW,oBAAmBL,KAAM,SAAQC,KAAM,UAASC,KAAM,EAAjE,EACKI,IADL,CACUC,QAAQ,IAAI;AACd,QAAGJ,IAAH,EAAQ;AACJ,aAAO,CAAC,GAAGA,IAAJ,EAAU,GAAGI,QAAQ,CAACC,IAAtB,CAAP;AACH,KAFD,MAEO;AACH,aAAOD,QAAQ,CAACC,IAAhB;AACH;AACJ,GAPL,CAAhB,CADF,CAUE;;AAEA,SAAM;AACFC,IAAAA,IAAI,EAAC,WADH;AAEFC,IAAAA,OAAO,EAACN;AAFN,GAAN;AAIH,C,CAGD;;AACA,OAAO,SAASO,mBAAT,CAA6BC,EAA7B,EAAiC;AAEpC;AACA;AACA,QAAMR,OAAO,GAAGN,KAAK,CAACO,GAAN,CAAW,mBAAkBO,EAAG,EAAhC,CAAhB,CAJoC,CAMpC;;AACA,SAAQC,QAAD,IAAc;AAEjB;AACAT,IAAAA,OAAO,CAACE,IAAR,CAAa,CAAC;AAACE,MAAAA;AAAD,KAAD,KAAY;AACrB,UAAIM,IAAI,GAAGN,IAAX,CADqB,CAErB;;AAEAV,MAAAA,KAAK,CAACO,GAAN,CAAW,uBAAsBS,IAAI,CAACC,OAAQ,EAA9C,EACKT,IADL,CACU,CAAC;AAACE,QAAAA;AAAD,OAAD,KAAY;AAEd,YAAID,QAAQ,GAAG;AACXO,UAAAA,IADW;AAEXE,UAAAA,QAAQ,EAACR;AAFE,SAAf;AAKAS,QAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ,EAPc,CASd;;AACAM,QAAAA,QAAQ,CAAC;AACLJ,UAAAA,IAAI,EAAC,qBADA;AAELC,UAAAA,OAAO,EAACH;AAFH,SAAD,CAAR;AAIH,OAfL;AAgBH,KApBD;AAqBH,GAxBD;AAyBH;AAED,OAAO,SAASY,qBAAT,GAAiC;AACpC,SAAO;AACHV,IAAAA,IAAI,EAAC,uBADF;AAEHC,IAAAA,OAAO,EAAC;AACJI,MAAAA,IAAI,EAAC,EADD;AAEJE,MAAAA,QAAQ,EAAC;AAFL;AAFL,GAAP;AAOH,C,CAID;;AAEA,OAAO,SAASI,SAAT,CAAmB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAnB,EAAsC;AAEzC,QAAMlB,OAAO,GAAGN,KAAK,CAACyB,IAAN,CAAW,YAAX,EAAyB;AAACF,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAzB,EACKhB,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAD/B,CAAhB;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAC,YADF;AAEHC,IAAAA,OAAO,EAACN;AAFL,GAAP;AAIH;AAGD,OAAO,SAASoB,IAAT,GAAgB;AACnB,QAAMpB,OAAO,GAAGN,KAAK,CAACO,GAAN,CAAU,WAAV,EACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAD/B,CAAhB;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAC;AADF,GAAP;AAIH","sourcesContent":["import axios from 'axios';\n\n\n\nexport function getBooks(\n    limit = 10,\n    start = 0,\n    order = 'asc',\n    list = ''\n) {\n    const request = axios.get(`/api/books?limit=${limit}&skip=${start}&order=${order}`)\n                        .then(response => {\n                            if(list){\n                                return [...list, ...response.data]\n                            } else {\n                                return response.data\n                            }\n                        })\n\n    // console.log(request);\n\n    return{\n        type:'GET_BOOKS',\n        payload:request\n    }\n}\n\n\n// two requests inside one action, book and user. user reduxthunk\nexport function getBookWithReviewer(id) {\n\n    // reduxthunk's dispatched function sends payload to reducers whenever we are ready\n    // as an alternative to getBooks\n    const request = axios.get(`/api/getBook?id=${id}`)\n\n    // return a dispatch function\n    return (dispatch) => {\n\n        // get the promise, using {{{destructuring}}}\n        request.then(({data}) => {\n            let book = data;\n            // console.log(book);\n\n            axios.get(`/api/getReviewer?id=${book.ownerId}`)\n                .then(({data}) => {\n                \n                    let response = {\n                        book, \n                        reviewer:data\n                    }\n\n                    console.log(response);\n\n                    // only gets executed when ready\n                    dispatch({\n                        type:'GET_BOOK_W_REVIEWER',\n                        payload:response\n                    })\n                })\n        })\n    }\n}\n\nexport function clearBookWithReviewer() {\n    return {\n        type:'CLEAR_BOOK_W_REVIEWER',\n        payload:{\n            book:{},\n            reviewer:{}\n        }\n    }\n}\n\n\n\n// ******************** USER ACTIONS ********************\n\nexport function loginUser({email, password}) {\n\n    const request = axios.post('/api/login', {email, password})\n                        .then(response => response.data);\n\n    return {\n        type:'USER_LOGIN',\n        payload:request\n    }\n}\n\n\nexport function auth() {\n    const request = axios.get('/api/auth') \n                        .then(response => response.data);\n\n    return {\n        type:'USER_AUTH'\n    }\n\n}"]},"metadata":{},"sourceType":"module"}