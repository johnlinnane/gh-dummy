{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/containers/Admin/edit_item_2_sel.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions';\nimport { getAllColls, getAllCats, getAllSubCats } from '../../actions'; // import Tags from '../../widgetsUI/tags';\n\nclass EditItem extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // formdata:{\n      //     _id:this.props.match.params.id,\n      //     title: '',\n      //     creator: '',\n      //     subject: '',\n      //     description: '',\n      //     source: '',\n      //     date_created: '',\n      //     contributor: '',\n      //     // collection_id: '',     \n      //     item_format: '',\n      //     materials: '',\n      //     physical_dimensions: '',\n      //     pages: '',        \n      //     editor: '',\n      //     publisher: '',\n      //     further_info: '',\n      //     language: '',\n      //     reference: '',\n      //     rights: '',\n      //     file_format: '',\n      //     address: '',\n      //     // category_ref: '',\n      //     subcategory_ref: '',\n      //     // tags: [\n      //     //     {\n      //     //         id: '',\n      //     //         text: ''\n      //     //     }\n      //     // ],\n      //     external_link: {\n      //         url: '',\n      //         text: ''\n      //     },\n      //     geo: {\n      //         address: ''\n      //     }\n      // },\n      // selectedFile: null,\n      // loaded: 0,\n      // categories\n      catOptions: [],\n      existingCats: [],\n      updatedCats: [],\n      catsAreUpdated: false,\n      // tags\n      existingTags: [],\n      updatedTags: [],\n      tagsAreUpdated: false,\n      // collection\n      collOptions: [{\n        value: null,\n        label: 'None'\n      }],\n      existingColl: null,\n      updatedColl: null,\n      collIsUpdated: false,\n      isClearable: true,\n      isDisabled: false,\n      isLoading: false,\n      isRtl: false,\n      isSearchable: true\n    };\n\n    this.handleInput = (event, name, level) => {\n      // make a copy of formdata\n      const newFormdata = { ...this.state.formdata\n      }; // if (level === 'external_link') {\n      //     newFormdata.external_link[name] = event.target.value;\n      // } else if (level === 'geo') {\n      //     newFormdata.geo[name] = event.target.value;\n      // } else if (level === 'tags') {\n      //     newFormdata.tags[name] = event.target.value;\n      // } else {\n      //     newFormdata[name] = event.target.value;\n      // }\n      // copy it back to state\n\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.deletePost = () => {\n      this.props.dispatch(deleteItem(this.state.formdata._id));\n      this.props.history.push('/user/all-items');\n    };\n\n    this.redirectUser = () => {\n      setTimeout(() => {\n        this.props.history.push('/user/all-items');\n      }, 1000);\n    };\n\n    this.handleChangeCats = newValue => {\n      if (newValue && newValue.length) {\n        this.setState({\n          updatedCats: [...newValue]\n        });\n      } else {\n        this.setState({\n          updatedCats: []\n        });\n      }\n    };\n\n    this.handleChangeTags = newValue => {\n      if (newValue && newValue.length) {\n        console.log(newValue);\n        this.setState({\n          updatedTags: [...newValue]\n        });\n      } else {\n        this.setState({\n          updatedTags: []\n        });\n      }\n    };\n\n    this.handleChangeColl = newValue => {\n      console.log(newValue);\n\n      if (newValue) {\n        this.setState({\n          updatedColl: newValue\n        });\n      }\n    };\n\n    this.submitForm = e => {\n      e.preventDefault(); // console.log(this.state.formdata);\n\n      let updateData = { ...this.state.formdata\n      };\n\n      if (this.state.updatedCats && this.state.updatedCats.length) {\n        this.state.updatedCats.map(cat => {\n          updateData.category_ref.push(cat.value);\n        });\n      }\n\n      if (this.state.updatedTags && this.state.updatedTags.length) {\n        this.state.updatedTags.map(tag => {\n          updateData.tags.push(tag);\n        });\n      }\n\n      if (this.state.updatedColl) {\n        updateData.collection_id = this.state.updatedColl.value;\n      } // this.onClickHandlerCats();\n      // this.onClickHandlerTags();\n      // this.onClickHandlerColl();\n      // console.log(this.state);\n\n\n      this.props.dispatch(updateItem({ ...updateData // ...this.state.formdata\n\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getItemById(this.props.match.params.id));\n    this.props.dispatch(getAllColls());\n    this.props.dispatch(getAllCats());\n    this.props.dispatch(getAllSubCats());\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(clearItem());\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // console.log(nextProps);\n    let formReturn;\n    let catReturn;\n    let tagReturn;\n    let collReturn; // *********** GENERAL FORM STUFF *****************************\n\n    if (nextProps.items.item) {\n      let item = nextProps.items.item;\n      let formdata = prevState.formdata; // console.log(formdata);\n\n      formdata = { ...formdata,\n        _id: item._id,\n        title: item.title,\n        //\n        creator: item.creator,\n        //\n        description: item.description,\n        //\n        pages: item.pages,\n        //\n        // collection_id:item.collection_id,  //\n        source: item.source,\n        //\n        subject: item.subject,\n        date_created: item.date_created,\n        // tags: item.tags,\n        contributor: item.contributor,\n        item_format: item.item_format,\n        materials: item.materials,\n        physical_dimensions: item.physical_dimensions,\n        editor: item.editor,\n        publisher: item.publisher,\n        further_info: item.further_info,\n        language: item.language,\n        reference: item.reference,\n        rights: item.rights,\n        file_format: item.file_format,\n        // category_ref: item.category_ref,\n        subcategory_ref: item.subcategory_ref\n      }; // console.log(formdata);\n\n      if (item.external_link && item.external_link.length && item.external_link.url) {\n        formdata = { ...formdata,\n          external_link: {\n            url: item.external_link[0].url,\n            text: item.external_link[0].text\n          }\n        };\n      } // console.log(formdata);\n\n\n      if (item.geo && item.geo.length && item.geo.address) {\n        formdata = { ...formdata,\n          geo: {\n            address: item.geo.address\n          }\n        };\n      } // console.log(formdata);\n\n\n      formReturn = formdata; // console.log(formReturn);\n    } // *********** CATEGORY SELECT *****************************\n\n\n    let catOptionsFromProps = prevState.catOptions;\n    let catsFromProps = prevState.existingCats;\n    let catsDone = false; // let catOptionsFromProps = [];\n    // let catsFromProps = [];\n\n    console.log(prevState.catsAreUpdated);\n\n    if (nextProps.cats && nextProps.cats.length && !prevState.catsAreUpdated) {\n      nextProps.cats.map((cat, i) => {\n        catOptionsFromProps.push({\n          value: cat.cat_id,\n          label: cat.title\n        });\n      });\n\n      if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length) {\n        // console.log(nextProps.items.item.category_ref);\n        nextProps.items.item.category_ref.map((catref, i) => {\n          let catTitle;\n          nextProps.cats.map((cat, i) => {\n            if (cat.cat_id == catref) {\n              catTitle = cat.title;\n              let element = {\n                value: catref,\n                label: catTitle\n              };\n\n              if (!catsFromProps.includes(element)) {\n                // console.log('push!');\n                catsFromProps.push(element);\n              }\n            }\n          });\n        });\n        catsDone = true;\n      }\n    } // console.log(catsFromProps);\n\n\n    catReturn = {\n      catOptions: catOptionsFromProps,\n      existingCats: catsFromProps,\n      catsAreUpdated: catsDone\n    }; // console.log(catReturn);\n    // *********** TAGS SELECT *****************************\n\n    let tagsFromProps = [];\n\n    if (nextProps.items.item && nextProps.items.item.tags) {\n      nextProps.items.item.tags.map(tag => {\n        tagsFromProps.push({\n          value: tag.value,\n          label: tag.label\n        });\n      });\n    }\n\n    tagReturn = {\n      existingTags: tagsFromProps,\n      tagsAreUpdated: true\n    }; // *********** COLLECTION SELECT *****************************\n\n    let collOptionsFromProps = [];\n    let collFromProps = null;\n\n    if (nextProps.colls && nextProps.colls.length) {\n      nextProps.colls.map(coll => {\n        collOptionsFromProps.push({\n          value: coll.id,\n          label: coll.title\n        });\n      });\n\n      if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n        nextProps.colls.map(coll => {\n          let collTitle = null;\n\n          if (coll.id == nextProps.items.item.collection_id) {\n            collTitle = coll.title;\n            collFromProps = {\n              value: nextProps.items.item.collection_id,\n              label: collTitle\n            };\n          }\n        });\n      } // console.log(collOptionsFromProps);\n\n\n      collReturn = {\n        collOptions: collOptionsFromProps,\n        existingColl: collFromProps,\n        collIsUpdated: true\n      }; // console.log(collReturn);\n    } // *********** RETURN *****************************\n\n\n    let allColls,\n        prevColls,\n        updateColls = [];\n\n    if (collReturn) {\n      allColls = [prevState.collOptions, ...collReturn.collOptions];\n      prevColls = collReturn.existingColl;\n      updateColls = collReturn.collIsUpdated;\n    }\n\n    return {\n      formdata: { ...formReturn\n      },\n      catOptions: catReturn.catOptions,\n      existingCats: catReturn.existingCats,\n      catsAreUpdated: catReturn.catsAreUpdated,\n      existingTags: tagReturn.existingTags,\n      tagsAreUpdated: tagReturn.tagsAreUpdated,\n      collOptions: allColls,\n      existingColl: prevColls,\n      collIsUpdated: updateColls,\n      updated: true\n    };\n  } // CAT HANDLERS\n\n\n  // createTextInput = (stateVar, name, placeholder, label, level) => {\n  //     // let string = `this.state.formdata.${variable}`;\n  //     return (\n  //         <tr>\n  //             <td>\n  //                 {label}\n  //             </td>\n  //             <td>\n  //                 <div className=\"form_element\">\n  //                     <input\n  //                         type=\"text\"\n  //                         placeholder={placeholder}\n  //                         value={stateVar} \n  //                         onChange={(event) => this.handleInput(event, name, level)}\n  //                     />\n  //                 </div>\n  //             </td>\n  //         </tr>\n  //     )\n  // }\n  // addDefaultImg = (ev) => {\n  //     const newImg = '/images/default/default.jpg';\n  //     if (ev.target.src !== newImg) {\n  //         ev.target.src = newImg\n  //     }  \n  // } \n  render() {\n    let items = this.props.items;\n    const {\n      isClearable,\n      isSearchable,\n      isDisabled,\n      isLoading,\n      isRtl\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rl_container article edit_page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 13\n      }\n    }, items.updateItem ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit_confirm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 29\n      }\n    }, \"Post updated, \", /*#__PURE__*/React.createElement(Link, {\n      to: `/items/${items.item._id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 47\n      }\n    }, \"Click here to see your post\")) : null, items.itemDeleted ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"red_tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 29\n      }\n    }, \"Item Deleted\", this.redirectUser()) : null, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 25\n      }\n    }, \"Edit item:\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 25\n      }\n    }, \"Item : \", this.state.formdata.title), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 33\n      }\n    }, \"Tags\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 33\n      }\n    }, this.state.tagsAreUpdated && this.props.items && this.props.items.item ? /*#__PURE__*/React.createElement(CreatableSelect, {\n      key: `tag_${this.props.items.item._id}`,\n      defaultValue: this.state.existingTags,\n      isMulti: true,\n      onChange: this.handleChangeTags,\n      options: this.state.updatedTags,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 41\n      }\n    }) : null)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 33\n      }\n    }, \"Collection\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 37\n      }\n    }, this.state.collIsUpdated && this.props.items && this.props.items.item ? /*#__PURE__*/React.createElement(Select, {\n      key: `col_${this.props.items.item._id}`,\n      className: \"basic-single\",\n      classNamePrefix: \"select\",\n      defaultValue: this.state.existingColl,\n      isDisabled: isDisabled,\n      isLoading: isLoading,\n      isClearable: isClearable,\n      isRtl: isRtl,\n      isSearchable: isSearchable,\n      name: \"color\",\n      options: this.state.collOptions,\n      onChange: this.handleChangeColl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 45\n      }\n    }) : null))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 33\n      }\n    }, \"Category\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 37\n      }\n    }, this.state.updated && this.state.catsAreUpdated && this.props.items && this.props.items.item ? /*#__PURE__*/React.createElement(Select, {\n      key: `cat_${this.props.items.item._id}`,\n      defaultValue: this.state.existingCats,\n      isMulti: true,\n      name: \"colors\",\n      options: this.state.catOptions,\n      className: \"basic-multi-select\",\n      classNamePrefix: \"select\",\n      onChange: this.handleChangeCats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 45\n      }\n    }) : null))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 33\n      }\n    }, \"Sub-categories\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 37\n      }\n    }, \"Selection here\"))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 25\n      }\n    }, \"Submit Edit\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"delete_post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: e => {\n        if (window.confirm('Are you sure you wish to delete this item?')) this.deletePost(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 29\n      }\n    }, \"Delete item\"))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    items: state.items,\n    colls: state.collections.colls,\n    cats: state.cats.cats,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(EditItem);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/containers/Admin/edit_item_2_sel.js"],"names":["React","PureComponent","connect","Link","axios","ToastContainer","toast","Select","CreatableSelect","getItemById","updateItem","clearItem","deleteItem","getAllColls","getAllCats","getAllSubCats","EditItem","state","catOptions","existingCats","updatedCats","catsAreUpdated","existingTags","updatedTags","tagsAreUpdated","collOptions","value","label","existingColl","updatedColl","collIsUpdated","isClearable","isDisabled","isLoading","isRtl","isSearchable","handleInput","event","name","level","newFormdata","formdata","setState","deletePost","props","dispatch","_id","history","push","redirectUser","setTimeout","handleChangeCats","newValue","length","handleChangeTags","console","log","handleChangeColl","submitForm","e","preventDefault","updateData","map","cat","category_ref","tag","tags","collection_id","componentDidMount","match","params","id","componentWillUnmount","getDerivedStateFromProps","nextProps","prevState","formReturn","catReturn","tagReturn","collReturn","items","item","title","creator","description","pages","source","subject","date_created","contributor","item_format","materials","physical_dimensions","editor","publisher","further_info","language","reference","rights","file_format","subcategory_ref","external_link","url","text","geo","address","catOptionsFromProps","catsFromProps","catsDone","cats","i","cat_id","catref","catTitle","element","includes","tagsFromProps","collOptionsFromProps","collFromProps","colls","coll","collTitle","allColls","prevColls","updateColls","updated","render","itemDeleted","window","confirm","mapStateToProps","collections","subcats"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AAKA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,UAA7C,QAA+D,eAA/D;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,aAAlC,QAAwD,eAAxD,C,CACA;;AAIA,MAAMC,QAAN,SAAuBf,aAAvB,CAAqC;AAAA;AAAA;AAAA,SAGjCgB,KAHiC,GAGzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,UAAU,EAAE,EA3CR;AA4CJC,MAAAA,YAAY,EAAE,EA5CV;AA6CJC,MAAAA,WAAW,EAAE,EA7CT;AA8CJC,MAAAA,cAAc,EAAE,KA9CZ;AA+CJ;AACAC,MAAAA,YAAY,EAAE,EAhDV;AAiDJC,MAAAA,WAAW,EAAE,EAjDT;AAkDJC,MAAAA,cAAc,EAAE,KAlDZ;AAmDJ;AACAC,MAAAA,WAAW,EAAE,CAAC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAAD,CApDT;AAqDJC,MAAAA,YAAY,EAAE,IArDV;AAsDJC,MAAAA,WAAW,EAAE,IAtDT;AAuDJC,MAAAA,aAAa,EAAE,KAvDX;AAyDJC,MAAAA,WAAW,EAAE,IAzDT;AA0DJC,MAAAA,UAAU,EAAE,KA1DR;AA2DJC,MAAAA,SAAS,EAAE,KA3DP;AA4DJC,MAAAA,KAAK,EAAE,KA5DH;AA6DJC,MAAAA,YAAY,EAAE;AA7DV,KAHyB;;AAAA,SAgFjCC,WAhFiC,GAgFnB,CAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,KAAwB;AAClC;AACA,YAAMC,WAAW,GAAG,EAChB,GAAG,KAAKvB,KAAL,CAAWwB;AADE,OAApB,CAFkC,CAOlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,WAAKC,QAAL,CAAc;AACVD,QAAAA,QAAQ,EAACD;AADC,OAAd;AAIH,KAvGgC;;AAAA,SA+GjCG,UA/GiC,GA+GpB,MAAM;AACf,WAAKC,KAAL,CAAWC,QAAX,CAAoBjC,UAAU,CAAC,KAAKK,KAAL,CAAWwB,QAAX,CAAoBK,GAArB,CAA9B;AACA,WAAKF,KAAL,CAAWG,OAAX,CAAmBC,IAAnB,CAAwB,iBAAxB;AACH,KAlHgC;;AAAA,SAsHjCC,YAtHiC,GAsHlB,MAAM;AACjBC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKN,KAAL,CAAWG,OAAX,CAAmBC,IAAnB,CAAwB,iBAAxB;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KA1HgC;;AAAA,SAwVjCG,gBAxViC,GAwVbC,QAAD,IAAc;AAC7B,UAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAzB,EAAiC;AAC7B,aAAKX,QAAL,CAAc;AACVtB,UAAAA,WAAW,EAAE,CAAC,GAAGgC,QAAJ;AADH,SAAd;AAGH,OAJD,MAIO;AACH,aAAKV,QAAL,CAAc;AACVtB,UAAAA,WAAW,EAAE;AADH,SAAd;AAGH;AAGJ,KApWgC;;AAAA,SAwXjCkC,gBAxXiC,GAwXbF,QAAD,IAAc;AAC7B,UAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAzB,EAAiC;AAC7BE,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,aAAKV,QAAL,CAAc;AACVnB,UAAAA,WAAW,EAAE,CAAC,GAAG6B,QAAJ;AADH,SAAd;AAIH,OAND,MAMO;AACH,aAAKV,QAAL,CAAc;AACVnB,UAAAA,WAAW,EAAE;AADH,SAAd;AAGH;AACJ,KApYgC;;AAAA,SAwZjCkC,gBAxZiC,GAwZbL,QAAD,IAAc;AAC7BG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,UAAIA,QAAJ,EAAc;AACV,aAAKV,QAAL,CAAc;AACVb,UAAAA,WAAW,EAAEuB;AADH,SAAd;AAGH;AACJ,KA/ZgC;;AAAA,SA+ajCM,UA/aiC,GA+anBC,CAAD,IAAO;AAChBA,MAAAA,CAAC,CAACC,cAAF,GADgB,CAEhB;;AAGA,UAAIC,UAAU,GAAG,EAAE,GAAG,KAAK5C,KAAL,CAAWwB;AAAhB,OAAjB;;AAKA,UAAI,KAAKxB,KAAL,CAAWG,WAAX,IAA0B,KAAKH,KAAL,CAAWG,WAAX,CAAuBiC,MAArD,EAA6D;AAEzD,aAAKpC,KAAL,CAAWG,WAAX,CAAuB0C,GAAvB,CAA4BC,GAAG,IAAI;AAC/BF,UAAAA,UAAU,CAACG,YAAX,CAAwBhB,IAAxB,CAA6Be,GAAG,CAACrC,KAAjC;AACH,SAFD;AAGH;;AAED,UAAI,KAAKT,KAAL,CAAWM,WAAX,IAA0B,KAAKN,KAAL,CAAWM,WAAX,CAAuB8B,MAArD,EAA6D;AACzD,aAAKpC,KAAL,CAAWM,WAAX,CAAuBuC,GAAvB,CAA4BG,GAAG,IAAI;AAC/BJ,UAAAA,UAAU,CAACK,IAAX,CAAgBlB,IAAhB,CAAqBiB,GAArB;AACH,SAFD;AAGH;;AACD,UAAI,KAAKhD,KAAL,CAAWY,WAAf,EAA6B;AACzBgC,QAAAA,UAAU,CAACM,aAAX,GAA2B,KAAKlD,KAAL,CAAWY,WAAX,CAAuBH,KAAlD;AACH,OAxBe,CA2BhB;AACA;AACA;AAEA;;;AAEA,WAAKkB,KAAL,CAAWC,QAAX,CAAoBnC,UAAU,CAAC,EACvB,GAAGmD,UADoB,CAEvB;;AAFuB,OAAD,CAA9B;AAKH,KArdgC;AAAA;;AAoEjCO,EAAAA,iBAAiB,GAAG;AAChB,SAAKxB,KAAL,CAAWC,QAAX,CAAoBpC,WAAW,CAAC,KAAKmC,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBC,EAAzB,CAA/B;AACA,SAAK3B,KAAL,CAAWC,QAAX,CAAoBhC,WAAW,EAA/B;AACA,SAAK+B,KAAL,CAAWC,QAAX,CAAoB/B,UAAU,EAA9B;AACA,SAAK8B,KAAL,CAAWC,QAAX,CAAoB9B,aAAa,EAAjC;AACH;;AAGDyD,EAAAA,oBAAoB,GAAG;AACnB,SAAK5B,KAAL,CAAWC,QAAX,CAAoBlC,SAAS,EAA7B;AACH;;AAiDD,SAAO8D,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAElD;AAEA,QAAIC,UAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,UAAJ,CAPkD,CASlD;;AACA,QAAIL,SAAS,CAACM,KAAV,CAAgBC,IAApB,EAA2B;AAEvB,UAAIA,IAAI,GAAGP,SAAS,CAACM,KAAV,CAAgBC,IAA3B;AAEA,UAAIxC,QAAQ,GAAGkC,SAAS,CAAClC,QAAzB,CAJuB,CAKvB;;AAEAA,MAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEPK,QAAAA,GAAG,EAACmC,IAAI,CAACnC,GAFF;AAGPoC,QAAAA,KAAK,EAACD,IAAI,CAACC,KAHJ;AAGY;AACnBC,QAAAA,OAAO,EAACF,IAAI,CAACE,OAJN;AAIgB;AACvBC,QAAAA,WAAW,EAACH,IAAI,CAACG,WALV;AAKwB;AAC/BC,QAAAA,KAAK,EAACJ,IAAI,CAACI,KANJ;AAMY;AACnB;AACAC,QAAAA,MAAM,EAACL,IAAI,CAACK,MARL;AAQe;AAEtBC,QAAAA,OAAO,EAAEN,IAAI,CAACM,OAVP;AAWPC,QAAAA,YAAY,EAAEP,IAAI,CAACO,YAXZ;AAYP;AACAC,QAAAA,WAAW,EAAER,IAAI,CAACQ,WAbX;AAcPC,QAAAA,WAAW,EAAET,IAAI,CAACS,WAdX;AAePC,QAAAA,SAAS,EAAEV,IAAI,CAACU,SAfT;AAgBPC,QAAAA,mBAAmB,EAAEX,IAAI,CAACW,mBAhBnB;AAiBPC,QAAAA,MAAM,EAAEZ,IAAI,CAACY,MAjBN;AAkBPC,QAAAA,SAAS,EAAEb,IAAI,CAACa,SAlBT;AAmBPC,QAAAA,YAAY,EAAEd,IAAI,CAACc,YAnBZ;AAoBPC,QAAAA,QAAQ,EAAEf,IAAI,CAACe,QApBR;AAqBPC,QAAAA,SAAS,EAAEhB,IAAI,CAACgB,SArBT;AAsBPC,QAAAA,MAAM,EAAEjB,IAAI,CAACiB,MAtBN;AAuBPC,QAAAA,WAAW,EAAElB,IAAI,CAACkB,WAvBX;AAwBP;AACAC,QAAAA,eAAe,EAAEnB,IAAI,CAACmB;AAzBf,OAAX,CAPuB,CAmCvB;;AAEA,UAAInB,IAAI,CAACoB,aAAL,IAAsBpB,IAAI,CAACoB,aAAL,CAAmBhD,MAAzC,IAAmD4B,IAAI,CAACoB,aAAL,CAAmBC,GAA1E,EAA+E;AAC3E7D,QAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP4D,UAAAA,aAAa,EAAG;AACZC,YAAAA,GAAG,EAAErB,IAAI,CAACoB,aAAL,CAAmB,CAAnB,EAAsBC,GADf;AAEZC,YAAAA,IAAI,EAAEtB,IAAI,CAACoB,aAAL,CAAmB,CAAnB,EAAsBE;AAFhB;AAFT,SAAX;AAQH,OA9CsB,CAgDvB;;;AAGA,UAAItB,IAAI,CAACuB,GAAL,IAAYvB,IAAI,CAACuB,GAAL,CAASnD,MAArB,IAA+B4B,IAAI,CAACuB,GAAL,CAASC,OAA5C,EAAqD;AACjDhE,QAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP+D,UAAAA,GAAG,EAAE;AACDC,YAAAA,OAAO,EAAExB,IAAI,CAACuB,GAAL,CAASC;AADjB;AAFE,SAAX;AAMH,OA1DsB,CA4DvB;;;AACA7B,MAAAA,UAAU,GAAGnC,QAAb,CA7DuB,CA+DvB;AAEH,KA3EiD,CA8ElD;;;AAEA,QAAIiE,mBAAmB,GAAG/B,SAAS,CAACzD,UAApC;AACA,QAAIyF,aAAa,GAAGhC,SAAS,CAACxD,YAA9B;AACA,QAAIyF,QAAQ,GAAG,KAAf,CAlFkD,CAmFlD;AACA;;AACArD,IAAAA,OAAO,CAACC,GAAR,CAAYmB,SAAS,CAACtD,cAAtB;;AAGA,QAAIqD,SAAS,CAACmC,IAAV,IAAkBnC,SAAS,CAACmC,IAAV,CAAexD,MAAjC,IAA2C,CAACsB,SAAS,CAACtD,cAA1D,EAA0E;AACtEqD,MAAAA,SAAS,CAACmC,IAAV,CAAe/C,GAAf,CAAoB,CAACC,GAAD,EAAM+C,CAAN,KAAY;AAC5BJ,QAAAA,mBAAmB,CAAC1D,IAApB,CAAyB;AACrBtB,UAAAA,KAAK,EAAEqC,GAAG,CAACgD,MADU;AAErBpF,UAAAA,KAAK,EAAEoC,GAAG,CAACmB;AAFU,SAAzB;AAIH,OALD;;AAOA,UAAIR,SAAS,CAACM,KAAV,IAAmBN,SAAS,CAACM,KAAV,CAAgBC,IAAnC,IAA2CP,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBjB,YAAhE,IAAgFU,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBjB,YAArB,CAAkCX,MAAtH,EAA+H;AAC3H;AACAqB,QAAAA,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBjB,YAArB,CAAkCF,GAAlC,CAAuC,CAACkD,MAAD,EAASF,CAAT,KAAe;AAClD,cAAIG,QAAJ;AACAvC,UAAAA,SAAS,CAACmC,IAAV,CAAe/C,GAAf,CAAoB,CAACC,GAAD,EAAM+C,CAAN,KAAY;AAC5B,gBAAI/C,GAAG,CAACgD,MAAJ,IAAcC,MAAlB,EAA0B;AACtBC,cAAAA,QAAQ,GAAGlD,GAAG,CAACmB,KAAf;AACA,kBAAIgC,OAAO,GAAG;AACVxF,gBAAAA,KAAK,EAAEsF,MADG;AAEVrF,gBAAAA,KAAK,EAAEsF;AAFG,eAAd;;AAIA,kBAAI,CAACN,aAAa,CAACQ,QAAd,CAAuBD,OAAvB,CAAL,EAAsC;AAClC;AACAP,gBAAAA,aAAa,CAAC3D,IAAd,CAAmBkE,OAAnB;AACH;AACJ;AACJ,WAZD;AAcH,SAhBD;AAiBAN,QAAAA,QAAQ,GAAG,IAAX;AACH;AACJ,KArHiD,CAuHlD;;;AAEA/B,IAAAA,SAAS,GAAG;AACR3D,MAAAA,UAAU,EAAEwF,mBADJ;AAERvF,MAAAA,YAAY,EAAEwF,aAFN;AAGRtF,MAAAA,cAAc,EAAEuF;AAHR,KAAZ,CAzHkD,CA+HlD;AAEA;;AAEA,QAAIQ,aAAa,GAAG,EAApB;;AAEA,QAAI1C,SAAS,CAACM,KAAV,CAAgBC,IAAhB,IAAwBP,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBf,IAAjD,EAAuD;AACnDQ,MAAAA,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBf,IAArB,CAA0BJ,GAA1B,CAA+BG,GAAG,IAAI;AAClCmD,QAAAA,aAAa,CAACpE,IAAd,CAAmB;AACftB,UAAAA,KAAK,EAAEuC,GAAG,CAACvC,KADI;AAEfC,UAAAA,KAAK,EAAEsC,GAAG,CAACtC;AAFI,SAAnB;AAIH,OALD;AAOH;;AACDmD,IAAAA,SAAS,GAAG;AACRxD,MAAAA,YAAY,EAAE8F,aADN;AAER5F,MAAAA,cAAc,EAAE;AAFR,KAAZ,CA9IkD,CAmJlD;;AACA,QAAI6F,oBAAoB,GAAG,EAA3B;AACA,QAAIC,aAAa,GAAG,IAApB;;AAGA,QAAI5C,SAAS,CAAC6C,KAAV,IAAmB7C,SAAS,CAAC6C,KAAV,CAAgBlE,MAAvC,EAA+C;AAC3CqB,MAAAA,SAAS,CAAC6C,KAAV,CAAgBzD,GAAhB,CAAqB0D,IAAI,IAAI;AACzBH,QAAAA,oBAAoB,CAACrE,IAArB,CAA0B;AACtBtB,UAAAA,KAAK,EAAE8F,IAAI,CAACjD,EADU;AAEtB5C,UAAAA,KAAK,EAAE6F,IAAI,CAACtC;AAFU,SAA1B;AAIH,OALD;;AAOA,UAAIR,SAAS,CAACM,KAAV,IAAmBN,SAAS,CAACM,KAAV,CAAgBC,IAAnC,IAA2CP,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBd,aAApE,EAAmF;AAC/EO,QAAAA,SAAS,CAAC6C,KAAV,CAAgBzD,GAAhB,CAAsB0D,IAAI,IAAI;AAC1B,cAAIC,SAAS,GAAG,IAAhB;;AACA,cAAID,IAAI,CAACjD,EAAL,IAAWG,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBd,aAApC,EAAmD;AAC/CsD,YAAAA,SAAS,GAAGD,IAAI,CAACtC,KAAjB;AAEAoC,YAAAA,aAAa,GAAG;AACZ5F,cAAAA,KAAK,EAAEgD,SAAS,CAACM,KAAV,CAAgBC,IAAhB,CAAqBd,aADhB;AAEZxC,cAAAA,KAAK,EAAE8F;AAFK,aAAhB;AAIH;AACJ,SAVD;AAWH,OApB0C,CAsB3C;;;AAEA1C,MAAAA,UAAU,GAAI;AACVtD,QAAAA,WAAW,EAAE4F,oBADH;AAEVzF,QAAAA,YAAY,EAAE0F,aAFJ;AAGVxF,QAAAA,aAAa,EAAE;AAHL,OAAd,CAxB2C,CA6B3C;AACH,KAtLiD,CAuLlD;;;AAGA,QAAI4F,QAAJ;AAAA,QAAcC,SAAd;AAAA,QAAyBC,WAAW,GAAG,EAAvC;;AACA,QAAI7C,UAAJ,EAAgB;AACZ2C,MAAAA,QAAQ,GAAG,CAAC/C,SAAS,CAAClD,WAAX,EAAwB,GAAGsD,UAAU,CAACtD,WAAtC,CAAX;AACAkG,MAAAA,SAAS,GAAG5C,UAAU,CAACnD,YAAvB;AACAgG,MAAAA,WAAW,GAAG7C,UAAU,CAACjD,aAAzB;AACH;;AAKD,WAAO;AACHW,MAAAA,QAAQ,EAAE,EAAC,GAAGmC;AAAJ,OADP;AAGH1D,MAAAA,UAAU,EAAE2D,SAAS,CAAC3D,UAHnB;AAIHC,MAAAA,YAAY,EAAE0D,SAAS,CAAC1D,YAJrB;AAKHE,MAAAA,cAAc,EAAEwD,SAAS,CAACxD,cALvB;AAOHC,MAAAA,YAAY,EAAEwD,SAAS,CAACxD,YAPrB;AAQHE,MAAAA,cAAc,EAAEsD,SAAS,CAACtD,cARvB;AAUHC,MAAAA,WAAW,EAAEiG,QAVV;AAWH9F,MAAAA,YAAY,EAAE+F,SAXX;AAYH7F,MAAAA,aAAa,EAAE8F,WAZZ;AAcHC,MAAAA,OAAO,EAAE;AAdN,KAAP;AAiBH,GApVgC,CAsVjC;;;AAqIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AAEL,QAAI9C,KAAK,GAAG,KAAKpC,KAAL,CAAWoC,KAAvB;AAEA,UAAM;AACFjD,MAAAA,WADE;AAEFI,MAAAA,YAFE;AAGFH,MAAAA,UAHE;AAIFC,MAAAA,SAJE;AAKFC,MAAAA;AALE,QAMF,KAAKjB,KANT;AAQA,wBAGI;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIY+D,KAAK,CAACtE,UAAN,gBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACkB,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAG,UAASsE,KAAK,CAACC,IAAN,CAAWnC,GAAI,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADlB,CADJ,GAME,IAVd,EAeYkC,KAAK,CAAC+C,WAAN,gBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEK,KAAK9E,YAAL,EAFL,CADJ,GAME,IArBd,eAyBQ;AAAM,MAAA,QAAQ,EAAE,KAAKS,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAc,KAAKzC,KAAL,CAAWwB,QAAX,CAAoByC,KAAlC,CAHJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKjE,KAAL,CAAWO,cAAX,IAA6B,KAAKoB,KAAL,CAAWoC,KAAxC,IAAiD,KAAKpC,KAAL,CAAWoC,KAAX,CAAiBC,IAAlE,gBACG,oBAAC,eAAD;AACI,MAAA,GAAG,EAAG,OAAM,KAAKrC,KAAL,CAAWoC,KAAX,CAAiBC,IAAjB,CAAsBnC,GAAI,EAD1C;AAEI,MAAA,YAAY,EAAE,KAAK7B,KAAL,CAAWK,YAF7B;AAGI,MAAA,OAAO,MAHX;AAII,MAAA,QAAQ,EAAE,KAAKgC,gBAJnB;AAKI,MAAA,OAAO,EAAE,KAAKrC,KAAL,CAAWM,WALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAQC,IATN,CAJJ,CAbJ,eAoCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKN,KAAL,CAAWa,aAAX,IAA4B,KAAKc,KAAL,CAAWoC,KAAvC,IAAgD,KAAKpC,KAAL,CAAWoC,KAAX,CAAiBC,IAAjE,gBACG,oBAAC,MAAD;AACI,MAAA,GAAG,EAAG,OAAM,KAAKrC,KAAL,CAAWoC,KAAX,CAAiBC,IAAjB,CAAsBnC,GAAI,EAD1C;AAEI,MAAA,SAAS,EAAC,cAFd;AAGI,MAAA,eAAe,EAAC,QAHpB;AAII,MAAA,YAAY,EAAE,KAAK7B,KAAL,CAAWW,YAJ7B;AAKI,MAAA,UAAU,EAAEI,UALhB;AAMI,MAAA,SAAS,EAAEC,SANf;AAOI,MAAA,WAAW,EAAEF,WAPjB;AAQI,MAAA,KAAK,EAAEG,KARX;AASI,MAAA,YAAY,EAAEC,YATlB;AAUI,MAAA,IAAI,EAAC,OAVT;AAWI,MAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWQ,WAXxB;AAYI,MAAA,QAAQ,EAAE,KAAKgC,gBAZnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAeC,IAhBN,CADJ,CAJJ,CApCJ,eA+DI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGK,KAAKxC,KAAL,CAAW4G,OAAX,IAAsB,KAAK5G,KAAL,CAAWI,cAAjC,IAAmD,KAAKuB,KAAL,CAAWoC,KAA9D,IAAuE,KAAKpC,KAAL,CAAWoC,KAAX,CAAiBC,IAAxF,gBACG,oBAAC,MAAD;AACI,MAAA,GAAG,EAAG,OAAM,KAAKrC,KAAL,CAAWoC,KAAX,CAAiBC,IAAjB,CAAsBnC,GAAI,EAD1C;AAEI,MAAA,YAAY,EAAE,KAAK7B,KAAL,CAAWE,YAF7B;AAGI,MAAA,OAAO,MAHX;AAII,MAAA,IAAI,EAAC,QAJT;AAKI,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,UALxB;AAMI,MAAA,SAAS,EAAC,oBANd;AAOI,MAAA,eAAe,EAAC,QAPpB;AAQI,MAAA,QAAQ,EAAE,KAAKiC,gBARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAWC,IAdN,CADJ,CAJJ,CA/DJ,eA4FI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAJJ,CA5FJ,eAoHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApHJ,CADA,CAPJ,eAmII;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAnIJ,eAqII;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,OAAO,EAAGQ,CAAD,IAAO;AAAE,YAAIqE,MAAM,CAACC,OAAP,CAAe,4CAAf,CAAJ,EAAkE,KAAKtF,UAAL,CAAgBgB,CAAhB;AAAoB,OAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CArIJ,CAzBR,CAHJ;AA4KH;;AArrBgC;;AAwrBrC,SAASuE,eAAT,CAAyBjH,KAAzB,EAAgC;AAC5B,SAAO;AACH+D,IAAAA,KAAK,EAAC/D,KAAK,CAAC+D,KADT;AAEHuC,IAAAA,KAAK,EAACtG,KAAK,CAACkH,WAAN,CAAkBZ,KAFrB;AAGHV,IAAAA,IAAI,EAAC5F,KAAK,CAAC4F,IAAN,CAAWA,IAHb;AAIHuB,IAAAA,OAAO,EAACnH,KAAK,CAAC4F,IAAN,CAAWuB;AAJhB,GAAP;AAMH;;AAED,eAAelI,OAAO,CAACgI,eAAD,CAAP,CAAyBlH,QAAzB,CAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\n\n\n\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions';\nimport { getAllColls, getAllCats, getAllSubCats  } from '../../actions';\n// import Tags from '../../widgetsUI/tags';\n\n\n\nclass EditItem extends PureComponent {\n\n\n    state = {\n        // formdata:{\n        //     _id:this.props.match.params.id,\n        //     title: '',\n        //     creator: '',\n        //     subject: '',\n        //     description: '',\n        //     source: '',\n        //     date_created: '',\n            \n        //     contributor: '',\n        //     // collection_id: '',     \n        //     item_format: '',\n        //     materials: '',\n        //     physical_dimensions: '',\n        //     pages: '',        \n        //     editor: '',\n        //     publisher: '',\n        //     further_info: '',\n        //     language: '',\n        //     reference: '',\n        //     rights: '',\n        //     file_format: '',\n        //     address: '',\n        //     // category_ref: '',\n        //     subcategory_ref: '',\n        //     // tags: [\n        //     //     {\n        //     //         id: '',\n        //     //         text: ''\n        //     //     }\n        //     // ],\n        //     external_link: {\n        //         url: '',\n        //         text: ''\n        //     },\n        //     geo: {\n        //         address: ''\n        //     }\n        // },\n        // selectedFile: null,\n        // loaded: 0,\n        // categories\n        catOptions: [],\n        existingCats: [],\n        updatedCats: [],\n        catsAreUpdated: false,\n        // tags\n        existingTags: [],\n        updatedTags: [],\n        tagsAreUpdated: false,\n        // collection\n        collOptions: [{ value: null, label: 'None' } ],\n        existingColl: null,\n        updatedColl: null,\n        collIsUpdated: false,\n  \n        isClearable: true,\n        isDisabled: false,\n        isLoading: false,\n        isRtl: false,\n        isSearchable: true\n    }\n\n\n    componentDidMount() {\n        this.props.dispatch(getItemById(this.props.match.params.id))\n        this.props.dispatch(getAllColls())\n        this.props.dispatch(getAllCats());\n        this.props.dispatch(getAllSubCats());\n    }\n\n\n    componentWillUnmount() {\n        this.props.dispatch(clearItem())\n    }\n\n    handleInput = (event, name, level) => {\n        // make a copy of formdata\n        const newFormdata = {\n            ...this.state.formdata\n        }\n\n\n        // if (level === 'external_link') {\n        //     newFormdata.external_link[name] = event.target.value;\n        // } else if (level === 'geo') {\n        //     newFormdata.geo[name] = event.target.value;\n        // } else if (level === 'tags') {\n        //     newFormdata.tags[name] = event.target.value;\n        // } else {\n        //     newFormdata[name] = event.target.value;\n        // }\n\n\n        // copy it back to state\n        this.setState({\n            formdata:newFormdata\n\n        })\n    }\n\n\n\n\n    \n\n\n    deletePost = () => {\n        this.props.dispatch(deleteItem(this.state.formdata._id));\n        this.props.history.push('/user/all-items');\n    }\n\n\n\n    redirectUser = () => {\n        setTimeout(() => {\n            this.props.history.push('/user/all-items')\n        }, 1000)\n    }\n\n\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        \n        // console.log(nextProps);\n\n        let formReturn;\n        let catReturn;\n        let tagReturn;\n        let collReturn;\n\n        // *********** GENERAL FORM STUFF *****************************\n        if (nextProps.items.item ) {\n\n            let item = nextProps.items.item;\n                        \n            let formdata = prevState.formdata;\n            // console.log(formdata);\n\n            formdata = {\n                ...formdata,\n                _id:item._id,\n                title:item.title,  //\n                creator:item.creator,  //\n                description:item.description,  //\n                pages:item.pages,  //\n                // collection_id:item.collection_id,  //\n                source:item.source,   //\n\n                subject: item.subject,\n                date_created: item.date_created,\n                // tags: item.tags,\n                contributor: item.contributor,\n                item_format: item.item_format,\n                materials: item.materials,\n                physical_dimensions: item.physical_dimensions,\n                editor: item.editor,\n                publisher: item.publisher,\n                further_info: item.further_info,\n                language: item.language,\n                reference: item.reference,\n                rights: item.rights,\n                file_format: item.file_format,\n                // category_ref: item.category_ref,\n                subcategory_ref: item.subcategory_ref\n            }\n\n            // console.log(formdata);\n            \n            if (item.external_link && item.external_link.length && item.external_link.url) {\n                formdata = {\n                    ...formdata,\n                    external_link : {\n                        url: item.external_link[0].url,\n                        text: item.external_link[0].text\n                    }\n                }\n\n            }\n                \n            // console.log(formdata);\n\n\n            if (item.geo && item.geo.length && item.geo.address) {\n                formdata = {\n                    ...formdata,\n                    geo: {\n                        address: item.geo.address\n                    }\n                }\n            }\n\n            // console.log(formdata);\n            formReturn = formdata;\n            \n            // console.log(formReturn);\n\n        }\n\n\n        // *********** CATEGORY SELECT *****************************\n\n        let catOptionsFromProps = prevState.catOptions;\n        let catsFromProps = prevState.existingCats;\n        let catsDone = false;\n        // let catOptionsFromProps = [];\n        // let catsFromProps = [];\n        console.log(prevState.catsAreUpdated);\n\n\n        if (nextProps.cats && nextProps.cats.length && !prevState.catsAreUpdated) {\n            nextProps.cats.map( (cat, i) => {\n                catOptionsFromProps.push({\n                    value: cat.cat_id,\n                    label: cat.title\n                })\n            })\n\n            if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n                // console.log(nextProps.items.item.category_ref);\n                nextProps.items.item.category_ref.map( (catref, i) => {\n                    let catTitle;\n                    nextProps.cats.map( (cat, i) => {\n                        if (cat.cat_id == catref) {\n                            catTitle = cat.title;\n                            let element = {\n                                value: catref,\n                                label: catTitle\n                            };\n                            if (!catsFromProps.includes(element)) {\n                                // console.log('push!');\n                                catsFromProps.push(element)\n                            }\n                        }\n                    })\n                    \n                })\n                catsDone = true;\n            }\n        }\n\n        // console.log(catsFromProps);\n\n        catReturn = {\n            catOptions: catOptionsFromProps,\n            existingCats: catsFromProps,\n            catsAreUpdated: catsDone\n        }\n\n        // console.log(catReturn);\n\n        // *********** TAGS SELECT *****************************\n\n        let tagsFromProps = [];\n\n        if (nextProps.items.item && nextProps.items.item.tags) {\n            nextProps.items.item.tags.map( tag => {\n                tagsFromProps.push({\n                    value: tag.value,\n                    label: tag.label\n                })\n            })\n            \n        }\n        tagReturn = {\n            existingTags: tagsFromProps,\n            tagsAreUpdated: true\n        }\n\n        // *********** COLLECTION SELECT *****************************\n        let collOptionsFromProps = [];\n        let collFromProps = null;\n\n\n        if (nextProps.colls && nextProps.colls.length) {\n            nextProps.colls.map( coll => {\n                collOptionsFromProps.push({\n                    value: coll.id,\n                    label: coll.title\n                })\n            })\n\n            if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n                nextProps.colls.map ( coll => {\n                    let collTitle = null;\n                    if (coll.id == nextProps.items.item.collection_id) {\n                        collTitle = coll.title;\n\n                        collFromProps = {\n                            value: nextProps.items.item.collection_id,\n                            label: collTitle\n                        }\n                    }\n                })\n            }\n\n            // console.log(collOptionsFromProps);\n\n            collReturn =  {\n                collOptions: collOptionsFromProps,\n                existingColl: collFromProps,\n                collIsUpdated: true\n            }\n            // console.log(collReturn);\n        }\n        // *********** RETURN *****************************\n\n  \n        let allColls, prevColls, updateColls = [];\n        if (collReturn) {\n            allColls = [prevState.collOptions, ...collReturn.collOptions];\n            prevColls = collReturn.existingColl;\n            updateColls = collReturn.collIsUpdated;\n        }\n\n\n\n\n        return {\n            formdata: {...formReturn},\n\n            catOptions: catReturn.catOptions,\n            existingCats: catReturn.existingCats,\n            catsAreUpdated: catReturn.catsAreUpdated,\n            \n            existingTags: tagReturn.existingTags,\n            tagsAreUpdated: tagReturn.tagsAreUpdated,\n            \n            collOptions: allColls,\n            existingColl: prevColls,\n            collIsUpdated: updateColls,\n\n            updated: true,\n        }\n\n    }\n\n    // CAT HANDLERS\n\n    handleChangeCats = (newValue) => {\n        if (newValue && newValue.length) {\n            this.setState({ \n                updatedCats: [...newValue]\n            });\n        } else {\n            this.setState({ \n                updatedCats: []\n            });\n        }\n\n\n    };\n\n    // onClickHandlerCats = () => {\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         category_ref: []\n    //     };\n    //     if (this.state.updatedCats && this.state.updatedCats.length) {\n    //         this.state.updatedCats.map( cat => {\n    //             updateData.category_ref.push(cat.value);\n    //         })\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n\n    // TAG HANDLERS\n\n    handleChangeTags = (newValue) => {\n        if (newValue && newValue.length) {\n            console.log(newValue)\n            this.setState({ \n                updatedTags: [...newValue]\n            });\n\n        } else {\n            this.setState({ \n                updatedTags: []\n            });\n        }\n    };\n\n    // onClickHandlerTags = () => {\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         tags: []\n    //     };\n\n    //     if (this.state.updatedTags && this.state.updatedTags.length) {\n    //         this.state.updatedTags.map( tag => {\n    //             updateData.tags.push(tag);\n    //         })\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n    // COLL HANDLERS\n\n    handleChangeColl = (newValue) => {\n        console.log(newValue);\n        if (newValue) {\n            this.setState({ \n                updatedColl: newValue\n            });\n        } \n    };\n\n    // onClickHandlerColl = () => {\n\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         collection_id: null\n    //     };\n    //     if (this.state.updatedColl ) {\n    //         updateData.collection_id = this.state.updatedColl.value;\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n    submitForm = (e) => {\n        e.preventDefault();\n        // console.log(this.state.formdata);\n\n\n        let updateData = { ...this.state.formdata }\n\n        \n\n        \n        if (this.state.updatedCats && this.state.updatedCats.length) {\n\n            this.state.updatedCats.map( cat => {\n                updateData.category_ref.push(cat.value);\n            })\n        } \n\n        if (this.state.updatedTags && this.state.updatedTags.length) {\n            this.state.updatedTags.map( tag => {\n                updateData.tags.push(tag);\n            })\n        } \n        if (this.state.updatedColl ) {\n            updateData.collection_id = this.state.updatedColl.value;\n        } \n\n\n        // this.onClickHandlerCats();\n        // this.onClickHandlerTags();\n        // this.onClickHandlerColl();\n\n        // console.log(this.state);\n\n        this.props.dispatch(updateItem({\n                ...updateData\n                // ...this.state.formdata\n            }\n        ))\n    }\n\n    \n\n\n\n    // createTextInput = (stateVar, name, placeholder, label, level) => {\n    //     // let string = `this.state.formdata.${variable}`;\n\n    //     return (\n    //         <tr>\n    //             <td>\n    //                 {label}\n    //             </td>\n    //             <td>\n    //                 <div className=\"form_element\">\n    //                     <input\n    //                         type=\"text\"\n    //                         placeholder={placeholder}\n    //                         value={stateVar} \n    //                         onChange={(event) => this.handleInput(event, name, level)}\n    //                     />\n    //                 </div>\n    //             </td>\n                \n    //         </tr>\n    //     )\n    // }\n\n\n\n\n\n    // addDefaultImg = (ev) => {\n    //     const newImg = '/images/default/default.jpg';\n    //     if (ev.target.src !== newImg) {\n    //         ev.target.src = newImg\n    //     }  \n    // } \n\n    render() {\n\n        let items = this.props.items;\n\n        const {\n            isClearable,\n            isSearchable,\n            isDisabled,\n            isLoading,\n            isRtl,\n        } = this.state;\n\n        return (\n            \n            \n            <div className=\"rl_container article edit_page\">\n                {/* { this.state.loaded ? */}\n                    \n                    {\n                        items.updateItem ?\n                            <div className=\"edit_confirm\">\n                                Post updated, <Link to={`/items/${items.item._id}`}>\n                                    Click here to see your post\n                                </Link>\n                            </div>\n                        : null\n                    }\n\n\n                    {\n                        items.itemDeleted ?\n                            <div className=\"red_tag\">\n                                Item Deleted    \n                                {this.redirectUser()}\n                            </div>\n\n                        : null\n                    }\n\n\n                    <form onSubmit={this.submitForm}>\n                        \n                        <h2>Edit item:</h2>\n                        <span>Item : {this.state.formdata.title}</span>\n\n                        {/* <img src={`/images/items/${this.state.formdata._id}/sq_thumbnail/0.jpg`} alt=\"Item\" onError={this.addDefaultImg}/> */}\n\n                        <table>\n                        <tbody>\n                        \n                            \n\n\n\n\n                           \n\n                            \n                           \n\n                    \n                            <tr>\n                                <td>\n                                    Tags\n                                </td>\n                                <td>\n                                    {this.state.tagsAreUpdated && this.props.items && this.props.items.item?\n                                        <CreatableSelect\n                                            key={`tag_${this.props.items.item._id}`}\n                                            defaultValue={this.state.existingTags}\n                                            isMulti\n                                            onChange={this.handleChangeTags}\n                                            options={this.state.updatedTags}\n                                        />\n                                    : null}\n                                    {/* <Tags tags={this.state.formdata.tags} id={this.props.match.params.id}/> */}\n                                </td>\n                            </tr>\n                          \n                            \n                            \n\n                          \n                            \n                            <tr>\n                                <td>\n                                    Collection\n                                </td>\n                                <td>\n                                    <div className=\"form_element\">\n                                        {this.state.collIsUpdated && this.props.items && this.props.items.item  ?\n                                            <Select\n                                                key={`col_${this.props.items.item._id}`}\n                                                className=\"basic-single\"\n                                                classNamePrefix=\"select\"\n                                                defaultValue={this.state.existingColl}\n                                                isDisabled={isDisabled}\n                                                isLoading={isLoading}\n                                                isClearable={isClearable}\n                                                isRtl={isRtl}\n                                                isSearchable={isSearchable}\n                                                name=\"color\"\n                                                options={this.state.collOptions}\n                                                onChange={this.handleChangeColl}\n                                            />\n                                        : null}\n                                       \n                                    </div>\n                                </td>\n                            </tr>\n\n                            <tr>\n                                <td>\n                                    Category\n                                </td>\n                                <td>\n                                    <div className=\"form_element\">\n\n\n                                        {this.state.updated && this.state.catsAreUpdated && this.props.items && this.props.items.item ?\n                                            <Select\n                                                key={`cat_${this.props.items.item._id}`}\n                                                defaultValue={this.state.existingCats}\n                                                isMulti\n                                                name=\"colors\"\n                                                options={this.state.catOptions}\n                                                className=\"basic-multi-select\"\n                                                classNamePrefix=\"select\"\n                                                onChange={this.handleChangeCats}\n                                            />\n                                        : null}\n\n\n                                       \n                                    </div>\n                                </td>\n                            </tr>  \n\n                           \n\n                            <tr>\n                                <td>\n                                    Sub-categories \n                                </td>\n                                <td>\n                                    <div className=\"form_element\">\n                                        Selection here\n                                        {/* <select\n                                            value={this.state.formdata.subcategory_ref}\n                                            onChange={(event) => this.handleInput(event, 'subcategory_ref')}\n                                        >\n                                            <option value=\"\" disabled selected>Sub Category</option>\n                                            <option value=\"\" >* None</option>\n\n                                            { this.props.subcats && this.props.subcats.length ?\n                                                this.props.subcats.map ( (subcat, i) => (\n                                                    <option key={i} value={`\"${subcat.subcat_id}\"`}>{subcat.title}</option>\n                                                ))\n                                            : null }\n                                        </select> */}\n                                    </div>\n                                </td>\n                            </tr>\n\n                            <tr>\n                                \n                            </tr>\n                            \n                        </tbody>\n                        </table>\n\n                        <button type=\"submit\">Submit Edit</button>\n                        \n                        <div className=\"delete_post\">\n                            <div className=\"button\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) this.deletePost(e) } }>\n                                Delete item\n                            </div>\n                        </div>\n\n                    </form>\n                {/* : <p>Hi</p>} */}\n            </div>\n            \n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        items:state.items,\n        colls:state.collections.colls,\n        cats:state.cats.cats,\n        subcats:state.cats.subcats\n    }\n}\n\nexport default connect(mapStateToProps)(EditItem)\n\n\n"]},"metadata":{},"sourceType":"module"}