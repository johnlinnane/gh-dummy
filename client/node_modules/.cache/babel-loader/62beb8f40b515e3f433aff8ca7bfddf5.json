{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */\n\nfunction add(a, b) {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y\n  };\n}\n\nexports.add = add;\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */\n\nfunction subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n\nexports.subtract = subtract;\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */\n\nfunction getSourceClientOffset(state) {\n  var clientOffset = state.clientOffset,\n      initialClientOffset = state.initialClientOffset,\n      initialSourceClientOffset = state.initialSourceClientOffset;\n\n  if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n    return null;\n  }\n\n  return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\n}\n\nexports.getSourceClientOffset = getSourceClientOffset;\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */\n\nfunction getDifferenceFromInitialOffset(state) {\n  var clientOffset = state.clientOffset,\n      initialClientOffset = state.initialClientOffset;\n\n  if (!clientOffset || !initialClientOffset) {\n    return null;\n  }\n\n  return subtract(clientOffset, initialClientOffset);\n}\n\nexports.getDifferenceFromInitialOffset = getDifferenceFromInitialOffset;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/node_modules/react-dnd/node_modules/dnd-core/lib/utils/coords.js"],"names":["Object","defineProperty","exports","value","add","a","b","x","y","subtract","getSourceClientOffset","state","clientOffset","initialClientOffset","initialSourceClientOffset","getDifferenceFromInitialOffset"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;AAKA,SAASC,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACf,SAAO;AACHC,IAAAA,CAAC,EAAEF,CAAC,CAACE,CAAF,GAAMD,CAAC,CAACC,CADR;AAEHC,IAAAA,CAAC,EAAEH,CAAC,CAACG,CAAF,GAAMF,CAAC,CAACE;AAFR,GAAP;AAIH;;AACDN,OAAO,CAACE,GAAR,GAAcA,GAAd;AACA;;;;;;AAKA,SAASK,QAAT,CAAkBJ,CAAlB,EAAqBC,CAArB,EAAwB;AACpB,SAAO;AACHC,IAAAA,CAAC,EAAEF,CAAC,CAACE,CAAF,GAAMD,CAAC,CAACC,CADR;AAEHC,IAAAA,CAAC,EAAEH,CAAC,CAACG,CAAF,GAAMF,CAAC,CAACE;AAFR,GAAP;AAIH;;AACDN,OAAO,CAACO,QAAR,GAAmBA,QAAnB;AACA;;;;;;;;;AAQA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AAClC,MAAIC,YAAY,GAAGD,KAAK,CAACC,YAAzB;AAAA,MAAuCC,mBAAmB,GAAGF,KAAK,CAACE,mBAAnE;AAAA,MAAwFC,yBAAyB,GAAGH,KAAK,CAACG,yBAA1H;;AACA,MAAI,CAACF,YAAD,IAAiB,CAACC,mBAAlB,IAAyC,CAACC,yBAA9C,EAAyE;AACrE,WAAO,IAAP;AACH;;AACD,SAAOL,QAAQ,CAACL,GAAG,CAACQ,YAAD,EAAeE,yBAAf,CAAJ,EAA+CD,mBAA/C,CAAf;AACH;;AACDX,OAAO,CAACQ,qBAAR,GAAgCA,qBAAhC;AACA;;;;;;AAKA,SAASK,8BAAT,CAAwCJ,KAAxC,EAA+C;AAC3C,MAAIC,YAAY,GAAGD,KAAK,CAACC,YAAzB;AAAA,MAAuCC,mBAAmB,GAAGF,KAAK,CAACE,mBAAnE;;AACA,MAAI,CAACD,YAAD,IAAiB,CAACC,mBAAtB,EAA2C;AACvC,WAAO,IAAP;AACH;;AACD,SAAOJ,QAAQ,CAACG,YAAD,EAAeC,mBAAf,CAAf;AACH;;AACDX,OAAO,CAACa,8BAAR,GAAyCA,8BAAzC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */\nfunction add(a, b) {\n    return {\n        x: a.x + b.x,\n        y: a.y + b.y,\n    };\n}\nexports.add = add;\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */\nfunction subtract(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y,\n    };\n}\nexports.subtract = subtract;\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */\nfunction getSourceClientOffset(state) {\n    var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset, initialSourceClientOffset = state.initialSourceClientOffset;\n    if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n        return null;\n    }\n    return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\n}\nexports.getSourceClientOffset = getSourceClientOffset;\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */\nfunction getDifferenceFromInitialOffset(state) {\n    var clientOffset = state.clientOffset, initialClientOffset = state.initialClientOffset;\n    if (!clientOffset || !initialClientOffset) {\n        return null;\n    }\n    return subtract(clientOffset, initialClientOffset);\n}\nexports.getDifferenceFromInitialOffset = getDifferenceFromInitialOffset;\n"]},"metadata":{},"sourceType":"script"}