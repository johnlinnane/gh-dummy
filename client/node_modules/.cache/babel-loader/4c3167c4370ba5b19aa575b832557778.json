{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/components/Admin/add_item.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Progress } from 'reactstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { addItem, clearNewItem } from '../../actions';\nimport { getAllColls, getAllCats, getAllSubCats } from '../../actions';\nimport Tags from '../../widgetsUI/tags';\n\nclass AddItem extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formdata: {\n        title: '',\n        creator: '',\n        subject: '',\n        description: '',\n        source: '',\n        date_created: '',\n        contributor: '',\n        collection_id: '',\n        item_format: '',\n        materials: '',\n        physical_dimensions: '',\n        pages: '',\n        editor: '',\n        publisher: '',\n        further_info: '',\n        language: '',\n        reference: '',\n        rights: '',\n        file_format: '',\n        address: '',\n        category_ref: '',\n        subcategory_ref: '',\n        tags: {\n          id: '',\n          text: ''\n        },\n        external_link: {\n          url: '',\n          text: ''\n        },\n        geo: {\n          address: ''\n        }\n      },\n      selectedFile: null,\n      loaded: 0\n    };\n\n    this.handleInput = (event, name, level) => {\n      // make a copy of formdata\n      const newFormdata = { ...this.state.formdata\n      };\n\n      if (level === 'external_link') {\n        newFormdata.external_link[name] = event.target.value;\n      } else if (level === 'geo') {\n        newFormdata.geo[name] = event.target.value;\n      } else {\n        newFormdata[name] = event.target.value;\n      } // copy it back to state\n\n\n      this.setState({\n        formdata: newFormdata\n      });\n    };\n\n    this.showNewItem = item => item.post ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conf_link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Cool !! \", /*#__PURE__*/React.createElement(Link, {\n      to: `/items/${item.itemId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, \"Click the link to see the item\")) : null;\n\n    this.createTextInput = (stateVar, name, placeholder, label, level) => {\n      // let string = `this.state.formdata.${variable}`;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, label), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form_element\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: placeholder,\n        value: stateVar,\n        onChange: event => this.handleInput(event, name, level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }))));\n    };\n\n    this.onChangeHandler = event => {\n      // this.setState({\n      //     selectedFile: event.target.files\n      //     // loaded: 0\n      //   })\n      var files = event.target.files;\n\n      if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkMimeType(event)) {\n        this.setState({\n          selectedFile: files\n        });\n      }\n    };\n\n    this.onClickHandler = () => {\n      const data = new FormData(); // data.append('file', this.state.selectedFile);\n\n      for (var x = 0; x < this.state.selectedFile.length; x++) {\n        data.append('file', this.state.selectedFile[x]);\n      }\n\n      axios.post(`http://localhost:8000/upload`, data, {\n        // receive two parameter endpoint url ,form data \n        onUploadProgress: ProgressEvent => {\n          this.setState({\n            loaded: ProgressEvent.loaded / ProgressEvent.total * 100\n          });\n        }\n      }).then(res => {\n        // then print response status\n        console.log(res.statusText);\n        toast.success('upload success');\n      }).catch(err => {\n        toast.error('upload fail');\n      });\n    };\n\n    this.maxSelectFile = event => {\n      let files = event.target.files; // create file object\n\n      if (files.length > 6) {\n        const msg = 'Only 6 images can be uploaded at a time';\n        event.target.value = null; // discard selected file\n\n        console.log(msg);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkMimeType = event => {\n      //getting file object\n      let files = event.target.files; //define message container\n\n      let err = ''; // list allow mime type\n\n      const types = ['image/png', 'image/jpeg', 'image/gif']; // loop access array\n\n      for (var x = 0; x < files.length; x++) {\n        // compare file type find doesn't matach\n        if (types.every(type => files[x].type !== type)) {\n          // create error message and assign to container   \n          err += files[x].type + ' is not a supported format\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        // loop create toast massage\n        event.target.value = null;\n        toast.error(err[z]);\n      }\n\n      return true;\n    };\n\n    this.checkFileSize = event => {\n      let files = event.target.files;\n      let size = 15000;\n      let err = \"\";\n\n      for (var x = 0; x < files.length; x++) {\n        if (files[x].size > size) {\n          err += files[x].type + 'is too large, please pick a smaller file\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        toast.error(err[z]);\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.submitForm = e => {\n      e.preventDefault(); // console.log(this.state.formdata);\n      // dispatch an action, adding updated  formdata + the user id from the redux store\n\n      this.props.dispatch(addItem({ ...this.state.formdata,\n        ownerId: this.props.user.login.id\n      }));\n      this.props.history.push('/user/user-items');\n    };\n\n    this.setSelector = test => {\n      var el = document.getElementById(\"collSelect\");\n\n      if (test && el) {\n        console.log('selected');\n        el.selected = false;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getAllColls());\n    this.props.dispatch(getAllCats());\n    this.props.dispatch(getAllSubCats());\n  } // clear success message \n\n\n  componentWillUnmount() {\n    this.props.dispatch(clearNewItem());\n  }\n\n  render() {\n    console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rl_container article edit_page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 21\n      }\n    }, \"Add an item\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 21\n      }\n    }, this.createTextInput(this.state.formdata.title, 'title', \"Enter title\", \"Title\"), this.createTextInput(this.state.formdata.creator, 'creator', \"Item creator\", \"Creator\"), this.createTextInput(this.state.formdata.subject, 'subject', \"Item subject\"), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 29\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      placeholder: \"Describe the item here...\",\n      value: this.state.formdata.description,\n      onChange: event => this.handleInput(event, 'description'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 33\n      }\n    }))), this.createTextInput(this.state.formdata.source, 'source', \"Item source\"), this.createTextInput(this.state.formdata.date_created, 'date_created', \"Date created\"), this.createTextInput(this.state.formdata.tags, 'tags', \"Item tags\"), this.createTextInput(this.state.formdata.contributor, 'contributor', \"Item contributor\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.formdata.collection_id,\n      onChange: event => this.handleInput(event, 'collection_id'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 33\n      }\n    }, \"Collection\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 33\n      }\n    }, \"* None\"), this.props.colls && this.props.colls.length ? this.props.colls.map((coll, i) => /*#__PURE__*/React.createElement(\"option\", {\n      value: `\"${coll.id}\"`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 41\n      }\n    }, coll.title)) : null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.formdata.category_ref,\n      onChange: event => this.handleInput(event, 'category_ref'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 33\n      }\n    }, \"Category\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 33\n      }\n    }, \"* None\"), this.props.cats && this.props.cats.length ? this.props.cats.map((cat, i) => /*#__PURE__*/React.createElement(\"option\", {\n      value: `\"${cat.cat_id}\"`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 41\n      }\n    }, cat.title)) : null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.formdata.subcategory_ref,\n      onChange: event => this.handleInput(event, 'subcategory_ref'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 33\n      }\n    }, \"Sub Category\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 33\n      }\n    }, \"* None\"), this.props.subcats && this.props.subcats.length ? this.props.subcats.map((subcat, i) => /*#__PURE__*/React.createElement(\"option\", {\n      value: `\"${subcat.subcat_id}\"`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 41\n      }\n    }, subcat.title)) : null)), this.createTextInput(this.state.formdata.item_format, 'item_format', \"Item item_format\"), this.createTextInput(this.state.formdata.materials, 'materials', \"Item materials\"), this.createTextInput(this.state.formdata.physical_dimensions, 'physical_dimensions', \"Physical dimensions\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      placeholder: \"Number of pages\",\n      value: this.state.formdata.pages,\n      onChange: event => this.handleInput(event, 'pages'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 29\n      }\n    })), this.createTextInput(this.state.formdata.editor, 'editor', \"Item editor\"), this.createTextInput(this.state.formdata.publisher, 'publisher', \"Item publisher\"), this.createTextInput(this.state.formdata.further_info, 'further_info', \"Further info\"), this.createTextInput(this.state.formdata.external_link.url, 'url', \"External link url\", 'external_link'), this.createTextInput(this.state.formdata.external_link.text, 'text', \"External link text\", 'external_link'), this.createTextInput(this.state.formdata.language, 'language', \"Item language\"), this.createTextInput(this.state.formdata.reference, 'reference', \"Item reference\"), this.createTextInput(this.state.formdata.rights, 'rights', \"Item rights\"), this.createTextInput(this.state.formdata.file_format, 'file_format', \"File format\"), this.createTextInput(this.state.formdata.geo.address, 'address', \"Item address\", 'geo'), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      multiple: true,\n      name: \"file\",\n      onChange: this.onChangeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Progress, {\n      max: \"100\",\n      color: \"success\",\n      value: this.state.loaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 25\n      }\n    }, this.state.loaded ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 33\n      }\n    }, Math.round(this.state.loaded, 2), \"%\") : null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ToastContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success btn-block\",\n      onClick: this.onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 21\n      }\n    }, \"Upload\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 21\n      }\n    }, \"Submit Item\"), // if new book exists\n    this.props.items.newitem ? this.showNewItem(this.props.items.newitem) : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  // console.log(state); \n  return {\n    items: state.items,\n    colls: state.collections.colls,\n    cats: state.cats.cats,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(AddItem);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/components/Admin/add_item.js"],"names":["React","Component","connect","Link","axios","Progress","ToastContainer","toast","addItem","clearNewItem","getAllColls","getAllCats","getAllSubCats","Tags","AddItem","state","formdata","title","creator","subject","description","source","date_created","contributor","collection_id","item_format","materials","physical_dimensions","pages","editor","publisher","further_info","language","reference","rights","file_format","address","category_ref","subcategory_ref","tags","id","text","external_link","url","geo","selectedFile","loaded","handleInput","event","name","level","newFormdata","target","value","setState","showNewItem","item","post","itemId","createTextInput","stateVar","placeholder","label","onChangeHandler","files","maxSelectFile","checkMimeType","onClickHandler","data","FormData","x","length","append","onUploadProgress","ProgressEvent","total","then","res","console","log","statusText","success","catch","err","error","msg","types","every","type","z","checkFileSize","size","submitForm","e","preventDefault","props","dispatch","ownerId","user","login","history","push","setSelector","test","el","document","getElementById","selected","componentDidMount","componentWillUnmount","render","colls","map","coll","i","cats","cat","cat_id","subcats","subcat","subcat_id","Math","round","items","newitem","mapStateToProps","collections"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport {Progress} from 'reactstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nimport { addItem, clearNewItem} from '../../actions';\nimport {getAllColls, getAllCats, getAllSubCats  } from '../../actions';\nimport Tags from '../../widgetsUI/tags';\n\n\n\n\n\nclass AddItem extends Component {\n\n\n    state = {\n        formdata:{\n            title: '',\n            creator: '',\n            subject: '',\n            description: '',\n            source: '',\n            date_created: '',\n            contributor: '',\n            collection_id: '',     \n            item_format: '',\n            materials: '',\n            physical_dimensions: '',\n            pages: '',        \n            editor: '',\n            publisher: '',\n            further_info: '',\n            language: '',\n            reference: '',\n            rights: '',\n            file_format: '',\n            address: '',\n            category_ref: '',\n            subcategory_ref: '',\n            tags: {\n                id: '',\n                text: ''\n            },\n            external_link: {\n                url: '',\n                text: ''\n            },\n            geo: {\n                address: ''\n            }\n\n        },        \n        selectedFile: null,\n        loaded: 0\n    }\n\n\n    componentDidMount() {\n        this.props.dispatch(getAllColls())\n        this.props.dispatch(getAllCats());\n        this.props.dispatch(getAllSubCats());\n    }\n\n\n    // clear success message \n    componentWillUnmount() {\n        this.props.dispatch(clearNewItem())\n    }\n\n    handleInput = (event, name, level) => {\n        // make a copy of formdata\n        const newFormdata = {\n            ...this.state.formdata\n        }\n\n        if (level === 'external_link') {\n            newFormdata.external_link[name] = event.target.value;\n        } else if (level === 'geo') {\n            newFormdata.geo[name] = event.target.value;\n        } else {\n            newFormdata[name] = event.target.value;\n        }\n\n        // copy it back to state\n        this.setState({\n            formdata:newFormdata\n        })\n    }\n\n\n\n    showNewItem = (item) => (\n        item.post ?\n            <div className=\"conf_link\">\n                Cool !! <Link to={`/items/${item.itemId}`}>\n                    Click the link to see the item\n                </Link>\n            </div>\n        : null\n    )\n\n\n\n    createTextInput = (stateVar, name, placeholder, label, level) => {\n        // let string = `this.state.formdata.${variable}`;\n\n        return (\n            <tr>\n                <td>\n                    {label}\n                </td>\n                <td>\n                    <div className=\"form_element\">\n                        <input\n                            type=\"text\"\n                            placeholder={placeholder}\n                            value={stateVar} \n                            onChange={(event) => this.handleInput(event, name, level)}\n                        />\n                    </div>\n                </td>\n            </tr>\n        )\n    }\n\n\n\n    // createSelectInput = (db, value, name, placeholder) => {\n    //     return (\n    //         <div className=\"form_element\">\n    //             <select\n    //                 value={value}\n    //                 onChange={(event) => this.handleInput(event, name)}\n    //             >\n    //                 <option value=\"\" disabled selected>{placeholder}</option>\n    //                 <option value={null} >N/A</option>\n\n    //                 {db.map( (option, i) => (\n    //                     <option key={i} value={option.id}>{option.title}</option>\n    //                 ) )}\n    //             </select>\n    //         </div>\n    //     )\n    // }\n\n    // createSelectInput(cateogries, this.state.formdata.subcateogry, 'subcategory', \"Sub-cateogry\")\n\n    // ************** FILE UPLOAD STUFF *******************\n\n    onChangeHandler = (event) => {\n\n        // this.setState({\n        //     selectedFile: event.target.files\n        //     // loaded: 0\n        //   })\n\n        var files = event.target.files;\n\n        if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkMimeType(event)) {  \n            this.setState({\n                selectedFile: files\n            })\n        }\n    }\n\n\n\n    onClickHandler = () => {\n        const data = new FormData() \n        \n        // data.append('file', this.state.selectedFile);\n        for(var x = 0; x<this.state.selectedFile.length; x++) {\n            data.append('file', this.state.selectedFile[x])\n        }\n        \n        axios.post(`http://localhost:8000/upload`, data, { \n                // receive two parameter endpoint url ,form data \n                onUploadProgress: ProgressEvent => {\n                    this.setState({\n                        loaded: (ProgressEvent.loaded / ProgressEvent.total*100)\n                    })\n                }\n            })\n            .then(res => { // then print response status\n                console.log(res.statusText)\n                toast.success('upload success')\n            })\n            .catch(err => { \n                toast.error('upload fail')\n            })\n\n\n    }\n\n    maxSelectFile=(event)=>{\n        let files = event.target.files // create file object\n            if (files.length > 6) { \n               const msg = 'Only 6 images can be uploaded at a time'\n               event.target.value = null // discard selected file\n               console.log(msg)\n              return false;\n     \n          }\n        return true;\n     \n    }\n\n    checkMimeType=(event)=>{\n        //getting file object\n        let files = event.target.files \n        //define message container\n        let err = ''\n        // list allow mime type\n        const types = ['image/png', 'image/jpeg', 'image/gif']\n        // loop access array\n        for(var x = 0; x<files.length; x++) {\n         // compare file type find doesn't matach\n            if (types.every(type => files[x].type !== type)) {\n                // create error message and assign to container   \n                err += files[x].type+' is not a supported format\\n';\n            }\n        };\n\n        for(var z = 0; z<err.length; z++) { // loop create toast massage\n            event.target.value = null \n            toast.error(err[z])\n        }\n        return true;\n    }\n\n    checkFileSize=(event)=>{\n        let files = event.target.files\n        let size = 15000 \n        let err = \"\"; \n\n        for(var x = 0; x<files.length; x++) {\n            if (files[x].size > size) {\n                err += files[x].type+'is too large, please pick a smaller file\\n';\n            }\n        };\n\n        for(var z = 0; z<err.length; z++) {\n            toast.error(err[z])\n            event.target.value = null\n        }\n        return true;\n   \n    }    \n\n    // ****************************************************\n\n\n\n    submitForm = (e) => {\n        e.preventDefault();\n        \n        // console.log(this.state.formdata);\n\n        // dispatch an action, adding updated  formdata + the user id from the redux store\n        this.props.dispatch(addItem({\n                ...this.state.formdata,\n                ownerId:this.props.user.login.id\n        }));\n        this.props.history.push('/user/user-items');\n\n    }\n\n\n    setSelector = (test) => {\n        var el = document.getElementById(\"collSelect\");\n\n        if (test && el) {\n            console.log('selected')\n            el.selected = false;\n        }\n    }\n\n\n\n\n\n    render() {\n        console.log(this.props);\n\n        return (\n            <div className=\"rl_container article edit_page\">\n                <form onSubmit={this.submitForm}>\n                    \n                    {/* <h2>Add a review</h2> */}\n                    <h2>Add an item</h2>\n\n\n                    <table>\n\n                        {this.createTextInput(this.state.formdata.title,'title', \"Enter title\", \"Title\")}\n                        {this.createTextInput(this.state.formdata.creator,'creator', \"Item creator\", \"Creator\")}\n                        {this.createTextInput(this.state.formdata.subject,'subject', \"Item subject\")}\n\n                        <tr>\n                            <td className=\"label\">\n                                Description\n                            </td>\n                            <td>\n                                <textarea\n                                    placeholder=\"Describe the item here...\"\n                                    value={this.state.formdata.description}\n                                    onChange={(event) => this.handleInput(event, 'description')}\n                                />\n                            </td>\n                        </tr>\n\n\n                        {this.createTextInput(this.state.formdata.source,'source', \"Item source\")}\n                        {this.createTextInput(this.state.formdata.date_created,'date_created', \"Date created\")}\n                        {this.createTextInput(this.state.formdata.tags,'tags', \"Item tags\")}\n                        {this.createTextInput(this.state.formdata.contributor,'contributor', \"Item contributor\")}\n\n\n                        <div className=\"form_element\">\n                            <select \n                                value={this.state.formdata.collection_id}\n                                onChange={(event) => this.handleInput(event, 'collection_id')}\n                            >\n\n                                <option value=\"\" disabled selected>Collection</option>\n                                <option value={null} >* None</option>\n                                \n\n\n                                { this.props.colls && this.props.colls.length ?\n                                    this.props.colls.map ( (coll, i) => (\n                                        <option value={`\"${coll.id}\"`}>{coll.title}</option>\n                                    ))\n                                : null }\n\n                            \n                            </select>\n                        </div>\n\n                        \n                        <div className=\"form_element\">\n                            <select\n                                value={this.state.formdata.category_ref}\n                                onChange={(event) => this.handleInput(event, 'category_ref')}\n                            >   \n                                <option value=\"\" disabled selected>Category</option>\n\n                                <option value={null} >* None</option>\n\n                                { this.props.cats && this.props.cats.length ?\n                                    this.props.cats.map ( (cat, i) => (\n                                        <option value={`\"${cat.cat_id}\"`}>{cat.title}</option>\n                                    ))\n                                : null }\n\n\n\n                            </select>\n                        </div>                    \n                        \n                        <div className=\"form_element\">\n                            <select\n                                value={this.state.formdata.subcategory_ref}\n                                onChange={(event) => this.handleInput(event, 'subcategory_ref')}\n                            >\n                                <option value=\"\" disabled selected>Sub Category</option>\n                                <option value={null} >* None</option>\n\n                                { this.props.subcats && this.props.subcats.length ?\n                                    this.props.subcats.map ( (subcat, i) => (\n                                        <option value={`\"${subcat.subcat_id}\"`}>{subcat.title}</option>\n                                    ))\n                                : null }\n\n                            </select>\n                        </div>\n\n\n                        {this.createTextInput(this.state.formdata.item_format,'item_format', \"Item item_format\")}\n                        {this.createTextInput(this.state.formdata.materials,'materials', \"Item materials\")}\n                        {this.createTextInput(this.state.formdata.physical_dimensions,'physical_dimensions', \"Physical dimensions\")}\n\n\n                        <div className=\"form_element\">\n                            <input\n                                type=\"number\"\n                                placeholder=\"Number of pages\"\n                                value={this.state.formdata.pages} \n                                onChange={(event) => this.handleInput(event, 'pages')}                        />\n                        </div>\n\n                        {this.createTextInput(this.state.formdata.editor,'editor', \"Item editor\")}\n                        {this.createTextInput(this.state.formdata.publisher,'publisher', \"Item publisher\")}\n                        {this.createTextInput(this.state.formdata.further_info,'further_info', \"Further info\")}\n\n                        {this.createTextInput(this.state.formdata.external_link.url,'url', \"External link url\", 'external_link')}\n                        {this.createTextInput(this.state.formdata.external_link.text,'text', \"External link text\", 'external_link')}\n\n                        {this.createTextInput(this.state.formdata.language,'language', \"Item language\")}\n                        {this.createTextInput(this.state.formdata.reference,'reference', \"Item reference\")}\n                        {this.createTextInput(this.state.formdata.rights,'rights', \"Item rights\")}\n                        {this.createTextInput(this.state.formdata.file_format,'file_format', \"File format\")}\n\n                        {this.createTextInput(this.state.formdata.geo.address,'address', \"Item address\", 'geo')}\n\n                        <div className=\"form_element\">\n                            <input type=\"file\" className=\"form-control\" multiple name=\"file\" onChange={this.onChangeHandler}/>\n                        </div>\n                    </table>\n\n                    <div className=\"form-group\">\n                        <Progress max=\"100\" color=\"success\" value={this.state.loaded} >\n                            { this.state.loaded ?\n                                <div>    \n                                    {Math.round(this.state.loaded,2)}\n                                    %\n                                </div>\n                            :null}\n                        </Progress>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <ToastContainer />\n                    </div>\n\n\n                    <button type=\"button\" className=\"btn btn-success btn-block\" onClick={this.onClickHandler}>Upload</button> \n\n\n\n                  \n\n\n\n\n                    <button type=\"submit\">Submit Item</button>\n\n                    {\n                        // if new book exists\n                        this.props.items.newitem ?\n                            this.showNewItem(this.props.items.newitem)\n                        : null\n\n\n                    }\n\n\n                </form>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    // console.log(state); \n    return {\n        items:state.items,\n        colls:state.collections.colls,\n        cats:state.cats.cats,\n        subcats:state.cats.subcats\n    }\n}\n\nexport default connect(mapStateToProps)(AddItem)\n\n\n"]},"metadata":{},"sourceType":"module"}