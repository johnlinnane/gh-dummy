{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/containers/Admin/edit_item_3_file.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify'; // import Select from 'react-select';\n// import CreatableSelect from 'react-select/creatable';\n\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions'; // import { getAllColls, getAllCats, getAllSubCats  } from '../../actions';\n// import Tags from '../../widgetsUI/tags';\n\nclass EditItemFile extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formdata: {\n        _id: this.props.match.params.id,\n        title: '',\n        creator: '',\n        subject: '',\n        description: '',\n        source: '',\n        date_created: '',\n        contributor: '',\n        // collection_id: '',     \n        item_format: '',\n        materials: '',\n        physical_dimensions: '',\n        pages: '',\n        editor: '',\n        publisher: '',\n        further_info: '',\n        language: '',\n        reference: '',\n        rights: '',\n        file_format: '',\n        address: '',\n        // category_ref: '',\n        subcategory_ref: '',\n        // tags: [\n        //     {\n        //         id: '',\n        //         text: ''\n        //     }\n        // ],\n        external_link: {\n          url: '',\n          text: ''\n        },\n        geo: {\n          address: ''\n        }\n      },\n      selectedFile: null,\n      loaded: 0 // // categories\n      // catOptions: [],\n      // existingCats: [],\n      // updatedCats: [],\n      // catsAreUpdated: false,\n      // // tags\n      // existingTags: [],\n      // updatedTags: [],\n      // tagsAreUpdated: false,\n      // // collection\n      // collOptions: [{ value: null, label: 'None' } ],\n      // existingColl: null,\n      // updatedColl: null,\n      // collIsUpdated: false,\n      // isClearable: true,\n      // isDisabled: false,\n      // isLoading: false,\n      // isRtl: false,\n      // isSearchable: true\n\n    };\n\n    this.deletePost = () => {\n      this.props.dispatch(deleteItem(this.state.formdata._id));\n      this.props.history.push('/user/all-items');\n    };\n\n    this.redirectUser = () => {\n      setTimeout(() => {\n        this.props.history.push('/user/all-items');\n      }, 1000);\n    };\n\n    this.onChangeHandler = event => {\n      var files = event.target.files;\n\n      if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkMimeType(event)) {\n        this.setState({\n          selectedFile: files\n        });\n      }\n    };\n\n    this.onClickHandler = () => {\n      const data = new FormData();\n\n      for (var x = 0; x < this.state.selectedFile.length; x++) {\n        data.append('file', this.state.selectedFile[x]);\n      }\n\n      axios.post(`http://localhost:8000/upload`, data, {\n        // receive two parameter endpoint url ,form data \n        onUploadProgress: ProgressEvent => {\n          this.setState({\n            loaded: ProgressEvent.loaded / ProgressEvent.total * 100\n          });\n        }\n      }).then(res => {\n        // then print response status\n        console.log(res.statusText);\n        toast.success('upload success');\n      }).catch(err => {\n        toast.error('upload fail');\n      });\n    };\n\n    this.maxSelectFile = event => {\n      let files = event.target.files; // create file object\n\n      if (files.length > 6) {\n        const msg = 'Only 6 images can be uploaded at a time';\n        event.target.value = null; // discard selected file\n\n        console.log(msg);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkMimeType = event => {\n      //getting file object\n      let files = event.target.files; //define message container\n\n      let err = ''; // list allow mime type\n\n      const types = ['image/png', 'image/jpeg', 'image/gif']; // loop access array\n\n      for (var x = 0; x < files.length; x++) {\n        // compare file type find doesn't matach\n        if (types.every(type => files[x].type !== type)) {\n          // create error message and assign to container   \n          err += files[x].type + ' is not a supported format\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        // loop create toast massage\n        event.target.value = null;\n        toast.error(err[z]);\n      }\n\n      return true;\n    };\n\n    this.checkFileSize = event => {\n      let files = event.target.files;\n      let size = 15000;\n      let err = \"\";\n\n      for (var x = 0; x < files.length; x++) {\n        if (files[x].size > size) {\n          err += files[x].type + 'is too large, please pick a smaller file\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        toast.error(err[z]);\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.addDefaultImg = ev => {\n      const newImg = '/images/default/default.jpg';\n\n      if (ev.target.src !== newImg) {\n        ev.target.src = newImg;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getItemById(this.props.match.params.id)); // this.props.dispatch(getAllColls())\n    // this.props.dispatch(getAllCats());\n    // this.props.dispatch(getAllSubCats());\n  } // componentWillUnmount() {\n  //     this.props.dispatch(clearItem())\n  // }\n  // handleInput = (event, name, level) => {\n  //     // make a copy of formdata\n  //     const newFormdata = {\n  //         ...this.state.formdata\n  //     }\n  //     if (level === 'external_link') {\n  //         newFormdata.external_link[name] = event.target.value;\n  //     } else if (level === 'geo') {\n  //         newFormdata.geo[name] = event.target.value;\n  //     } else if (level === 'tags') {\n  //         newFormdata.tags[name] = event.target.value;\n  //     } else {\n  //         newFormdata[name] = event.target.value;\n  //     }\n  //     // copy it back to state\n  //     this.setState({\n  //         formdata:newFormdata\n  //     })\n  // }\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    //     // console.log(nextProps);\n    //     let formReturn;\n    //     let catReturn;\n    //     let tagReturn;\n    //     let collReturn;\n    // *********** GENERAL FORM STUFF *****************************\n    let formdata = prevState.formdata;\n\n    if (nextProps.items.item) {\n      let item = nextProps.items.item; // console.log(formdata);\n\n      formdata = { ...formdata,\n        _id: item._id,\n        title: item.title,\n        //\n        creator: item.creator,\n        //\n        description: item.description,\n        //\n        pages: item.pages,\n        //\n        // collection_id:item.collection_id,  //\n        source: item.source,\n        //\n        subject: item.subject,\n        date_created: item.date_created,\n        // tags: item.tags,\n        contributor: item.contributor,\n        item_format: item.item_format,\n        materials: item.materials,\n        physical_dimensions: item.physical_dimensions,\n        editor: item.editor,\n        publisher: item.publisher,\n        further_info: item.further_info,\n        language: item.language,\n        reference: item.reference,\n        rights: item.rights,\n        file_format: item.file_format,\n        // category_ref: item.category_ref,\n        subcategory_ref: item.subcategory_ref\n      };\n    }\n\n    return {\n      formdata: formdata\n    };\n  } //         // console.log(formdata);\n  //         if (item.external_link && item.external_link.length && item.external_link.url) {\n  //             formdata = {\n  //                 ...formdata,\n  //                 external_link : {\n  //                     url: item.external_link[0].url,\n  //                     text: item.external_link[0].text\n  //                 }\n  //             }\n  //         }\n  //         // console.log(formdata);\n  //         if (item.geo && item.geo.length && item.geo.address) {\n  //             formdata = {\n  //                 ...formdata,\n  //                 geo: {\n  //                     address: item.geo.address\n  //                 }\n  //             }\n  //         }\n  //         // console.log(formdata);\n  //         formReturn = formdata;\n  //         // console.log(formReturn);\n  //     }\n  //     // *********** CATEGORY SELECT *****************************\n  //     let catOptionsFromProps = prevState.catOptions;\n  //     let catsFromProps = prevState.existingCats;\n  //     let catsDone = false;\n  //     // let catOptionsFromProps = [];\n  //     // let catsFromProps = [];\n  //     console.log(prevState.catsAreUpdated);\n  //     if (nextProps.cats && nextProps.cats.length && !prevState.catsAreUpdated) {\n  //         nextProps.cats.map( (cat, i) => {\n  //             catOptionsFromProps.push({\n  //                 value: cat.cat_id,\n  //                 label: cat.title\n  //             })\n  //         })\n  //         if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n  //             // console.log(nextProps.items.item.category_ref);\n  //             nextProps.items.item.category_ref.map( (catref, i) => {\n  //                 let catTitle;\n  //                 nextProps.cats.map( (cat, i) => {\n  //                     if (cat.cat_id == catref) {\n  //                         catTitle = cat.title;\n  //                         let element = {\n  //                             value: catref,\n  //                             label: catTitle\n  //                         };\n  //                         if (!catsFromProps.includes(element)) {\n  //                             // console.log('push!');\n  //                             catsFromProps.push(element)\n  //                         }\n  //                     }\n  //                 })\n  //             })\n  //             catsDone = true;\n  //         }\n  //     }\n  //     // console.log(catsFromProps);\n  //     catReturn = {\n  //         catOptions: catOptionsFromProps,\n  //         existingCats: catsFromProps,\n  //         catsAreUpdated: catsDone\n  //     }\n  //     // console.log(catReturn);\n  //     // *********** TAGS SELECT *****************************\n  //     let tagsFromProps = [];\n  //     if (nextProps.items.item && nextProps.items.item.tags) {\n  //         nextProps.items.item.tags.map( tag => {\n  //             tagsFromProps.push({\n  //                 value: tag.value,\n  //                 label: tag.label\n  //             })\n  //         })\n  //     }\n  //     tagReturn = {\n  //         existingTags: tagsFromProps,\n  //         tagsAreUpdated: true\n  //     }\n  //     // *********** COLLECTION SELECT *****************************\n  //     let collOptionsFromProps = [];\n  //     let collFromProps = null;\n  //     if (nextProps.colls && nextProps.colls.length) {\n  //         nextProps.colls.map( coll => {\n  //             collOptionsFromProps.push({\n  //                 value: coll.id,\n  //                 label: coll.title\n  //             })\n  //         })\n  //         if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n  //             nextProps.colls.map ( coll => {\n  //                 let collTitle = null;\n  //                 if (coll.id == nextProps.items.item.collection_id) {\n  //                     collTitle = coll.title;\n  //                     collFromProps = {\n  //                         value: nextProps.items.item.collection_id,\n  //                         label: collTitle\n  //                     }\n  //                 }\n  //             })\n  //         }\n  //         // console.log(collOptionsFromProps);\n  //         collReturn =  {\n  //             collOptions: collOptionsFromProps,\n  //             existingColl: collFromProps,\n  //             collIsUpdated: true\n  //         }\n  //         // console.log(collReturn);\n  //     }\n  //     // *********** RETURN *****************************\n  //     let allColls, prevColls, updateColls = [];\n  //     if (collReturn) {\n  //         allColls = [prevState.collOptions, ...collReturn.collOptions];\n  //         prevColls = collReturn.existingColl;\n  //         updateColls = collReturn.collIsUpdated;\n  //     }\n  //     return {\n  //         formdata: {...formReturn},\n  //         catOptions: catReturn.catOptions,\n  //         existingCats: catReturn.existingCats,\n  //         catsAreUpdated: catReturn.catsAreUpdated,\n  //         existingTags: tagReturn.existingTags,\n  //         tagsAreUpdated: tagReturn.tagsAreUpdated,\n  //         collOptions: allColls,\n  //         existingColl: prevColls,\n  //         collIsUpdated: updateColls,\n  //         updated: true,\n  //     }\n  // }\n  // CAT HANDLERS\n  // handleChangeCats = (newValue) => {\n  //     if (newValue && newValue.length) {\n  //         this.setState({ \n  //             updatedCats: [...newValue]\n  //         });\n  //     } else {\n  //         this.setState({ \n  //             updatedCats: []\n  //         });\n  //     }\n  // };\n  // onClickHandlerCats = () => {\n  //     let updateData = {\n  //         _id: this.props.match.params.id,\n  //         category_ref: []\n  //     };\n  //     if (this.state.updatedCats && this.state.updatedCats.length) {\n  //         this.state.updatedCats.map( cat => {\n  //             updateData.category_ref.push(cat.value);\n  //         })\n  //     } \n  //     this.props.dispatch(updateItem({\n  //         ...updateData\n  //     }))\n  // }\n  // TAG HANDLERS\n  // handleChangeTags = (newValue) => {\n  //     if (newValue && newValue.length) {\n  //         console.log(newValue)\n  //         this.setState({ \n  //             updatedTags: [...newValue]\n  //         });\n  //     } else {\n  //         this.setState({ \n  //             updatedTags: []\n  //         });\n  //     }\n  // };\n  // onClickHandlerTags = () => {\n  //     let updateData = {\n  //         _id: this.props.match.params.id,\n  //         tags: []\n  //     };\n  //     if (this.state.updatedTags && this.state.updatedTags.length) {\n  //         this.state.updatedTags.map( tag => {\n  //             updateData.tags.push(tag);\n  //         })\n  //     } \n  //     this.props.dispatch(updateItem({\n  //         ...updateData\n  //     }))\n  // }\n  // COLL HANDLERS\n  // handleChangeColl = (newValue) => {\n  //     console.log(newValue);\n  //     if (newValue) {\n  //         this.setState({ \n  //             updatedColl: newValue\n  //         });\n  //     } \n  // };\n  // onClickHandlerColl = () => {\n  //     let updateData = {\n  //         _id: this.props.match.params.id,\n  //         collection_id: null\n  //     };\n  //     if (this.state.updatedColl ) {\n  //         updateData.collection_id = this.state.updatedColl.value;\n  //     } \n  //     this.props.dispatch(updateItem({\n  //         ...updateData\n  //     }))\n  // }\n  // submitForm = (e) => {\n  //     e.preventDefault();\n  //     // console.log(this.state.formdata);\n  //     let updateData = { ...this.state.formdata }\n  //     if (this.state.updatedCats && this.state.updatedCats.length) {\n  //         this.state.updatedCats.map( cat => {\n  //             updateData.category_ref.push(cat.value);\n  //         })\n  //     } \n  //     if (this.state.updatedTags && this.state.updatedTags.length) {\n  //         this.state.updatedTags.map( tag => {\n  //             updateData.tags.push(tag);\n  //         })\n  //     } \n  //     if (this.state.updatedColl ) {\n  //         updateData.collection_id = this.state.updatedColl.value;\n  //     } \n  //     // this.onClickHandlerCats();\n  //     // this.onClickHandlerTags();\n  //     // this.onClickHandlerColl();\n  //     // console.log(this.state);\n  //     this.props.dispatch(updateItem({\n  //             ...updateData\n  //             // ...this.state.formdata\n  //         }\n  //     ))\n  // }\n  // createTextInput = (stateVar, name, placeholder, label, level) => {\n  //     // let string = `this.state.formdata.${variable}`;\n  //     return (\n  //         <tr>\n  //             <td>\n  //                 {label}\n  //             </td>\n  //             <td>\n  //                 <div className=\"form_element\">\n  //                     <input\n  //                         type=\"text\"\n  //                         placeholder={placeholder}\n  //                         value={stateVar} \n  //                         onChange={(event) => this.handleInput(event, name, level)}\n  //                     />\n  //                 </div>\n  //             </td>\n  //         </tr>\n  //     )\n  // }\n  // ************** FILE UPLOAD STUFF *******************\n\n\n  render() {\n    let items = this.props.items; // const {\n    //     isClearable,\n    //     isSearchable,\n    //     isDisabled,\n    //     isLoading,\n    //     isRtl,\n    // } = this.state;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rl_container article edit_page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 13\n      }\n    }, items.updateItem ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit_confirm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 29\n      }\n    }, \"Post updated, \", /*#__PURE__*/React.createElement(Link, {\n      to: `/items/${items.item._id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 47\n      }\n    }, \"Click here to see your post\")) : null, items.itemDeleted ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"red_tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 29\n      }\n    }, \"Item Deleted\", this.redirectUser()) : null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 25\n      }\n    }, \"Upload new file for:\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 25\n      }\n    }, \"this.state.formdata.title\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: `/images/items/${this.state.formdata._id}/sq_thumbnail/0.jpg`,\n      alt: \"Item\",\n      onError: this.addDefaultImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      multiple: true,\n      name: \"file\",\n      onChange: this.onChangeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success btn-block\",\n      onClick: this.onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878,\n        columnNumber: 41\n      }\n    }, \"Upload Files\")));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    items: state.items // colls:state.collections.colls,\n    // cats:state.cats.cats,\n    // subcats:state.cats.subcats\n\n  };\n}\n\nexport default connect(mapStateToProps)(EditItemFile);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/containers/Admin/edit_item_3_file.js"],"names":["React","PureComponent","connect","Link","axios","ToastContainer","toast","getItemById","updateItem","clearItem","deleteItem","EditItemFile","state","formdata","_id","props","match","params","id","title","creator","subject","description","source","date_created","contributor","item_format","materials","physical_dimensions","pages","editor","publisher","further_info","language","reference","rights","file_format","address","subcategory_ref","external_link","url","text","geo","selectedFile","loaded","deletePost","dispatch","history","push","redirectUser","setTimeout","onChangeHandler","event","files","target","maxSelectFile","checkMimeType","setState","onClickHandler","data","FormData","x","length","append","post","onUploadProgress","ProgressEvent","total","then","res","console","log","statusText","success","catch","err","error","msg","value","types","every","type","z","checkFileSize","size","addDefaultImg","ev","newImg","src","componentDidMount","getDerivedStateFromProps","nextProps","prevState","items","item","render","itemDeleted","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\n// import Select from 'react-select';\n// import CreatableSelect from 'react-select/creatable';\n\n\n\n\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions';\n// import { getAllColls, getAllCats, getAllSubCats  } from '../../actions';\n// import Tags from '../../widgetsUI/tags';\n\n\n\nclass EditItemFile extends PureComponent {\n\n\n    state = {\n        formdata:{\n            _id:this.props.match.params.id,\n            title: '',\n            creator: '',\n            subject: '',\n            description: '',\n            source: '',\n            date_created: '',\n            \n            contributor: '',\n            // collection_id: '',     \n            item_format: '',\n            materials: '',\n            physical_dimensions: '',\n            pages: '',        \n            editor: '',\n            publisher: '',\n            further_info: '',\n            language: '',\n            reference: '',\n            rights: '',\n            file_format: '',\n            address: '',\n            // category_ref: '',\n            subcategory_ref: '',\n            // tags: [\n            //     {\n            //         id: '',\n            //         text: ''\n            //     }\n            // ],\n            external_link: {\n                url: '',\n                text: ''\n            },\n            geo: {\n                address: ''\n            }\n        },\n        selectedFile: null,\n        loaded: 0,\n        // // categories\n        // catOptions: [],\n        // existingCats: [],\n        // updatedCats: [],\n        // catsAreUpdated: false,\n        // // tags\n        // existingTags: [],\n        // updatedTags: [],\n        // tagsAreUpdated: false,\n        // // collection\n        // collOptions: [{ value: null, label: 'None' } ],\n        // existingColl: null,\n        // updatedColl: null,\n        // collIsUpdated: false,\n  \n        // isClearable: true,\n        // isDisabled: false,\n        // isLoading: false,\n        // isRtl: false,\n        // isSearchable: true\n    }\n\n\n    componentDidMount() {\n        this.props.dispatch(getItemById(this.props.match.params.id))\n        // this.props.dispatch(getAllColls())\n        // this.props.dispatch(getAllCats());\n        // this.props.dispatch(getAllSubCats());\n    }\n\n\n    // componentWillUnmount() {\n    //     this.props.dispatch(clearItem())\n    // }\n\n    // handleInput = (event, name, level) => {\n    //     // make a copy of formdata\n    //     const newFormdata = {\n    //         ...this.state.formdata\n    //     }\n\n\n    //     if (level === 'external_link') {\n    //         newFormdata.external_link[name] = event.target.value;\n    //     } else if (level === 'geo') {\n    //         newFormdata.geo[name] = event.target.value;\n    //     } else if (level === 'tags') {\n    //         newFormdata.tags[name] = event.target.value;\n    //     } else {\n    //         newFormdata[name] = event.target.value;\n    //     }\n\n\n    //     // copy it back to state\n    //     this.setState({\n    //         formdata:newFormdata\n\n    //     })\n    // }\n\n\n\n\n    \n\n\n    deletePost = () => {\n        this.props.dispatch(deleteItem(this.state.formdata._id));\n        this.props.history.push('/user/all-items');\n    }\n\n\n\n    redirectUser = () => {\n        setTimeout(() => {\n            this.props.history.push('/user/all-items')\n        }, 1000)\n    }\n\n\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        \n    //     // console.log(nextProps);\n\n    //     let formReturn;\n    //     let catReturn;\n    //     let tagReturn;\n    //     let collReturn;\n\n        // *********** GENERAL FORM STUFF *****************************\n        let formdata = prevState.formdata;\n        if (nextProps.items.item ) {\n\n            let item = nextProps.items.item;\n                        \n            \n            // console.log(formdata);\n\n            formdata = {\n                ...formdata,\n                _id:item._id,\n                title:item.title,  //\n                creator:item.creator,  //\n                description:item.description,  //\n                pages:item.pages,  //\n                // collection_id:item.collection_id,  //\n                source:item.source,   //\n\n                subject: item.subject,\n                date_created: item.date_created,\n                // tags: item.tags,\n                contributor: item.contributor,\n                item_format: item.item_format,\n                materials: item.materials,\n                physical_dimensions: item.physical_dimensions,\n                editor: item.editor,\n                publisher: item.publisher,\n                further_info: item.further_info,\n                language: item.language,\n                reference: item.reference,\n                rights: item.rights,\n                file_format: item.file_format,\n                // category_ref: item.category_ref,\n                subcategory_ref: item.subcategory_ref\n            }\n            \n        }\n        return {\n            formdata: formdata\n        }\n        \n    }\n\n    //         // console.log(formdata);\n            \n    //         if (item.external_link && item.external_link.length && item.external_link.url) {\n    //             formdata = {\n    //                 ...formdata,\n    //                 external_link : {\n    //                     url: item.external_link[0].url,\n    //                     text: item.external_link[0].text\n    //                 }\n    //             }\n\n    //         }\n                \n    //         // console.log(formdata);\n\n\n    //         if (item.geo && item.geo.length && item.geo.address) {\n    //             formdata = {\n    //                 ...formdata,\n    //                 geo: {\n    //                     address: item.geo.address\n    //                 }\n    //             }\n    //         }\n\n    //         // console.log(formdata);\n    //         formReturn = formdata;\n            \n    //         // console.log(formReturn);\n\n    //     }\n\n\n    //     // *********** CATEGORY SELECT *****************************\n\n    //     let catOptionsFromProps = prevState.catOptions;\n    //     let catsFromProps = prevState.existingCats;\n    //     let catsDone = false;\n    //     // let catOptionsFromProps = [];\n    //     // let catsFromProps = [];\n    //     console.log(prevState.catsAreUpdated);\n\n\n    //     if (nextProps.cats && nextProps.cats.length && !prevState.catsAreUpdated) {\n    //         nextProps.cats.map( (cat, i) => {\n    //             catOptionsFromProps.push({\n    //                 value: cat.cat_id,\n    //                 label: cat.title\n    //             })\n    //         })\n\n    //         if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n    //             // console.log(nextProps.items.item.category_ref);\n    //             nextProps.items.item.category_ref.map( (catref, i) => {\n    //                 let catTitle;\n    //                 nextProps.cats.map( (cat, i) => {\n    //                     if (cat.cat_id == catref) {\n    //                         catTitle = cat.title;\n    //                         let element = {\n    //                             value: catref,\n    //                             label: catTitle\n    //                         };\n    //                         if (!catsFromProps.includes(element)) {\n    //                             // console.log('push!');\n    //                             catsFromProps.push(element)\n    //                         }\n    //                     }\n    //                 })\n                    \n    //             })\n    //             catsDone = true;\n    //         }\n    //     }\n\n    //     // console.log(catsFromProps);\n\n    //     catReturn = {\n    //         catOptions: catOptionsFromProps,\n    //         existingCats: catsFromProps,\n    //         catsAreUpdated: catsDone\n    //     }\n\n    //     // console.log(catReturn);\n\n    //     // *********** TAGS SELECT *****************************\n\n    //     let tagsFromProps = [];\n\n    //     if (nextProps.items.item && nextProps.items.item.tags) {\n    //         nextProps.items.item.tags.map( tag => {\n    //             tagsFromProps.push({\n    //                 value: tag.value,\n    //                 label: tag.label\n    //             })\n    //         })\n            \n    //     }\n    //     tagReturn = {\n    //         existingTags: tagsFromProps,\n    //         tagsAreUpdated: true\n    //     }\n\n    //     // *********** COLLECTION SELECT *****************************\n    //     let collOptionsFromProps = [];\n    //     let collFromProps = null;\n\n\n    //     if (nextProps.colls && nextProps.colls.length) {\n    //         nextProps.colls.map( coll => {\n    //             collOptionsFromProps.push({\n    //                 value: coll.id,\n    //                 label: coll.title\n    //             })\n    //         })\n\n    //         if (nextProps.items && nextProps.items.item && nextProps.items.item.collection_id) {\n    //             nextProps.colls.map ( coll => {\n    //                 let collTitle = null;\n    //                 if (coll.id == nextProps.items.item.collection_id) {\n    //                     collTitle = coll.title;\n\n    //                     collFromProps = {\n    //                         value: nextProps.items.item.collection_id,\n    //                         label: collTitle\n    //                     }\n    //                 }\n    //             })\n    //         }\n\n    //         // console.log(collOptionsFromProps);\n\n    //         collReturn =  {\n    //             collOptions: collOptionsFromProps,\n    //             existingColl: collFromProps,\n    //             collIsUpdated: true\n    //         }\n    //         // console.log(collReturn);\n    //     }\n    //     // *********** RETURN *****************************\n\n  \n    //     let allColls, prevColls, updateColls = [];\n    //     if (collReturn) {\n    //         allColls = [prevState.collOptions, ...collReturn.collOptions];\n    //         prevColls = collReturn.existingColl;\n    //         updateColls = collReturn.collIsUpdated;\n    //     }\n\n\n\n\n    //     return {\n    //         formdata: {...formReturn},\n\n    //         catOptions: catReturn.catOptions,\n    //         existingCats: catReturn.existingCats,\n    //         catsAreUpdated: catReturn.catsAreUpdated,\n            \n    //         existingTags: tagReturn.existingTags,\n    //         tagsAreUpdated: tagReturn.tagsAreUpdated,\n            \n    //         collOptions: allColls,\n    //         existingColl: prevColls,\n    //         collIsUpdated: updateColls,\n\n    //         updated: true,\n    //     }\n\n    // }\n\n    // CAT HANDLERS\n\n    // handleChangeCats = (newValue) => {\n    //     if (newValue && newValue.length) {\n    //         this.setState({ \n    //             updatedCats: [...newValue]\n    //         });\n    //     } else {\n    //         this.setState({ \n    //             updatedCats: []\n    //         });\n    //     }\n\n\n    // };\n\n    // onClickHandlerCats = () => {\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         category_ref: []\n    //     };\n    //     if (this.state.updatedCats && this.state.updatedCats.length) {\n    //         this.state.updatedCats.map( cat => {\n    //             updateData.category_ref.push(cat.value);\n    //         })\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n\n    // TAG HANDLERS\n\n    // handleChangeTags = (newValue) => {\n    //     if (newValue && newValue.length) {\n    //         console.log(newValue)\n    //         this.setState({ \n    //             updatedTags: [...newValue]\n    //         });\n\n    //     } else {\n    //         this.setState({ \n    //             updatedTags: []\n    //         });\n    //     }\n    // };\n\n    // onClickHandlerTags = () => {\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         tags: []\n    //     };\n\n    //     if (this.state.updatedTags && this.state.updatedTags.length) {\n    //         this.state.updatedTags.map( tag => {\n    //             updateData.tags.push(tag);\n    //         })\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n    // COLL HANDLERS\n\n    // handleChangeColl = (newValue) => {\n    //     console.log(newValue);\n    //     if (newValue) {\n    //         this.setState({ \n    //             updatedColl: newValue\n    //         });\n    //     } \n    // };\n\n    // onClickHandlerColl = () => {\n\n    //     let updateData = {\n    //         _id: this.props.match.params.id,\n    //         collection_id: null\n    //     };\n    //     if (this.state.updatedColl ) {\n    //         updateData.collection_id = this.state.updatedColl.value;\n    //     } \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n\n    // submitForm = (e) => {\n    //     e.preventDefault();\n    //     // console.log(this.state.formdata);\n\n\n    //     let updateData = { ...this.state.formdata }\n\n        \n\n        \n    //     if (this.state.updatedCats && this.state.updatedCats.length) {\n\n    //         this.state.updatedCats.map( cat => {\n    //             updateData.category_ref.push(cat.value);\n    //         })\n    //     } \n\n    //     if (this.state.updatedTags && this.state.updatedTags.length) {\n    //         this.state.updatedTags.map( tag => {\n    //             updateData.tags.push(tag);\n    //         })\n    //     } \n    //     if (this.state.updatedColl ) {\n    //         updateData.collection_id = this.state.updatedColl.value;\n    //     } \n\n\n    //     // this.onClickHandlerCats();\n    //     // this.onClickHandlerTags();\n    //     // this.onClickHandlerColl();\n\n    //     // console.log(this.state);\n\n    //     this.props.dispatch(updateItem({\n    //             ...updateData\n    //             // ...this.state.formdata\n    //         }\n    //     ))\n    // }\n\n    \n\n\n\n    // createTextInput = (stateVar, name, placeholder, label, level) => {\n    //     // let string = `this.state.formdata.${variable}`;\n\n    //     return (\n    //         <tr>\n    //             <td>\n    //                 {label}\n    //             </td>\n    //             <td>\n    //                 <div className=\"form_element\">\n    //                     <input\n    //                         type=\"text\"\n    //                         placeholder={placeholder}\n    //                         value={stateVar} \n    //                         onChange={(event) => this.handleInput(event, name, level)}\n    //                     />\n    //                 </div>\n    //             </td>\n                \n    //         </tr>\n    //     )\n    // }\n\n\n\n    // ************** FILE UPLOAD STUFF *******************\n\n    onChangeHandler = (event) => {\n\n\n        var files = event.target.files;\n\n        if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkMimeType(event)) {  \n            this.setState({\n                selectedFile: files\n            })\n        }\n    }\n\n\n\n    onClickHandler = () => {\n        const data = new FormData() \n        \n        for(var x = 0; x<this.state.selectedFile.length; x++) {\n            data.append('file', this.state.selectedFile[x])\n        }\n        \n        axios.post(`http://localhost:8000/upload`, data, { \n                // receive two parameter endpoint url ,form data \n                onUploadProgress: ProgressEvent => {\n                    this.setState({\n                        loaded: (ProgressEvent.loaded / ProgressEvent.total*100)\n                    })\n                }\n            })\n            .then(res => { // then print response status\n                console.log(res.statusText)\n                toast.success('upload success')\n            })\n            .catch(err => { \n                toast.error('upload fail')\n            })\n\n\n    }\n\n    maxSelectFile=(event)=>{\n        let files = event.target.files // create file object\n            if (files.length > 6) { \n               const msg = 'Only 6 images can be uploaded at a time'\n               event.target.value = null // discard selected file\n               console.log(msg)\n              return false;\n     \n          }\n        return true;\n     \n    }\n\n    checkMimeType=(event)=>{\n        //getting file object\n        let files = event.target.files \n        //define message container\n        let err = ''\n        // list allow mime type\n        const types = ['image/png', 'image/jpeg', 'image/gif']\n        // loop access array\n        for(var x = 0; x<files.length; x++) {\n         // compare file type find doesn't matach\n            if (types.every(type => files[x].type !== type)) {\n                // create error message and assign to container   \n                err += files[x].type+' is not a supported format\\n';\n            }\n        };\n\n        for(var z = 0; z<err.length; z++) { // loop create toast massage\n            event.target.value = null \n            toast.error(err[z])\n        }\n        return true;\n    }\n\n    checkFileSize=(event)=>{\n        let files = event.target.files\n        let size = 15000 \n        let err = \"\"; \n\n        for(var x = 0; x<files.length; x++) {\n            if (files[x].size > size) {\n                err += files[x].type+'is too large, please pick a smaller file\\n';\n            }\n        };\n\n        for(var z = 0; z<err.length; z++) {\n            toast.error(err[z])\n            event.target.value = null\n        }\n        return true;\n   \n    }    \n\n    // ****************************************************\n\n    addDefaultImg = (ev) => {\n        const newImg = '/images/default/default.jpg';\n        if (ev.target.src !== newImg) {\n            ev.target.src = newImg\n        }  \n    } \n\n    render() {\n\n        let items = this.props.items;\n\n        // const {\n        //     isClearable,\n        //     isSearchable,\n        //     isDisabled,\n        //     isLoading,\n        //     isRtl,\n        // } = this.state;\n\n        return (\n            \n            \n            <div className=\"rl_container article edit_page\">\n                {/* { this.state.loaded ? */}\n                    \n                    {\n                        items.updateItem ?\n                            <div className=\"edit_confirm\">\n                                Post updated, <Link to={`/items/${items.item._id}`}>\n                                    Click here to see your post\n                                </Link>\n                            </div>\n                        : null\n                    }\n\n\n                    {\n                        items.itemDeleted ?\n                            <div className=\"red_tag\">\n                                Item Deleted    \n                                {this.redirectUser()}\n                            </div>\n\n                        : null\n                    }\n\n\n                    {/* <form onSubmit={this.submitForm}> */}\n                        \n                        <h2>Upload new file for:</h2>\n                        <span>this.state.formdata.title</span>\n\n                        <img src={`/images/items/${this.state.formdata._id}/sq_thumbnail/0.jpg`} alt=\"Item\" onError={this.addDefaultImg}/>\n\n                        {/* <table>\n                        <tbody> */}\n                        \n                            {/* {this.createTextInput(this.state.formdata.title,'title', \"Enter title\", \"Title\")}\n                            {this.createTextInput(this.state.formdata.creator,'creator', \"Enter creator\", \"Creator\")} */}\n\n\n\n\n                            {/* <tr>\n                                <td className=\"label\">\n                                    Description\n                                </td>\n                                <td>\n                                    <textarea\n                                        value={this.state.formdata.description}\n                                        onChange={(event) => this.handleInput(event, 'description')}\n                                    />\n                                </td>\n                            </tr> */}\n\n                            \n                            {/* <tr>\n                                <td className=\"label\">\n                                    Pages\n                                </td>\n                                <td>\n                                    <div className=\"form_element\">\n                                        <input\n                                            type=\"number\"\n                                            placeholder=\"Enter pages\"\n                                            value={this.state.formdata.pages} \n                                            onChange={(event) => this.handleInput(event, 'pages')}                        />\n                                    </div>\n                                </td>\n                            </tr> */}\n\n                            {/* {this.createTextInput(this.state.formdata.source,'source', \"Enter item source\", \"Source\")}\n                            {this.createTextInput(this.state.formdata.subject,'subject', \"Subject\", \"Subject\")}\n                            {this.createTextInput(this.state.formdata.date_created,'date_created', \"Date item was created\", \"Date\")}\n                            <tr> */}\n{/*                             \n                                <td>\n                                    Tags\n                                </td>\n                                <td>\n                                    {this.state.tagsAreUpdated && this.props.items && this.props.items.item?\n                                        <CreatableSelect\n                                            key={`tag_${this.props.items.item._id}`}\n                                            defaultValue={this.state.existingTags}\n                                            isMulti\n                                            onChange={this.handleChangeTags}\n                                            options={this.state.updatedTags}\n                                        />\n                                    : null}\n                                    {/* <Tags tags={this.state.formdata.tags} id={this.props.match.params.id}/> */}\n                                {/* </td>\n                            </tr> */}\n                            \n                            {/* {this.createTextInput(this.state.formdata.contributor,'contributor', \"contributor\", \"Contributor\")}\n                            {this.createTextInput(this.state.formdata.item_format,'item_format', \"The item's format\", \"Format\")}\n                            {this.createTextInput(this.state.formdata.materials,'materials', \"materials\", \"Materials\")}\n                            {this.createTextInput(this.state.formdata.physical_dimensions,'physical_dimensions', \"Physical dimensions\", \"Dimensions\")}\n                            {this.createTextInput(this.state.formdata.editor,'editor', \"editor\", \"Editor\")}\n                            {this.createTextInput(this.state.formdata.publisher,'publisher', \"publisher\", \"Publisher\")}\n                            {this.createTextInput(this.state.formdata.further_info,'further_info', \"Enter any further info, resources..\", \"Further Info\")} */}\n                            \n                            {/* {this.createTextInput(this.state.formdata.external_link.url,'url', \"External link url\", \"URL\")} */}\n                            {/* {this.createTextInput(this.state.formdata.external_link.text,'text', \"External link text\", 'Description of the link', \"Link Description\")} */}\n\n                            {/* {this.createTextInput(this.state.formdata.language,'language', \"language\", \"Language\")}\n                            {this.createTextInput(this.state.formdata.reference,'reference', \"reference\", \"Ref\")}\n                            {this.createTextInput(this.state.formdata.rights,'rights', \"rights\", \"Rights\")} */}\n                            {/* {this.createTextInput(this.state.formdata.geo.address,'address', \"Item address\", \"Address\")} */}\n                            \n                            {/* <tr>\n                                <td>\n                                    Collection\n                                </td>\n                                <td>\n                                    <div className=\"form_element\">\n                                        {this.state.collIsUpdated && this.props.items && this.props.items.item  ?\n                                            <Select\n                                                key={`col_${this.props.items.item._id}`}\n                                                className=\"basic-single\"\n                                                classNamePrefix=\"select\"\n                                                defaultValue={this.state.existingColl}\n                                                isDisabled={isDisabled}\n                                                isLoading={isLoading}\n                                                isClearable={isClearable}\n                                                isRtl={isRtl}\n                                                isSearchable={isSearchable}\n                                                name=\"color\"\n                                                options={this.state.collOptions}\n                                                onChange={this.handleChangeColl}\n                                            />\n                                        : null} */}\n                                        {/* <select\n                                            value={this.state.formdata.collection_id}\n                                            onChange={(event) => this.handleInput(event, 'collection_id')}\n                                        >\n                                            <option value=\"\" disabled selected>Collection</option>\n                                            <option value={null} >* None</option>\n\n                                            { this.props.colls && this.props.colls.length ?\n                                                this.props.colls.map ( (coll, i) => (\n                                                    <option key={i} value={`\"${coll.id}\"`}>{coll.title}</option>\n                                                ))\n                                            : null }\n                                        </select> */}\n                                    {/* </div>\n                                </td>\n                            </tr> */}\n\n                            {/* <tr>\n                                <td>\n                                    Category\n                                </td>\n                                <td>\n                                    <div className=\"form_element\">\n\n\n                                        {this.state.updated && this.state.catsAreUpdated && this.props.items && this.props.items.item ?\n                                            <Select\n                                                key={`cat_${this.props.items.item._id}`}\n                                                defaultValue={this.state.existingCats}\n                                                isMulti\n                                                name=\"colors\"\n                                                options={this.state.catOptions}\n                                                className=\"basic-multi-select\"\n                                                classNamePrefix=\"select\"\n                                                onChange={this.handleChangeCats}\n                                            />\n                                        : null} */}\n\n\n                                        {/* <select\n                                            value={this.state.formdata.category_ref}\n                                            onChange={(event) => this.handleInput(event, 'category_ref')}\n                                        >   \n                                            <option value=\"\" disabled selected>Category</option>\n\n                                            <option value=\"\">* None</option>\n\n                                            { this.props.cats && this.props.cats.length ?\n                                                this.props.cats.map ( (cat, i) => (\n                                                    <option key={i} value={`\"${cat.cat_id}\"`}>{cat.title}</option>\n                                                ))\n                                            : null }\n                                        </select> */}\n                                    {/* </div>\n                                </td>\n                            </tr>   */}\n\n                            {/* <tr>\n                                <td>\n                                    \n                                </td>\n                                <td>\n                                    <span>Selected: \n                                        { this.state.formdata.category_ref && this.state.formdata.category_ref.length > 0 ?\n                                            this.state.formdata.category_ref.map( (ref, i) => (\n                                                <span>{ref} </span>\n                                            )) \n                                        : <span>No categories selected</span>}\n                                    </span>\n                                </td>\n                            </tr> */}\n\n                            {/* <tr>\n                                <td>\n                                    Sub-categories \n                                </td>\n                                <td>\n                                    <div className=\"form_element\"> */}\n                                        {/* <select\n                                            value={this.state.formdata.subcategory_ref}\n                                            onChange={(event) => this.handleInput(event, 'subcategory_ref')}\n                                        >\n                                            <option value=\"\" disabled selected>Sub Category</option>\n                                            <option value=\"\" >* None</option>\n\n                                            { this.props.subcats && this.props.subcats.length ?\n                                                this.props.subcats.map ( (subcat, i) => (\n                                                    <option key={i} value={`\"${subcat.subcat_id}\"`}>{subcat.title}</option>\n                                                ))\n                                            : null }\n                                        </select> */}\n                                    {/* </div>\n                                </td>\n                            </tr>\n\n                            <tr>\n                                <td>\n                                    Upload \n                                </td>\n                                <td> */}\n                                    <div className=\"form_element\">\n                                        <input type=\"file\" className=\"form-control\" multiple name=\"file\" onChange={this.onChangeHandler}/>\n                                        <button type=\"button\" className=\"btn btn-success btn-block\" onClick={this.onClickHandler}>Upload Files</button> \n\n                                    </div>\n                                {/* </td>\n                            </tr>\n                            \n                        </tbody>\n                        </table> */}\n\n                        {/* <button type=\"submit\">Upload Files</button> */}\n                        \n                        {/* <div className=\"delete_post\">\n                            <div className=\"button\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) this.deletePost(e) } }>\n                                Delete item\n                            </div>\n                        </div> */}\n\n                    {/* </form> */}\n                {/* : <p>Hi</p>} */}\n            </div>\n            \n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        items:state.items\n        // colls:state.collections.colls,\n        // cats:state.cats.cats,\n        // subcats:state.cats.subcats\n    }\n}\n\nexport default connect(mapStateToProps)(EditItemFile)\n\n\n"]},"metadata":{},"sourceType":"module"}