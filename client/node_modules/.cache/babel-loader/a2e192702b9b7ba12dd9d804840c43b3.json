{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar checkDecoratorArguments_1 = require(\"./utils/checkDecoratorArguments\");\n\nvar decorateHandler_1 = require(\"./decorateHandler\");\n\nvar registerSource_1 = require(\"./registerSource\");\n\nvar createSourceFactory_1 = require(\"./createSourceFactory\");\n\nvar createSourceMonitor_1 = require(\"./createSourceMonitor\");\n\nvar createSourceConnector_1 = require(\"./createSourceConnector\");\n\nvar isValidType_1 = require(\"./utils/isValidType\");\n\nvar invariant = require('invariant');\n\nvar isPlainObject = require('lodash/isPlainObject');\n/**\n * Decorates a component as a dragsource\n * @param type The dragsource type\n * @param spec The drag source specification\n * @param collect The props collector function\n * @param options DnD optinos\n */\n\n\nfunction DragSource(type, spec, collect, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  checkDecoratorArguments_1.default('DragSource', 'type, spec, collect[, options]', type, spec, collect, options);\n  var getType = type;\n\n  if (typeof type !== 'function') {\n    invariant(isValidType_1.default(type), 'Expected \"type\" provided as the first argument to DragSource to be ' + 'a string, or a function that returns a string given the current props. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', type);\n\n    getType = function () {\n      return type;\n    };\n  }\n\n  invariant(isPlainObject(spec), 'Expected \"spec\" provided as the second argument to DragSource to be ' + 'a plain object. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', spec);\n  var createSource = createSourceFactory_1.default(spec);\n  invariant(typeof collect === 'function', 'Expected \"collect\" provided as the third argument to DragSource to be ' + 'a function that returns a plain object of props to inject. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', collect);\n  invariant(isPlainObject(options), 'Expected \"options\" provided as the fourth argument to DragSource to be ' + 'a plain object when specified. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', collect);\n  return function decorateSource(DecoratedComponent) {\n    return decorateHandler_1.default({\n      containerDisplayName: 'DragSource',\n      createHandler: createSource,\n      registerHandler: registerSource_1.default,\n      createMonitor: createSourceMonitor_1.default,\n      createConnector: createSourceConnector_1.default,\n      DecoratedComponent: DecoratedComponent,\n      getType: getType,\n      collect: collect,\n      options: options\n    });\n  };\n}\n\nexports.default = DragSource;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/node_modules/react-dnd/lib/DragSource.js"],"names":["Object","defineProperty","exports","value","checkDecoratorArguments_1","require","decorateHandler_1","registerSource_1","createSourceFactory_1","createSourceMonitor_1","createSourceConnector_1","isValidType_1","invariant","isPlainObject","DragSource","type","spec","collect","options","default","getType","createSource","decorateSource","DecoratedComponent","containerDisplayName","createHandler","registerHandler","createMonitor","createConnector"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,yBAAyB,GAAGC,OAAO,CAAC,iCAAD,CAAvC;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAIK,uBAAuB,GAAGL,OAAO,CAAC,yBAAD,CAArC;;AACA,IAAIM,aAAa,GAAGN,OAAO,CAAC,qBAAD,CAA3B;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIQ,aAAa,GAAGR,OAAO,CAAC,sBAAD,CAA3B;AACA;;;;;;;;;AAOA,SAASS,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,OAAhC,EAAyCC,OAAzC,EAAkD;AAC9C,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzCd,EAAAA,yBAAyB,CAACe,OAA1B,CAAkC,YAAlC,EAAgD,gCAAhD,EAAkFJ,IAAlF,EAAwFC,IAAxF,EAA8FC,OAA9F,EAAuGC,OAAvG;AACA,MAAIE,OAAO,GAAGL,IAAd;;AACA,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC5BH,IAAAA,SAAS,CAACD,aAAa,CAACQ,OAAd,CAAsBJ,IAAtB,CAAD,EAA8B,wEACnC,yEADmC,GAEnC,wBAFmC,GAGnC,uEAHK,EAGoEA,IAHpE,CAAT;;AAIAK,IAAAA,OAAO,GAAG,YAAY;AAAE,aAAOL,IAAP;AAAc,KAAtC;AACH;;AACDH,EAAAA,SAAS,CAACC,aAAa,CAACG,IAAD,CAAd,EAAsB,yEAC3B,wCAD2B,GAE3B,uEAFK,EAEoEA,IAFpE,CAAT;AAGA,MAAIK,YAAY,GAAGb,qBAAqB,CAACW,OAAtB,CAA8BH,IAA9B,CAAnB;AACAJ,EAAAA,SAAS,CAAC,OAAOK,OAAP,KAAmB,UAApB,EAAgC,2EACrC,6DADqC,GAErC,wBAFqC,GAGrC,uEAHK,EAGoEA,OAHpE,CAAT;AAIAL,EAAAA,SAAS,CAACC,aAAa,CAACK,OAAD,CAAd,EAAyB,4EAC9B,iCAD8B,GAE9B,wBAF8B,GAG9B,uEAHK,EAGoED,OAHpE,CAAT;AAIA,SAAO,SAASK,cAAT,CAAwBC,kBAAxB,EAA4C;AAC/C,WAAOjB,iBAAiB,CAACa,OAAlB,CAA0B;AAC7BK,MAAAA,oBAAoB,EAAE,YADO;AAE7BC,MAAAA,aAAa,EAAEJ,YAFc;AAG7BK,MAAAA,eAAe,EAAEnB,gBAAgB,CAACY,OAHL;AAI7BQ,MAAAA,aAAa,EAAElB,qBAAqB,CAACU,OAJR;AAK7BS,MAAAA,eAAe,EAAElB,uBAAuB,CAACS,OALZ;AAM7BI,MAAAA,kBAAkB,EAAEA,kBANS;AAO7BH,MAAAA,OAAO,EAAEA,OAPoB;AAQ7BH,MAAAA,OAAO,EAAEA,OARoB;AAS7BC,MAAAA,OAAO,EAAEA;AAToB,KAA1B,CAAP;AAWH,GAZD;AAaH;;AACDhB,OAAO,CAACiB,OAAR,GAAkBL,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar checkDecoratorArguments_1 = require(\"./utils/checkDecoratorArguments\");\nvar decorateHandler_1 = require(\"./decorateHandler\");\nvar registerSource_1 = require(\"./registerSource\");\nvar createSourceFactory_1 = require(\"./createSourceFactory\");\nvar createSourceMonitor_1 = require(\"./createSourceMonitor\");\nvar createSourceConnector_1 = require(\"./createSourceConnector\");\nvar isValidType_1 = require(\"./utils/isValidType\");\nvar invariant = require('invariant');\nvar isPlainObject = require('lodash/isPlainObject');\n/**\n * Decorates a component as a dragsource\n * @param type The dragsource type\n * @param spec The drag source specification\n * @param collect The props collector function\n * @param options DnD optinos\n */\nfunction DragSource(type, spec, collect, options) {\n    if (options === void 0) { options = {}; }\n    checkDecoratorArguments_1.default('DragSource', 'type, spec, collect[, options]', type, spec, collect, options);\n    var getType = type;\n    if (typeof type !== 'function') {\n        invariant(isValidType_1.default(type), 'Expected \"type\" provided as the first argument to DragSource to be ' +\n            'a string, or a function that returns a string given the current props. ' +\n            'Instead, received %s. ' +\n            'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', type);\n        getType = function () { return type; };\n    }\n    invariant(isPlainObject(spec), 'Expected \"spec\" provided as the second argument to DragSource to be ' +\n        'a plain object. Instead, received %s. ' +\n        'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', spec);\n    var createSource = createSourceFactory_1.default(spec);\n    invariant(typeof collect === 'function', 'Expected \"collect\" provided as the third argument to DragSource to be ' +\n        'a function that returns a plain object of props to inject. ' +\n        'Instead, received %s. ' +\n        'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', collect);\n    invariant(isPlainObject(options), 'Expected \"options\" provided as the fourth argument to DragSource to be ' +\n        'a plain object when specified. ' +\n        'Instead, received %s. ' +\n        'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', collect);\n    return function decorateSource(DecoratedComponent) {\n        return decorateHandler_1.default({\n            containerDisplayName: 'DragSource',\n            createHandler: createSource,\n            registerHandler: registerSource_1.default,\n            createMonitor: createSourceMonitor_1.default,\n            createConnector: createSourceConnector_1.default,\n            DecoratedComponent: DecoratedComponent,\n            getType: getType,\n            collect: collect,\n            options: options,\n        });\n    };\n}\nexports.default = DragSource;\n"]},"metadata":{},"sourceType":"script"}