{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar wrapConnectorHooks_1 = require(\"./wrapConnectorHooks\");\n\nvar shallowEqual = require('shallowequal');\n\nfunction createTargetConnector(backend) {\n  var currentHandlerId;\n  var currentDropTargetNode;\n  var currentDropTargetOptions;\n  var disconnectCurrentDropTarget;\n\n  function reconnectDropTarget() {\n    if (disconnectCurrentDropTarget) {\n      disconnectCurrentDropTarget();\n      disconnectCurrentDropTarget = undefined;\n    }\n\n    if (currentHandlerId && currentDropTargetNode) {\n      disconnectCurrentDropTarget = backend.connectDropTarget(currentHandlerId, currentDropTargetNode, currentDropTargetOptions);\n    }\n  }\n\n  function receiveHandlerId(handlerId) {\n    if (handlerId === currentHandlerId) {\n      return;\n    }\n\n    currentHandlerId = handlerId;\n    reconnectDropTarget();\n  }\n\n  var hooks = wrapConnectorHooks_1.default({\n    dropTarget: function connectDropTarget(node, options) {\n      if (node === currentDropTargetNode && shallowEqual(options, currentDropTargetOptions)) {\n        return;\n      }\n\n      currentDropTargetNode = node;\n      currentDropTargetOptions = options;\n      reconnectDropTarget();\n    }\n  });\n  return {\n    receiveHandlerId: receiveHandlerId,\n    hooks: hooks\n  };\n}\n\nexports.default = createTargetConnector;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/node_modules/react-dnd/lib/createTargetConnector.js"],"names":["Object","defineProperty","exports","value","wrapConnectorHooks_1","require","shallowEqual","createTargetConnector","backend","currentHandlerId","currentDropTargetNode","currentDropTargetOptions","disconnectCurrentDropTarget","reconnectDropTarget","undefined","connectDropTarget","receiveHandlerId","handlerId","hooks","default","dropTarget","node","options"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,oBAAoB,GAAGC,OAAO,CAAC,sBAAD,CAAlC;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,SAASE,qBAAT,CAA+BC,OAA/B,EAAwC;AACpC,MAAIC,gBAAJ;AACA,MAAIC,qBAAJ;AACA,MAAIC,wBAAJ;AACA,MAAIC,2BAAJ;;AACA,WAASC,mBAAT,GAA+B;AAC3B,QAAID,2BAAJ,EAAiC;AAC7BA,MAAAA,2BAA2B;AAC3BA,MAAAA,2BAA2B,GAAGE,SAA9B;AACH;;AACD,QAAIL,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC3CE,MAAAA,2BAA2B,GAAGJ,OAAO,CAACO,iBAAR,CAA0BN,gBAA1B,EAA4CC,qBAA5C,EAAmEC,wBAAnE,CAA9B;AACH;AACJ;;AACD,WAASK,gBAAT,CAA0BC,SAA1B,EAAqC;AACjC,QAAIA,SAAS,KAAKR,gBAAlB,EAAoC;AAChC;AACH;;AACDA,IAAAA,gBAAgB,GAAGQ,SAAnB;AACAJ,IAAAA,mBAAmB;AACtB;;AACD,MAAIK,KAAK,GAAGd,oBAAoB,CAACe,OAArB,CAA6B;AACrCC,IAAAA,UAAU,EAAE,SAASL,iBAAT,CAA2BM,IAA3B,EAAiCC,OAAjC,EAA0C;AAClD,UAAID,IAAI,KAAKX,qBAAT,IACAJ,YAAY,CAACgB,OAAD,EAAUX,wBAAV,CADhB,EACqD;AACjD;AACH;;AACDD,MAAAA,qBAAqB,GAAGW,IAAxB;AACAV,MAAAA,wBAAwB,GAAGW,OAA3B;AACAT,MAAAA,mBAAmB;AACtB;AAToC,GAA7B,CAAZ;AAWA,SAAO;AACHG,IAAAA,gBAAgB,EAAEA,gBADf;AAEHE,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH;;AACDhB,OAAO,CAACiB,OAAR,GAAkBZ,qBAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar wrapConnectorHooks_1 = require(\"./wrapConnectorHooks\");\nvar shallowEqual = require('shallowequal');\nfunction createTargetConnector(backend) {\n    var currentHandlerId;\n    var currentDropTargetNode;\n    var currentDropTargetOptions;\n    var disconnectCurrentDropTarget;\n    function reconnectDropTarget() {\n        if (disconnectCurrentDropTarget) {\n            disconnectCurrentDropTarget();\n            disconnectCurrentDropTarget = undefined;\n        }\n        if (currentHandlerId && currentDropTargetNode) {\n            disconnectCurrentDropTarget = backend.connectDropTarget(currentHandlerId, currentDropTargetNode, currentDropTargetOptions);\n        }\n    }\n    function receiveHandlerId(handlerId) {\n        if (handlerId === currentHandlerId) {\n            return;\n        }\n        currentHandlerId = handlerId;\n        reconnectDropTarget();\n    }\n    var hooks = wrapConnectorHooks_1.default({\n        dropTarget: function connectDropTarget(node, options) {\n            if (node === currentDropTargetNode &&\n                shallowEqual(options, currentDropTargetOptions)) {\n                return;\n            }\n            currentDropTargetNode = node;\n            currentDropTargetOptions = options;\n            reconnectDropTarget();\n        },\n    });\n    return {\n        receiveHandlerId: receiveHandlerId,\n        hooks: hooks,\n    };\n}\nexports.default = createTargetConnector;\n"]},"metadata":{},"sourceType":"script"}