{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/traveller-collection/client/src/components/Categories/cat_view.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getItemsByCat, getCatById, getAllSubCats } from '../../actions'; // import PanelView from '../PanelView_DELETE/panel_view';\n\nimport NavigationBar from '../../widgetsUI/navigation';\n\nclass CatView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      info: [],\n      theseSubcats: []\n    };\n    this.navInfo = {\n      catTitle: null,\n      catId: null,\n      subCatTitle: null,\n      subCatId: null,\n      type: 'Categories'\n    };\n\n    this.addDefaultImg = ev => {\n      const newImg = '/images/default/default.jpg';\n\n      if (ev.target.src !== newImg) {\n        ev.target.src = newImg;\n      }\n    };\n\n    this.renderSubCatItems = subcat => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cat_grid_column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, this.props.catitems.map((item, i) => item.subcategory_ref[0] == subcat.subcat_id ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rule\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 47\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 50\n        }\n      }, subcat.title))) : null), this.props.catitems.map((item, i) => item.subcategory_ref[0] == subcat.subcat_id ? /*#__PURE__*/React.createElement(\"div\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: `/items/${item._id}`,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"figure\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: `/images/items/${item._id}/sq_thumbnail/0.jpg`,\n        alt: item.title,\n        onError: this.addDefaultImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(\"figcaption\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 41\n        }\n      }, item.title))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 33\n        }\n      })) : null));\n    };\n\n    this.renderItemsBySub = () => {\n      // loop through all subcats\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, this.state.theseSubcats.map(subcat =>\n      /*#__PURE__*/\n      // render the items in each subcat\n      // console.log(subcat);\n      React.createElement(\"div\", {\n        className: \"cat_grid_row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }, this.renderSubCatItems(subcat))));\n    };\n\n    this.renderGrid = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }\n      }, this.props.catitems && this.props.catitems.length ? this.renderItemsBySub() : /*#__PURE__*/React.createElement(\"p\", {\n        className: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 23\n        }\n      }, \"There are no items in this category.\"));\n    };\n\n    this.getCatName = () => {\n      if (this.props.catinfo && this.props.catinfo.length) {\n        this.navInfo.catTitle = this.props.catinfo[0].title;\n        this.navInfo.catId = this.props.catinfo[0].cat_id;\n      }\n    };\n  }\n\n  componentDidMount() {\n    let catId = this.props.match.params.id;\n    this.props.dispatch(getItemsByCat(catId));\n    this.props.dispatch(getCatById(catId));\n    this.props.dispatch(getAllSubCats(catId));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.catitems && nextProps.catitems.length) {\n      let tempArray = [];\n      nextProps.catitems.map((item, i) => tempArray.push({\n        // src: `/images/sq_thumb/${item.omeka.omeka_id}.jpg`,\n        src: `/images/items/${item._id}/sq_thumbnail/0.jpg`,\n        caption: item.title,\n        link: `/items/${item._id}`\n      }));\n\n      if (tempArray.length) {\n        this.setState({\n          info: [...tempArray]\n        });\n      }\n    }\n\n    if (this.props.catinfo && this.props.catinfo.length) {\n      this.setState({\n        navInfo: {\n          catTitle: this.props.catinfo[0].title,\n          catId: this.props.catinfo[0].cat_id\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.subcats !== prevProps.subcats) {\n      if (this.props.subcats && this.props.subcats.length) {\n        let theseSubcats = [];\n        this.props.subcats.map(subcat => {\n          if (subcat.parent_cat == this.props.match.params.id) {\n            theseSubcats.push(subcat);\n          }\n        });\n        this.setState({\n          theseSubcats\n        });\n      }\n    }\n  }\n\n  render() {\n    this.getCatName();\n    console.log(this.props);\n    let catinfo = this.props.catinfo;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cat_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavigationBar, {\n      navinfo: this.navInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }), catinfo && catinfo.length > 0 ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }\n    }, catinfo[0].title) : null, this.props.catitems ? this.renderGrid() : null, /*#__PURE__*/React.createElement(Link, {\n      to: `/cat-edit/${this.props.match.params.id}`,\n      className: \"font_12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, \"Edit\")));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    catitems: state.cats.catitems,\n    catinfo: state.cats.catinfo,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(CatView);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/traveller-collection/client/src/components/Categories/cat_view.js"],"names":["React","Component","connect","Link","getItemsByCat","getCatById","getAllSubCats","NavigationBar","CatView","state","info","theseSubcats","navInfo","catTitle","catId","subCatTitle","subCatId","type","addDefaultImg","ev","newImg","target","src","renderSubCatItems","subcat","props","catitems","map","item","i","subcategory_ref","subcat_id","title","_id","renderItemsBySub","renderGrid","length","getCatName","catinfo","cat_id","componentDidMount","match","params","id","dispatch","componentWillReceiveProps","nextProps","tempArray","push","caption","link","setState","componentDidUpdate","prevProps","prevState","subcats","parent_cat","render","console","log","mapStateToProps","cats"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n\nimport { getItemsByCat, getCatById, getAllSubCats } from '../../actions';\n// import PanelView from '../PanelView_DELETE/panel_view';\nimport NavigationBar from '../../widgetsUI/navigation';\n\n\nclass CatView  extends Component {\n    \n    \n\n    componentDidMount() {\n        let catId = this.props.match.params.id\n        this.props.dispatch(getItemsByCat(catId));\n        this.props.dispatch(getCatById(catId));\n        this.props.dispatch(getAllSubCats(catId));\n\n    }\n\n\n    state = {\n        info: [],\n        theseSubcats: []\n    }\n\n    \n    navInfo = {\n        catTitle: null,\n        catId: null,\n        subCatTitle: null,\n        subCatId: null,\n        type: 'Categories'\n    }\n\n    componentWillReceiveProps(nextProps) {\n        \n        if (nextProps.catitems && nextProps.catitems.length) {\n            let tempArray = []\n            nextProps.catitems.map( (item, i) => (\n                    tempArray.push(\n                        {\n                            // src: `/images/sq_thumb/${item.omeka.omeka_id}.jpg`,\n                            src: `/images/items/${item._id}/sq_thumbnail/0.jpg`,\n                            caption: item.title,\n                            link: `/items/${item._id}` \n                        }\n                    )\n            ))\n            if (tempArray.length) {\n                this.setState({ info: [...tempArray]});\n            }\n        }\n        if (this.props.catinfo && this.props.catinfo.length) {\n            this.setState({\n                navInfo: {\n                    catTitle: this.props.catinfo[0].title,\n                    catId: this.props.catinfo[0].cat_id\n                }\n            })\n        }\n    }\n\n    addDefaultImg = (ev) => {\n        const newImg = '/images/default/default.jpg';\n        if (ev.target.src !== newImg) {\n            ev.target.src = newImg\n        }  \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.subcats !== prevProps.subcats) {\n\n            if (this.props.subcats && this.props.subcats.length) {\n                let theseSubcats = [];\n                \n                this.props.subcats.map( subcat => {\n                    if (subcat.parent_cat == this.props.match.params.id) {\n                        theseSubcats.push(subcat)\n                    }\n                })\n                this.setState({\n                    theseSubcats\n                })\n            }\n        }\n    }\n\n\n\n    renderSubCatItems = (subcat) => {\n\n        \n        return ( \n            \n                \n                \n            <div className=\"cat_grid_column\">\n\n                {/* if any of the items contain the subcat ref */}\n                { this.props.catitems.map( (item, i) => (\n                    \n                    item.subcategory_ref[0] == subcat.subcat_id ?\n                        <div className=\"rule\"><p><span>{subcat.title}</span></p></div>\n                    : null\n                ))}\n\n\n                \n                { this.props.catitems.map( (item, i) => (\n                    \n                    item.subcategory_ref[0] == subcat.subcat_id ?\n\n                        \n                            <div key={i}>\n                                <Link to={`/items/${item._id}`}key={i}>\n                                    <figure key={i}>\n                                        <img src={`/images/items/${item._id}/sq_thumbnail/0.jpg`} \n                                            alt={item.title} \n                                            onError={this.addDefaultImg} />\n                                        <figcaption>{item.title}</figcaption>\n                                    </figure>\n                                </Link>\n                                <br/>\n                            </div>\n                        \n                    : null\n                ))}\n            </div>\n            \n        )\n    }\n\n    renderItemsBySub = () => {\n        // loop through all subcats\n        return (\n            <div>\n                {this.state.theseSubcats.map( subcat => (\n                    // render the items in each subcat\n                    // console.log(subcat);\n                    <div className=\"cat_grid_row\">\n                        {this.renderSubCatItems(subcat)}\n                    </div>\n                ))\n                }\n            </div>\n        )\n    }\n\n  \n\n\n\n    renderGrid = () => {\n        \n        return(\n            <div>\n                \n                    { this.props.catitems && this.props.catitems.length ?\n                        this.renderItemsBySub()\n                    : <p className=\"center\">There are no items in this category.</p> }\n                \n            </div>\n    )}\n\n\n\n\n\n    getCatName = () => {\n        if (this.props.catinfo && this.props.catinfo.length) {\n            this.navInfo.catTitle = this.props.catinfo[0].title;\n            this.navInfo.catId = this.props.catinfo[0].cat_id;\n        }\n    }\n\n\n\n    render() {\n\n        this.getCatName();\n\n        console.log(this.props);\n\n        let catinfo = this.props.catinfo;\n\n        return (\n            <div className=\"main_view\">\n                <div className=\"cat_view\">\n                    <NavigationBar navinfo={this.navInfo}/>\n                    { catinfo && catinfo.length > 0? \n                        <h2 className=\"title\">{catinfo[0].title}</h2>\n                    :null\n                    }\n\n                    \n                    { this.props.catitems ?\n                        this.renderGrid()\n                    : null }\n\n                    <Link to={`/cat-edit/${this.props.match.params.id}`} className=\"font_12\">Edit</Link>\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        catitems: state.cats.catitems,\n        catinfo: state.cats.catinfo,\n        subcats: state.cats.subcats\n        \n    }\n}\n\n\nexport default connect(mapStateToProps)(CatView)"]},"metadata":{},"sourceType":"module"}