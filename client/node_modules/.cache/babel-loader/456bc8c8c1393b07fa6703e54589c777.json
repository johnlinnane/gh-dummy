{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/traveller-collection/client/src/components/Categories/cat_view.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getItemsByCat, getCatById, getAllSubCats } from '../../actions';\nimport PanelView from '../PanelView_DELETE/panel_view';\nimport NavigationBar from '../../widgetsUI/navigation';\n\nclass CatView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      info: [],\n      theseSubcats: []\n    };\n    this.navInfo = {\n      catTitle: null,\n      catId: null,\n      subCatTitle: null,\n      subCatId: null,\n      type: 'Categories'\n    };\n\n    this.addDefaultImg = ev => {\n      const newImg = '/images/default/default.jpg';\n\n      if (ev.target.src !== newImg) {\n        ev.target.src = newImg;\n      }\n    };\n\n    this.renderItemsBySub = () => {\n      if (this.props.catitems && this.props.catitems.length) {\n        this.props.catitems.map((item, i) => {\n          // loop through available subcats\n          this.state.theseSubcats.map(allsubcat => {\n            if (item.subcategory_ref[0] == allsubcat.subcat_id) {\n              return /*#__PURE__*/React.createElement(\"p\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 32\n                }\n              }, \"Hi\");\n            } else {\n              return /*#__PURE__*/React.createElement(\"p\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 36\n                }\n              }, \"By\");\n            }\n          }); // loop through subcats of item\n          // if the first one is equal to \n          // <Link to={`/items/${item._id}`}key={i}>\n          //     <figure key={i}>\n          //         <img src={`/images/items/${item._id}/sq_thumbnail/0.jpg`} \n          //             alt={item.title} \n          //             onError={this.addDefaultImg} />\n          //         <figcaption>{item.title}</figcaption>\n          //     </figure>\n          // </Link>\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 20\n          }\n        }, \"There are no items in this category.\");\n      }\n    };\n\n    this.renderGrid = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cat_grid_row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cat_grid_column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, this.renderItemsBySub()));\n    };\n\n    this.getCatName = () => {\n      if (this.props.catinfo && this.props.catinfo.length) {\n        this.navInfo.catTitle = this.props.catinfo[0].title;\n        this.navInfo.catId = this.props.catinfo[0].cat_id;\n      }\n    };\n  }\n\n  componentDidMount() {\n    let catId = this.props.match.params.id;\n    this.props.dispatch(getItemsByCat(catId));\n    this.props.dispatch(getCatById(catId));\n    this.props.dispatch(getAllSubCats(catId));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.catitems && nextProps.catitems.length) {\n      let tempArray = [];\n      nextProps.catitems.map((item, i) => tempArray.push({\n        // src: `/images/sq_thumb/${item.omeka.omeka_id}.jpg`,\n        src: `/images/items/${item._id}/sq_thumbnail/0.jpg`,\n        caption: item.title,\n        link: `/items/${item._id}`\n      }));\n\n      if (tempArray.length) {\n        this.setState({\n          info: [...tempArray]\n        });\n      }\n    }\n\n    if (this.props.catinfo && this.props.catinfo.length) {\n      this.setState({\n        navInfo: {\n          catTitle: this.props.catinfo[0].title,\n          catId: this.props.catinfo[0].cat_id\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.subcats !== prevProps.subcats) {\n      if (this.props.subcats && this.props.subcats.length) {\n        let theseSubcats = [];\n        this.props.subcats.map(subcat => {\n          if (subcat.parent_cat == this.props.match.params.id) {\n            theseSubcats.push(subcat);\n          }\n        });\n        this.setState({\n          theseSubcats\n        });\n      }\n    }\n  }\n\n  render() {\n    this.getCatName();\n    console.log(this.state);\n    let catinfo = this.props.catinfo;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cat_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavigationBar, {\n      navinfo: this.navInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }), catinfo && catinfo.length > 0 ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, catinfo[0].title) : null, this.props.catitems ? this.renderGrid() : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    catitems: state.cats.catitems,\n    catinfo: state.cats.catinfo,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(CatView);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/traveller-collection/client/src/components/Categories/cat_view.js"],"names":["React","Component","connect","Link","getItemsByCat","getCatById","getAllSubCats","PanelView","NavigationBar","CatView","state","info","theseSubcats","navInfo","catTitle","catId","subCatTitle","subCatId","type","addDefaultImg","ev","newImg","target","src","renderItemsBySub","props","catitems","length","map","item","i","allsubcat","subcategory_ref","subcat_id","renderGrid","getCatName","catinfo","title","cat_id","componentDidMount","match","params","id","dispatch","componentWillReceiveProps","nextProps","tempArray","push","_id","caption","link","setState","componentDidUpdate","prevProps","prevState","subcats","subcat","parent_cat","render","console","log","mapStateToProps","cats"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n\nimport { getItemsByCat, getCatById, getAllSubCats } from '../../actions';\nimport PanelView from '../PanelView_DELETE/panel_view';\nimport NavigationBar from '../../widgetsUI/navigation';\n\n\nclass CatView  extends Component {\n    \n\n    componentDidMount() {\n        let catId = this.props.match.params.id\n        this.props.dispatch(getItemsByCat(catId));\n        this.props.dispatch(getCatById(catId));\n        this.props.dispatch(getAllSubCats(catId));\n\n    }\n\n\n    state = {\n        info: [],\n        theseSubcats: []\n    }\n\n    \n    navInfo = {\n        catTitle: null,\n        catId: null,\n        subCatTitle: null,\n        subCatId: null,\n        type: 'Categories'\n    }\n\n    componentWillReceiveProps(nextProps) {\n        \n        if (nextProps.catitems && nextProps.catitems.length) {\n            let tempArray = []\n            nextProps.catitems.map( (item, i) => (\n                    tempArray.push(\n                        {\n                            // src: `/images/sq_thumb/${item.omeka.omeka_id}.jpg`,\n                            src: `/images/items/${item._id}/sq_thumbnail/0.jpg`,\n                            caption: item.title,\n                            link: `/items/${item._id}` \n                        }\n                    )\n            ))\n            if (tempArray.length) {\n                this.setState({ info: [...tempArray]});\n            }\n        }\n        if (this.props.catinfo && this.props.catinfo.length) {\n            this.setState({\n                navInfo: {\n                    catTitle: this.props.catinfo[0].title,\n                    catId: this.props.catinfo[0].cat_id\n                }\n            })\n        }\n    }\n\n    addDefaultImg = (ev) => {\n        const newImg = '/images/default/default.jpg';\n        if (ev.target.src !== newImg) {\n            ev.target.src = newImg\n        }  \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.subcats !== prevProps.subcats) {\n\n            if (this.props.subcats && this.props.subcats.length) {\n                let theseSubcats = [];\n                \n                this.props.subcats.map( subcat => {\n                    if (subcat.parent_cat == this.props.match.params.id) {\n                        theseSubcats.push(subcat)\n                    }\n                })\n                this.setState({\n                    theseSubcats\n                })\n            }\n        }\n    }\n\n\n\n    renderItemsBySub = () => {\n        if (this.props.catitems && this.props.catitems.length) { \n            this.props.catitems.map ( (item, i) => {\n\n\n                // loop through available subcats\n                this.state.theseSubcats.map ( allsubcat => {\n                    if (item.subcategory_ref[0] == allsubcat.subcat_id) {\n                        return <p>Hi</p>\n                    } else {return <p>By</p>}\n                })\n\n                // loop through subcats of item\n\n                // if the first one is equal to \n\n\n                // <Link to={`/items/${item._id}`}key={i}>\n                //     <figure key={i}>\n                //         <img src={`/images/items/${item._id}/sq_thumbnail/0.jpg`} \n                //             alt={item.title} \n                //             onError={this.addDefaultImg} />\n                //         <figcaption>{item.title}</figcaption>\n                //     </figure>\n                // </Link>\n\n\n\n\n\n            })\n        } else {\n            return <p>There are no items in this category.</p> }\n    }\n\n\n\n    renderGrid = () => {\n        return(\n            <div className=\"cat_grid_row\">\n                <div className=\"cat_grid_column\">\n\n\n\n                    {this.renderItemsBySub()}\n\n                    \n\n                </div>\n            </div>\n    )}\n\n\n\n\n\n    getCatName = () => {\n        if (this.props.catinfo && this.props.catinfo.length) {\n            this.navInfo.catTitle = this.props.catinfo[0].title;\n            this.navInfo.catId = this.props.catinfo[0].cat_id;\n        }\n    }\n\n\n\n    render() {\n\n        this.getCatName();\n\n        console.log(this.state);\n\n        let catinfo = this.props.catinfo;\n\n        return (\n            <div className=\"main_view\">\n                <div className=\"cat_view\">\n                    <NavigationBar navinfo={this.navInfo}/>\n                    { catinfo && catinfo.length > 0? \n                        <h2 className=\"title\">{catinfo[0].title}</h2>\n                    :null\n                    }\n\n                    {/* <PanelView info={this.state.info}></PanelView> */}\n                    { this.props.catitems ?\n                        this.renderGrid()\n                    : null }\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        catitems: state.cats.catitems,\n        catinfo: state.cats.catinfo,\n        subcats: state.cats.subcats\n        \n    }\n}\n\n\nexport default connect(mapStateToProps)(CatView)"]},"metadata":{},"sourceType":"module"}