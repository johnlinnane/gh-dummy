{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js\";\nimport React, { Component } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nconst path = require('path');\n\nconst fs = window.require('fs');\n\nclass Sandbox extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numPages: null,\n      pageNumber: 1\n    };\n\n    this.onDocumentLoadSuccess = ({\n      numPages\n    }) => {\n      this.setState({\n        numPages\n      });\n    };\n  }\n\n  // isFileImage(file) {\n  //     // if (file['type'].split('/')[0] === 'image') {\n  //         console.log(file['type'])\n  //     // };\n  // }\n  fromDir(startPath, filter, callback) {\n    //console.log('Starting from dir '+startPath+'/');\n    if (!fs.existsSync(startPath)) {\n      console.log(\"no dir \", startPath);\n      return;\n    }\n\n    var files = fs.readdirSync(startPath);\n\n    for (var i = 0; i < files.length; i++) {\n      var filename = path.join(startPath, files[i]);\n      var stat = fs.lstatSync(filename);\n\n      if (stat.isDirectory()) {\n        this.fromDir(filename, filter, callback); //recurse\n      } else if (filter.test(filename)) callback(filename);\n    }\n\n    ;\n  }\n\n  render() {\n    const {\n      pageNumber,\n      numPages\n    } = this.state;\n    this.fromDir('./', /\\.html$/, function (filename) {\n      console.log('-- found: ', filename);\n    }); // const filename = \"/images/items/5eb4417bf2ff151113f3e178/original/0.jpg\";\n    // this.isFileImage(filename);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pdf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Document, {\n      file: \"/images/items/5eb4417bf2ff151113f3e178/original/0.pdf\",\n      onLoadSuccess: this.onDocumentLoadSuccess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Page, {\n      pageNumber: pageNumber,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, \"Page \", pageNumber, \" of \", numPages));\n  }\n\n}\n\nexport default Sandbox;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js"],"names":["React","Component","Document","Page","pdfjs","GlobalWorkerOptions","workerSrc","version","path","require","fs","window","Sandbox","state","numPages","pageNumber","onDocumentLoadSuccess","setState","fromDir","startPath","filter","callback","existsSync","console","log","files","readdirSync","i","length","filename","join","stat","lstatSync","isDirectory","test","render"],"mappings":";AAGA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,KAAzB,QAAsC,WAAtC;AACAA,KAAK,CAACC,mBAAN,CAA0BC,SAA1B,GAAuC,2CAA0CF,KAAK,CAACG,OAAQ,gBAA/F;;AAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGC,MAAM,CAACF,OAAP,CAAe,IAAf,CAAX;;AAIA,MAAMG,OAAN,SAAsBX,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAI5BY,KAJ4B,GAIpB;AACJC,MAAAA,QAAQ,EAAE,IADN;AAEJC,MAAAA,UAAU,EAAE;AAFR,KAJoB;;AAAA,SAS5BC,qBAT4B,GASJ,CAAC;AAAEF,MAAAA;AAAF,KAAD,KAAkB;AACtC,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACH,KAX2B;AAAA;;AAa5B;AACA;AACA;AACA;AACA;AAGAI,EAAAA,OAAO,CAACC,SAAD,EAAWC,MAAX,EAAkBC,QAAlB,EAA2B;AAE9B;AAEA,QAAI,CAACX,EAAE,CAACY,UAAH,CAAcH,SAAd,CAAL,EAA8B;AAC1BI,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBL,SAAtB;AACA;AACH;;AAED,QAAIM,KAAK,GAACf,EAAE,CAACgB,WAAH,CAAeP,SAAf,CAAV;;AACA,SAAI,IAAIQ,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,KAAK,CAACG,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,UAAIE,QAAQ,GAACrB,IAAI,CAACsB,IAAL,CAAUX,SAAV,EAAoBM,KAAK,CAACE,CAAD,CAAzB,CAAb;AACA,UAAII,IAAI,GAAGrB,EAAE,CAACsB,SAAH,CAAaH,QAAb,CAAX;;AACA,UAAIE,IAAI,CAACE,WAAL,EAAJ,EAAuB;AACnB,aAAKf,OAAL,CAAaW,QAAb,EAAsBT,MAAtB,EAA6BC,QAA7B,EADmB,CACqB;AAC3C,OAFD,MAGK,IAAID,MAAM,CAACc,IAAP,CAAYL,QAAZ,CAAJ,EAA2BR,QAAQ,CAACQ,QAAD,CAAR;AACnC;;AAAA;AACJ;;AAEDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEpB,MAAAA,UAAF;AAAcD,MAAAA;AAAd,QAA2B,KAAKD,KAAtC;AAEA,SAAKK,OAAL,CAAa,IAAb,EAAkB,SAAlB,EAA4B,UAASW,QAAT,EAAkB;AAC1CN,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBK,QAAzB;AACH,KAFD,EAHK,CAQL;AACA;;AAGA,wBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AACI,MAAA,IAAI,EAAC,uDADT;AAEI,MAAA,aAAa,EAAE,KAAKb,qBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIA,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAED,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,CADJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAASA,UAAT,UAAyBD,QAAzB,CAPJ,CADA;AAWH;;AA/D2B;;AAmEhC,eAAeF,OAAf","sourcesContent":["\n\n\nimport React, { Component } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n \nconst path = require('path'); \nconst fs = window.require('fs');\n\n\n\nclass Sandbox extends Component {\n\n\n\n    state = {\n        numPages: null,\n        pageNumber: 1,\n    }\n \n    onDocumentLoadSuccess = ({ numPages }) => {\n        this.setState({ numPages });\n    }\n \n    // isFileImage(file) {\n    //     // if (file['type'].split('/')[0] === 'image') {\n    //         console.log(file['type'])\n    //     // };\n    // }\n\n\n    fromDir(startPath,filter,callback){\n\n        //console.log('Starting from dir '+startPath+'/');\n    \n        if (!fs.existsSync(startPath)){\n            console.log(\"no dir \",startPath);\n            return;\n        }\n    \n        var files=fs.readdirSync(startPath);\n        for(var i=0;i<files.length;i++){\n            var filename=path.join(startPath,files[i]);\n            var stat = fs.lstatSync(filename);\n            if (stat.isDirectory()){\n                this.fromDir(filename,filter,callback); //recurse\n            }\n            else if (filter.test(filename)) callback(filename);\n        };\n    };\n\n    render() {\n        const { pageNumber, numPages } = this.state;\n\n        this.fromDir('./',/\\.html$/,function(filename){\n            console.log('-- found: ',filename);\n        });\n      \n\n        // const filename = \"/images/items/5eb4417bf2ff151113f3e178/original/0.jpg\";\n        // this.isFileImage(filename);\n\n    \n        return (\n        <div className=\"pdf\">\n            <Document\n                file=\"/images/items/5eb4417bf2ff151113f3e178/original/0.pdf\"\n                onLoadSuccess={this.onDocumentLoadSuccess}\n            >\n            <Page pageNumber={pageNumber} />\n            </Document>\n            <p>Page {pageNumber} of {numPages}</p>\n        </div>\n        );\n    }\n}\n\n\nexport default Sandbox;\n"]},"metadata":{},"sourceType":"module"}