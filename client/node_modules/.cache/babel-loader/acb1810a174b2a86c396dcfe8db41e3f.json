{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/traveller-collection/client/src/components/Sandbox/sandbox.js\";\nimport React from 'react';\n\nconst express = require('express');\n\nconst multer = require('multer');\n\nconst ejs = require('ejs');\n\nconst path = require('path');\n\nconst Sandbox = () => {\n  // Set The Storage Engine\n  const storage = multer.diskStorage({\n    destination: './public/uploads/',\n    filename: function (req, file, cb) {\n      cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\n    }\n  }); // Init Upload\n\n  const upload = multer({\n    storage: storage,\n    limits: {\n      fileSize: 1000000\n    },\n    fileFilter: function (req, file, cb) {\n      checkFileType(file, cb);\n    }\n  }).single('myImage'); // Check File Type\n\n  function checkFileType(file, cb) {\n    // Allowed ext\n    const filetypes = /jpeg|jpg|png|gif/; // Check ext\n\n    const extname = filetypes.test(path.extname(file.originalname).toLowerCase()); // Check mime\n\n    const mimetype = filetypes.test(file.mimetype);\n\n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb('Error: Images Only!');\n    }\n  } // Init app\n\n\n  const app = express(); // EJS\n\n  app.set('view engine', 'ejs'); // Public Folder\n\n  app.use(express.static('./public'));\n  app.get('/', (req, res) => res.render('index'));\n  app.post('/upload', (req, res) => {\n    upload(req, res, err => {\n      if (err) {\n        res.render('index', {\n          msg: err\n        });\n      } else {\n        if (req.file == undefined) {\n          res.render('index', {\n            msg: 'Error: No File Selected!'\n          });\n        } else {\n          res.render('index', {\n            msg: 'File Uploaded!',\n            file: `uploads/${req.file.filename}`\n          });\n        }\n      }\n    });\n  });\n  const port = 4000;\n  app.listen(port, () => console.log(`Server started on port ${port}`));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"File Upload\"), /*#__PURE__*/React.createElement(\"form\", {\n    action: \"/upload\",\n    method: \"POST\",\n    enctype: \"multipart/form-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"file-field input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"btn grey\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"File\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"myImage\",\n    type: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"file-path-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    class: \"file-path validate\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    class: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: \"<%= typeof file != 'undefined' ? file : '' %>\",\n    class: \"responsive-img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Sandbox;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/traveller-collection/client/src/components/Sandbox/sandbox.js"],"names":["React","express","require","multer","ejs","path","Sandbox","storage","diskStorage","destination","filename","req","file","cb","fieldname","Date","now","extname","originalname","upload","limits","fileSize","fileFilter","checkFileType","single","filetypes","test","toLowerCase","mimetype","app","set","use","static","get","res","render","post","err","msg","undefined","port","listen","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst express = require('express');\nconst multer = require('multer');\nconst ejs = require('ejs');\nconst path = require('path');\n\n\n\n\nconst Sandbox = () => {\n    // Set The Storage Engine\n    const storage = multer.diskStorage({\n    destination: './public/uploads/',\n    filename: function(req, file, cb){\n        cb(null,file.fieldname + '-' + Date.now() + path.extname(file.originalname));\n    }\n    });\n\n    // Init Upload\n    const upload = multer({\n    storage: storage,\n    limits:{fileSize: 1000000},\n    fileFilter: function(req, file, cb){\n        checkFileType(file, cb);\n    }\n    }).single('myImage');\n\n    // Check File Type\n    function checkFileType(file, cb){\n    // Allowed ext\n    const filetypes = /jpeg|jpg|png|gif/;\n    // Check ext\n    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());\n    // Check mime\n    const mimetype = filetypes.test(file.mimetype);\n\n    if(mimetype && extname){\n        return cb(null,true);\n    } else {\n        cb('Error: Images Only!');\n    }\n    }\n\n    // Init app\n    const app = express();\n\n    // EJS\n    app.set('view engine', 'ejs');\n\n    // Public Folder\n    app.use(express.static('./public'));\n\n    app.get('/', (req, res) => res.render('index'));\n\n    app.post('/upload', (req, res) => {\n    upload(req, res, (err) => {\n        if(err){\n        res.render('index', {\n            msg: err\n        });\n        } else {\n        if(req.file == undefined){\n            res.render('index', {\n            msg: 'Error: No File Selected!'\n            });\n        } else {\n            res.render('index', {\n            msg: 'File Uploaded!',\n            file: `uploads/${req.file.filename}`\n            });\n        }\n        }\n    });\n    });\n\n    const port = 4000;\n\n    app.listen(port, () => console.log(`Server started on port ${port}`));\n\n    return (\n        <div class=\"container\">\n            <h1>File Upload</h1>\n            {/* <%= typeof msg != 'undefined' ? msg : '' %> */}\n            <form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n            <div class=\"file-field input-field\">\n                <div class=\"btn grey\">\n                <span>File</span>\n                <input name=\"myImage\" type=\"file\" />\n                </div>\n                <div class=\"file-path-wrapper\">\n                <input class=\"file-path validate\" type=\"text\" />\n                </div>\n            </div>\n            <button type=\"submit\" class=\"btn\">Submit</button>\n            </form>\n            <br />\n            <img src=\"<%= typeof file != 'undefined' ? file : '' %>\" class=\"responsive-img\"></img>\n        </div>\n    )\n\n\n}\n\nexport default Sandbox;"]},"metadata":{},"sourceType":"module"}