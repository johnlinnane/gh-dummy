{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { getAllCats } from '../../actions';\n\nclass Sandbox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      catOptions: [// { value: '1', label: 'Geography' },\n        // { value: '2', label: 'History' },\n        // { value: '3', label: 'Literature' },\n        // { value: '4', label: 'Photography' },\n        // { value: '5', label: 'Music' },\n        // { value: '6', label: 'Theatre' },\n        // { value: '7', label: 'Visual Arts' },\n        // { value: '8', label: 'Language' },\n        // { value: '9', label: 'Heritage' },\n        // { value: '10', label: 'Politics' },\n        // { value: '11', label: 'Film' },\n        // { value: '12', label: 'Radio' },\n        // { value: '13', label: 'Traveller Organisations' }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getAllCats());\n    this.updateCatState();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let newCatOptions = [];\n\n    if (nextProps.cats && nextProps.cats.length) {\n      this.props.cats.map((cat, i) => {\n        newCatOptions.push({\n          value: cat.cat_id,\n          label: cat.title\n        });\n      });\n      return {\n        catOptions: newCatOptions\n      };\n    }\n  } // updateCatState() {\n  //     let newCatOptions = [];\n  //     if (this.props.cats && this.props.cats.length) {\n  //         this.props.cats.map( (cat, i) => {\n  //             newCatOptions.push({\n  //                 value: cat.cat_id,\n  //                 label: cat.title\n  //             })\n  //         })\n  //         this.setState({\n  //             catOptions: newCatOptions\n  //         })\n  //     }\n  // }\n\n\n  render() {\n    console.log(this.state);\n    const catOptions = this.state.catOptions;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \"Categories:\"), /*#__PURE__*/React.createElement(Select, {\n      defaultValue: [catOptions[2], catOptions[3]],\n      isMulti: true,\n      name: \"colors\",\n      options: catOptions,\n      className: \"basic-multi-select\",\n      classNamePrefix: \"select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, this.props.cats && this.props.cats.length ? this.props.cats.map((cat, i) => /*#__PURE__*/React.createElement(\"p\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, cat.title)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 23\n      }\n    }, \"no cats yet\")));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  // console.log(state); \n  return {\n    cats: state.cats.cats\n  };\n}\n\nexport default connect(mapStateToProps)(Sandbox);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js"],"names":["React","connect","Select","getAllCats","Sandbox","Component","state","catOptions","componentDidMount","props","dispatch","updateCatState","getDerivedStateFromProps","nextProps","prevState","newCatOptions","cats","length","map","cat","i","push","value","cat_id","label","title","render","console","log","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SAASC,UAAT,QAA2B,eAA3B;;AAKA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAElCC,KAFkC,GAE1B;AACJC,MAAAA,UAAU,EAAE,CACR;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdQ;AADR,KAF0B;AAAA;;AAqBlCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,QAAX,CAAoBP,UAAU,EAA9B;AACA,SAAKQ,cAAL;AACH;;AAGD,SAAOC,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAElD,QAAIC,aAAa,GAAG,EAApB;;AAEA,QAAIF,SAAS,CAACG,IAAV,IAAkBH,SAAS,CAACG,IAAV,CAAeC,MAArC,EAA6C;AAEzC,WAAKR,KAAL,CAAWO,IAAX,CAAgBE,GAAhB,CAAqB,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC7BL,QAAAA,aAAa,CAACM,IAAd,CAAmB;AACfC,UAAAA,KAAK,EAAEH,GAAG,CAACI,MADI;AAEfC,UAAAA,KAAK,EAAEL,GAAG,CAACM;AAFI,SAAnB;AAIH,OALD;AAQA,aAAO;AACHlB,QAAAA,UAAU,EAAEQ;AADT,OAAP;AAGH;AAGJ,GA/CiC,CAiDlC;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEAW,EAAAA,MAAM,GAAG;AAELC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,KAAjB;AAEA,UAAMC,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAA9B;AAKA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAGI,oBAAC,MAAD;AACI,MAAA,YAAY,EAAE,CAACA,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,CADlB;AAEI,MAAA,OAAO,MAFX;AAGI,MAAA,IAAI,EAAC,QAHT;AAII,MAAA,OAAO,EAAEA,UAJb;AAKI,MAAA,SAAS,EAAC,oBALd;AAMI,MAAA,eAAe,EAAC,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKE,KAAL,CAAWO,IAAX,IAAmB,KAAKP,KAAL,CAAWO,IAAX,CAAgBC,MAAnC,GACG,KAAKR,KAAL,CAAWO,IAAX,CAAgBE,GAAhB,CAAqB,CAACC,GAAD,EAAMC,CAAN,kBACjB;AAAG,MAAA,GAAG,EAAEA,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,GAAG,CAACM,KAAhB,CADJ,CADH,gBAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALN,CAbJ,CADJ;AAwBH;;AAtGiC;;AAyGrC;;AAGD,SAASI,eAAT,CAAyBvB,KAAzB,EAAgC;AAC5B;AACA,SAAO;AACHU,IAAAA,IAAI,EAACV,KAAK,CAACU,IAAN,CAAWA;AADb,GAAP;AAGH;;AAID,eAAef,OAAO,CAAC4B,eAAD,CAAP,CAAyBzB,OAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\n\nimport { getAllCats } from '../../actions';\n\n\n\n \nclass Sandbox extends React.Component {\n    \n    state = {\n        catOptions: [\n            // { value: '1', label: 'Geography' },\n            // { value: '2', label: 'History' },\n            // { value: '3', label: 'Literature' },\n            // { value: '4', label: 'Photography' },\n            // { value: '5', label: 'Music' },\n\n            // { value: '6', label: 'Theatre' },\n            // { value: '7', label: 'Visual Arts' },\n            // { value: '8', label: 'Language' },\n            // { value: '9', label: 'Heritage' },\n            // { value: '10', label: 'Politics' },\n            // { value: '11', label: 'Film' },\n            // { value: '12', label: 'Radio' },\n            // { value: '13', label: 'Traveller Organisations' }\n        ]\n    }\n\n    componentDidMount() {\n        this.props.dispatch(getAllCats());\n        this.updateCatState();\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n    \n        let newCatOptions = [];\n\n        if (nextProps.cats && nextProps.cats.length) {\n\n            this.props.cats.map( (cat, i) => {\n                newCatOptions.push({\n                    value: cat.cat_id,\n                    label: cat.title\n                })\n            })\n\n\n            return {\n                catOptions: newCatOptions\n            }\n        }\n    \n    \n    }\n\n    // updateCatState() {\n\n    //     let newCatOptions = [];\n\n    //     if (this.props.cats && this.props.cats.length) {\n\n    //         this.props.cats.map( (cat, i) => {\n    //             newCatOptions.push({\n    //                 value: cat.cat_id,\n    //                 label: cat.title\n    //             })\n    //         })\n\n\n    //         this.setState({\n    //             catOptions: newCatOptions\n    //         })\n    //     }\n    // }\n    \n    render() {\n\n        console.log(this.state)\n\n        const catOptions = this.state.catOptions;\n\n\n        \n\n        return (\n            <div>\n                <h2>Categories:</h2>\n\n                <Select\n                    defaultValue={[catOptions[2], catOptions[3]]}\n                    isMulti\n                    name=\"colors\"\n                    options={catOptions}\n                    className=\"basic-multi-select\"\n                    classNamePrefix=\"select\"\n                />\n\n\n                <div>\n                    {this.props.cats && this.props.cats.length ?\n                        this.props.cats.map( (cat, i) => (\n                            <p key={i}>{cat.title}</p>\n                        ))\n                    : <p>no cats yet</p>}\n                </div>\n            \n            </div>\n        );\n    }\n\n\n};\n \n\nfunction mapStateToProps(state) {\n    // console.log(state); \n    return {\n        cats:state.cats.cats\n    }\n}\n\n\n\nexport default connect(mapStateToProps)(Sandbox);\n\n"]},"metadata":{},"sourceType":"module"}