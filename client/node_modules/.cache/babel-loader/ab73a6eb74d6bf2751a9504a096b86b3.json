{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/traveller-collection/client/src/components/AdminSection/admin_cat.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport { getAllColls, getAllCats, getAllSubCats } from '../../actions';\nimport { addCat, deleteCat, addSubcat, deleteSubcat, updateCat, updateSubcat } from '../../actions';\n\nclass AdminCat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formdata: {\n        cat: {\n          _id: this.props.chosenCatInfo._id || null,\n          title: this.props.chosenCatInfo.title || null,\n          description: this.props.chosenCatInfo.description || null\n        },\n        subcats: [],\n        // presentNewSubcat: {\n        //     title: null,\n        //     description: null,\n        //     parent_cat: this.props.chosenCatInfo._id,\n        //     isNew: true\n        // },\n        // newSubcats: []\n        newSubcat: {\n          title: null,\n          description: null,\n          parent_cat: this.props.chosenCatInfo._id\n        }\n      }\n    };\n\n    this.addDefaultImg = ev => {\n      const newImg = '/images/default/default.jpg';\n\n      if (ev.target.src !== newImg) {\n        ev.target.src = newImg;\n      }\n    };\n\n    this.handleInput = (event, type, field, subcatId) => {\n      // make a copy of formdata\n      const newFormdata = { ...this.state.formdata\n      }; // console.log(newFormdata);\n\n      if (type === 'cat') {\n        if (field === 'cat_title') {\n          newFormdata.cat.title = event.target.value;\n        } else if (field === 'cat_description') {\n          newFormdata.cat.description = event.target.value;\n        }\n      }\n\n      if (type === 'subcat') {\n        this.state.formdata.subcats.map((subcat, i) => {\n          if (subcat._id === subcatId) {\n            if (field === 'title') {\n              newFormdata.subcats[i].title = event.target.value;\n            } else if (field === 'description') {\n              newFormdata.subcats[i].description = event.target.value;\n            }\n\n            newFormdata.subcats[i].isModified = true;\n          }\n        });\n      }\n\n      if (type === 'add_subcat') {\n        if (field === 'subcat_title') {\n          newFormdata.newSubcat.title = event.target.value;\n        }\n\n        if (field === 'subcat_desc') {\n          newFormdata.newSubcat.description = event.target.value;\n        }\n      } // copy it back to state\n\n\n      this.setState({\n        formdata: newFormdata\n      });\n      console.log(newFormdata);\n    };\n\n    this.deleteSubcat = (e, id, isNew) => {\n      this.props.dispatch(deleteSubcat(id));\n    };\n\n    this.deleteCat = (e, id) => {\n      this.props.dispatch(deleteCat(id));\n    };\n\n    this.submitForm = e => {\n      e.preventDefault(); // console.log({...this.state.formdata.cat});\n\n      console.log(this.state.formdata.cat);\n      this.props.dispatch(updateCat(this.state.formdata.cat));\n      this.state.formdata.subcats.map(subcat => {\n        if (subcat.isModified) {\n          // console.log(subcat)\n          this.props.dispatch(updateSubcat(subcat));\n        }\n      });\n\n      if (this.state.formdata.newSubcat.title) {\n        const newSubcat = this.state.formdata.newSubcat;\n        console.log(newSubcat);\n        this.props.dispatch(addSubcat(newSubcat));\n      } // this.props.history.push(`/admin`)\n\n    };\n\n    this.cancel = () => {\n      this.props.history.push(`/admin`);\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getAllColls());\n    this.props.dispatch(getAllCats());\n    this.props.dispatch(getAllSubCats());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.subcats && this.props.subcats.length) {\n      if (this.props.subcats != prevProps.subcats) {\n        let tempSubcats = [];\n\n        if (this.props.subcats) {\n          this.props.subcats.map((subcat, i) => {\n            if (subcat.parent_cat == this.props.chosenCatInfo._id) {\n              tempSubcats.push(subcat);\n            }\n          });\n        }\n\n        this.setState({\n          formdata: { ...this.state.formdata,\n            subcats: tempSubcats\n          }\n        });\n      }\n    }\n  }\n\n  render() {\n    // console.log(this.state)\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }\n    }, this.props.chosenCatInfo ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 41\n      }\n    }, \"Title\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: this.props.chosenCatInfo.title,\n      defaultValue: this.props.chosenCatInfo.title,\n      onChange: event => this.handleInput(event, 'cat', 'cat_title'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 41\n      }\n    }, \"Description\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      placeholder: \"Enter category description\",\n      defaultValue: this.props.chosenCatInfo.description,\n      onChange: event => this.handleInput(event, 'cat', 'cat_description'),\n      rows: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"change_cat_img\",\n      src: `/images/cover_img_cat/${this.props.chosenCatInfo._id}.jpg`,\n      onError: this.addDefaultImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 37\n      }\n    }, \"Change image\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 41\n      }\n    }, \"Sub-categories\"))), this.state.formdata.subcats.length ? this.state.formdata.subcats.map((subcat, i) => subcat.parent_cat == this.props.chosenCatInfo._id ? /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: subcat.title,\n      defaultValue: subcat.title,\n      onChange: event => this.handleInput(event, 'subcat', 'title', subcat._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Description\",\n      defaultValue: subcat.description,\n      onChange: event => this.handleInput(event, 'subcat', 'description', subcat._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        if (window.confirm('Are you sure you want to remove this subcategory?')) this.deleteSubcat(e, subcat._id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 61\n      }\n    }, \"Remove\"))) : null) : null, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Add new subcategory\",\n      defaultValue: null,\n      onChange: event => this.handleInput(event, 'add_subcat', 'subcat_title'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Description\",\n      defaultValue: null,\n      onChange: event => this.handleInput(event, 'add_subcat', 'subcat_desc'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 61\n      }\n    }))))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: e => {\n        if (window.confirm('Are you sure you wish to delete this category?')) this.deleteCat(e, this.props.chosenCatInfo._id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 29\n      }\n    }, \"Delete Category\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.cancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 29\n      }\n    }, \"Save Changes\"))) : null);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    colls: state.collections.colls,\n    cats: state.cats.cats,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(AdminCat));","map":{"version":3,"sources":["/Users/johnlinnane/DEV/traveller-collection/client/src/components/AdminSection/admin_cat.js"],"names":["React","Component","withRouter","connect","Tab","Tabs","TabList","TabPanel","getAllColls","getAllCats","getAllSubCats","addCat","deleteCat","addSubcat","deleteSubcat","updateCat","updateSubcat","AdminCat","state","formdata","cat","_id","props","chosenCatInfo","title","description","subcats","newSubcat","parent_cat","addDefaultImg","ev","newImg","target","src","handleInput","event","type","field","subcatId","newFormdata","value","map","subcat","i","isModified","setState","console","log","e","id","isNew","dispatch","submitForm","preventDefault","cancel","history","push","componentDidMount","componentDidUpdate","prevProps","length","tempSubcats","render","window","confirm","mapStateToProps","colls","collections","cats"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport { connect } from 'react-redux';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\n\nimport { getAllColls, getAllCats, getAllSubCats  } from '../../actions';\n\nimport { addCat, deleteCat, addSubcat, deleteSubcat, updateCat, updateSubcat  }  from '../../actions';\n\nclass AdminCat extends Component {\n\n\n    state = {\n        formdata: {\n            cat: {\n                _id: this.props.chosenCatInfo._id || null,\n                title: this.props.chosenCatInfo.title || null,\n                description: this.props.chosenCatInfo.description || null\n\n            },\n            subcats: [],\n            // presentNewSubcat: {\n            //     title: null,\n            //     description: null,\n            //     parent_cat: this.props.chosenCatInfo._id,\n            //     isNew: true\n            // },\n            // newSubcats: []\n\n            newSubcat: {\n                title: null,\n                description: null,\n                parent_cat: this.props.chosenCatInfo._id\n        \n            }\n            \n        }\n    }\n\n    componentDidMount() {\n        this.props.dispatch(getAllColls())\n        this.props.dispatch(getAllCats());\n        this.props.dispatch(getAllSubCats());\n    }\n\n    componentDidUpdate(prevProps) {\n    \n\n        if (this.props.subcats && this.props.subcats.length) {\n            if (this.props.subcats != prevProps.subcats) {\n                let tempSubcats = []\n\n                if (this.props.subcats) {\n                    this.props.subcats.map( (subcat, i) => {\n                        if (subcat.parent_cat == this.props.chosenCatInfo._id) {\n                            tempSubcats.push(subcat)\n                        }\n                    })\n                }\n                \n                this.setState({\n                    formdata: {\n                        ...this.state.formdata,\n                        subcats: tempSubcats\n                    }\n                })\n            }\n        }\n    \n    }\n\n    addDefaultImg = (ev) => {\n        const newImg = '/images/default/default.jpg';\n        if (ev.target.src !== newImg) {\n            ev.target.src = newImg\n        }  \n    }\n\n    handleInput = (event, type, field, subcatId) => {\n\n\n        // make a copy of formdata\n        const newFormdata = {\n            ...this.state.formdata\n        }\n\n\n        // console.log(newFormdata);\n        if (type === 'cat') {\n            if (field === 'cat_title') {\n                newFormdata.cat.title = event.target.value;\n\n            } else if (field === 'cat_description') {\n                newFormdata.cat.description = event.target.value;\n            } \n        }\n\n        if (type === 'subcat') {\n            this.state.formdata.subcats.map( (subcat, i ) => {\n                if (subcat._id === subcatId) {\n                    if (field === 'title') {\n                        newFormdata.subcats[i].title = event.target.value;\n                    } else if (field === 'description') {\n                        newFormdata.subcats[i].description = event.target.value;\n                    }\n                    newFormdata.subcats[i].isModified = true;\n                }\n            })\n        }\n\n        if (type === 'add_subcat') {\n            \n            if (field === 'subcat_title') {\n                newFormdata.newSubcat.title = event.target.value;\n            }  if (field === 'subcat_desc') {\n                newFormdata.newSubcat.description = event.target.value;\n            }\n\n\n            \n\n        }\n\n\n        // copy it back to state\n        this.setState({\n            formdata: newFormdata\n\n        })\n        console.log(newFormdata);\n    }\n\n\n    // addSubcat = () => {\n        \n    //     if (this.state.formdata.presentNewSubcat.title) {\n    //         this.setState({\n    //             formdata: {\n    //                 ...this.state.formdata,\n    //                 subcats: [\n    //                     ...this.state.formdata.subcats,\n    //                     this.state.formdata.presentNewSubcat\n    //                 ]\n    //             }\n    //         })\n\n\n    //         this.setState({\n                \n    //                 presentNewSubcat: {\n    //                     title: null,\n    //                     description: null,\n    //                     parent_cat: this.props.chosenCatInfo._id,\n    //                     isNew: true\n    //                 }\n    //         })\n    //     }\n\n        \n        // if (this.state.formdata.newSubcat.title) {\n        //     const newSubcat = this.state.formdata.newSubcat;\n        //     console.log(newSubcat);\n        //     // this.props.dispatch(addSubcat(\n        //     //     newSubcat\n        //     // ))\n\n        //     let refreshedFormdata = {\n        //         ...this.state.formdata,\n        //             subcats: [\n        //                 ...this.state.formdata.subcats,\n        //                 newSubcat\n        //             ]\n        //     }\n\n        //     this.setState({\n        //         formdata: refreshedFormdata,\n        //         newSubcat: null\n                \n        //     })\n        // }\n    // }\n\n\n    deleteSubcat = (e, id, isNew) => {\n        this.props.dispatch(deleteSubcat(id));\n\n    }\n\n    deleteCat = (e, id) => {\n        this.props.dispatch(deleteCat(id));\n\n        \n\n    }\n\n\n\n    submitForm = (e) => {\n        e.preventDefault();\n        // console.log({...this.state.formdata.cat});\n        console.log(this.state.formdata.cat);\n\n        this.props.dispatch(updateCat(\n                this.state.formdata.cat\n            \n        ))\n\n        this.state.formdata.subcats.map( (subcat) =>{\n            if (subcat.isModified) {\n                // console.log(subcat)\n                this.props.dispatch(updateSubcat(\n                    subcat\n                ))\n            }\n        })\n\n        \n        if (this.state.formdata.newSubcat.title) {\n            const newSubcat = this.state.formdata.newSubcat;\n            console.log(newSubcat);\n            this.props.dispatch(addSubcat(\n                newSubcat\n            ))\n        }\n\n\n        \n        // this.props.history.push(`/admin`)\n    }\n\n    cancel = () => {\n        this.props.history.push(`/admin`)\n    }\n\n\n\n    render() {\n\n\n        // console.log(this.state)\n        return (\n            <div>\n                { this.props.chosenCatInfo ? \n                    <div>\n                        <form onSubmit={this.submitForm}>\n                            <table>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <h2>Title</h2>\n                                    </td>\n                                    <td>\n\n                                        <input\n                                            type=\"text\"\n                                            placeholder={this.props.chosenCatInfo.title}\n                                            defaultValue={this.props.chosenCatInfo.title} \n                                            onChange={(event) => this.handleInput(event, 'cat', 'cat_title')}\n                                        />\n\n\n\n\n                                    </td>\n                                </tr>\n\n\n                                <tr>\n                                    <td>\n                                        <h2>Description</h2>\n                                    </td>\n                                    <td>\n                                        <textarea\n                                            type=\"text\"\n                                            placeholder=\"Enter category description\"\n                                            defaultValue={this.props.chosenCatInfo.description} \n                                            onChange={(event) => this.handleInput(event, 'cat', 'cat_description')}\n                                            rows={6}\n                                        />\n                                    </td>\n                                </tr>\n\n\n                                <tr>\n                                    <td>\n                                        <img className=\"change_cat_img\" src={`/images/cover_img_cat/${this.props.chosenCatInfo._id}.jpg`} onError={this.addDefaultImg}/>\n                                    </td>\n                                    <td>\n                                        Change image\n                                    </td>\n                                </tr>\n\n                                <tr>\n                                    <td>\n                                        <h3>Sub-categories</h3>\n                                    </td>\n                                </tr>\n\n\n                                { this.state.formdata.subcats.length ?\n                                    this.state.formdata.subcats.map( (subcat, i) => (\n                                        \n                                                subcat.parent_cat == this.props.chosenCatInfo._id ? \n                                                    <tr key={i}>\n                                                        <td>\n\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder={subcat.title}\n                                                                defaultValue={subcat.title} \n                                                                onChange={(event) => this.handleInput(event, 'subcat', 'title', subcat._id)}\n                                                            />\n\n\n\n\n                                                        </td>\n\n                                                        <td>\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Description\"\n                                                                defaultValue={subcat.description} \n                                                                onChange={(event) => this.handleInput(event, 'subcat', 'description', subcat._id)}\n                                                            />\n                                                        </td>\n                                                        <td>\n                                                            <button \n                                                                type=\"button\" \n                                                                onClick={(e) => { if (window.confirm('Are you sure you want to remove this subcategory?')) this.deleteSubcat(e, subcat._id) } \n                                                            }>  \n                                                                Remove\n                                                            </button>\n\n                                                        </td>\n                                                    </tr>\n                                                \n                                                : null \n                                            \n                                        \n                                    ) )    \n                                : null }\n                                <tr >\n                                                        <td>\n\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Add new subcategory\"\n                                                                defaultValue={null} \n                                                                onChange={(event) => this.handleInput(event, 'add_subcat', 'subcat_title')}\n                                                            />\n\n\n\n\n                                                        </td>\n\n                                                        <td>\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Description\"\n                                                                defaultValue={null} \n                                                                onChange={(event) => this.handleInput(event, 'add_subcat', 'subcat_desc')}\n                                                            />\n                                                        </td>\n\n\n                                                        {/* <td>\n                                                            <button type=\"button\" onClick={this.addSubcat}>+</button>\n\n                                                        </td> */}\n                                                    </tr>\n                            </tbody>\n                            </table>\n                            <button type=\"button\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this category?')) this.deleteCat(e, this.props.chosenCatInfo._id) } }>Delete Category</button>\n                            <button type=\"button\" onClick={this.cancel}>Cancel</button>\n                            <button type=\"submit\">Save Changes</button>\n                        </form>\n                        \n                    </div>\n                : null }\n            </div>\n    \n                \n\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        colls:state.collections.colls,\n        cats:state.cats.cats,\n        subcats:state.cats.subcats\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(AdminCat));\n"]},"metadata":{},"sourceType":"module"}