{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; // import Select from 'react-select';\n\nimport CreatableSelect from 'react-select/creatable';\nimport { getAllCats, getItemById, updateItem } from '../../actions';\n\nclass Sandbox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      catOptions: [],\n      selected: [],\n      savedCats: [],\n      savedTags: [],\n      updated: true,\n      tagOptions: [{\n        value: 'chocolate',\n        label: 'Chocolate'\n      }, {\n        value: 'strawberry',\n        label: 'Strawberry'\n      }, {\n        value: 'vanilla',\n        label: 'Vanilla'\n      }]\n    };\n\n    this.handleChange = newValue => {// if (newValue && newValue.length) {\n      //     this.setState({ \n      //         savedTags: [...newValue]\n      //     });\n      // // newValue is not an array if empty\n      // } else {\n      //     this.setState({ \n      //         savedTags: []\n      //     });\n      // }\n    };\n  }\n\n  componentDidMount() {\n    // this.props.dispatch(getAllCats());\n    this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    console.log(nextProps.items.item); // let newCatOptions = prevState.catOptions;\n    // // let newSelected = prevState.selected;\n    // let newTags = prevState.tagOptions\n    // // // check if props have arrived\n    // // if (nextProps.cats && nextProps.cats.length) {\n    // //     // create list of all categories and ids\n    // //     nextProps.cats.map( (cat, i) => {\n    // //         newCatOptions.push({\n    // //             value: cat.cat_id,\n    // //             label: cat.title\n    // //         })\n    // //     })\n    // // check if tags have arrived\n    // if (nextProps.tags && nextProps.tags.length) {\n    //     // create list of all categories and ids\n    //     nextProps.tags.map( (tag, i) => {\n    //         newTags.push({\n    //             value: tag.id,\n    //             label: tag.text\n    //         })\n    //     })\n    //     // chack for any categories already set\n    //     if (nextProps.items && nextProps.items.item && nextProps.items.item.tags && nextProps.items.item.tags.length ) {\n    //         nextProps.items.item.tags.map( (tag, i) => {\n    //             // let catTitle;\n    //             // nextProps.cats.map( (cat, i) => {\n    //             //     if (cat.cat_id == catref) {\n    //             //         catTitle = cat.title;\n    //             //         newSelected.push({\n    //             //             value: catref,\n    //             //             label: catTitle\n    //             //         })\n    //             //     }\n    //             // })\n    //             newTags.push({\n    //                 value: tag.id,\n    //                 label: tag.text\n    //             }\n    //         })\n    //     }\n    // }\n    // return {\n    //     // catOptions: newCatOptions,\n    //     // selected: newSelected,\n    //     tagOptions: newTags,\n    //     updated: true\n    // }\n  }\n\n  // onClickHandler = () => {\n  //     let updateData = {\n  //         _id: '5edcbc5027c3271205b2360a',\n  //         tags: []\n  //     };\n  //     if (this.state.savedTags && this.state.savedTags.length) {\n  //         this.state.savedTags.map( tag => {\n  //             updateData.tags.push(tag);\n  //         })\n  //     } \n  //     this.props.dispatch(updateItem({\n  //         ...updateData\n  //     }))\n  // }\n  render() {\n    // const catOptions = this.state.catOptions;\n    const tagOptions = this.state.tagOptions;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, this.props.items.item && this.props.items.item.title ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, this.props.items.item.title) : null, this.state.updated ? /*#__PURE__*/React.createElement(CreatableSelect, {\n      isMulti: true,\n      onChange: this.handleChange,\n      options: tagOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }) // <Select\n    //     defaultValue={this.state.selected}\n    //     isMulti\n    //     name=\"colors\"\n    //     options={catOptions}\n    //     className=\"basic-multi-select\"\n    //     classNamePrefix=\"select\"\n    //     onChange={this.handleChange}\n    // />\n    : null, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    items: state.items,\n    cats: state.cats.cats\n  };\n}\n\nexport default connect(mapStateToProps)(Sandbox);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js"],"names":["React","connect","CreatableSelect","getAllCats","getItemById","updateItem","Sandbox","Component","state","catOptions","selected","savedCats","savedTags","updated","tagOptions","value","label","handleChange","newValue","componentDidMount","props","dispatch","getDerivedStateFromProps","nextProps","prevState","console","log","items","item","render","title","onClickHandler","mapStateToProps","cats"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n// import Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\n\nimport { getAllCats, getItemById, updateItem } from '../../actions';\n\n\nclass Sandbox extends React.Component {\n    \n    state = {\n        catOptions: [],\n        selected: [],\n        savedCats: [],\n        savedTags: [],\n        updated: true,\n        \n        tagOptions: [\n            { value: 'chocolate', label: 'Chocolate' },\n            { value: 'strawberry', label: 'Strawberry' },\n            { value: 'vanilla', label: 'Vanilla' }\n        ]\n\n    }\n\n    componentDidMount() {\n        // this.props.dispatch(getAllCats());\n        this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        console.log(nextProps.items.item);\n\n        \n        // let newCatOptions = prevState.catOptions;\n        // // let newSelected = prevState.selected;\n\n        // let newTags = prevState.tagOptions\n\n        // // // check if props have arrived\n        // // if (nextProps.cats && nextProps.cats.length) {\n        // //     // create list of all categories and ids\n        // //     nextProps.cats.map( (cat, i) => {\n        // //         newCatOptions.push({\n        // //             value: cat.cat_id,\n        // //             label: cat.title\n        // //         })\n        // //     })\n\n        // // check if tags have arrived\n        // if (nextProps.tags && nextProps.tags.length) {\n        //     // create list of all categories and ids\n        //     nextProps.tags.map( (tag, i) => {\n        //         newTags.push({\n        //             value: tag.id,\n        //             label: tag.text\n        //         })\n        //     })\n\n\n\n\n\n        //     // chack for any categories already set\n        //     if (nextProps.items && nextProps.items.item && nextProps.items.item.tags && nextProps.items.item.tags.length ) {\n\n        //         nextProps.items.item.tags.map( (tag, i) => {\n\n        //             // let catTitle;\n\n\n\n        //             // nextProps.cats.map( (cat, i) => {\n        //             //     if (cat.cat_id == catref) {\n        //             //         catTitle = cat.title;\n\n        //             //         newSelected.push({\n        //             //             value: catref,\n        //             //             label: catTitle\n        //             //         })\n        //             //     }\n        //             // })\n\n\n        //             newTags.push({\n        //                 value: tag.id,\n        //                 label: tag.text\n        //             }\n        //         })\n                \n        //     }\n        // }\n        // return {\n        //     // catOptions: newCatOptions,\n        //     // selected: newSelected,\n        //     tagOptions: newTags,\n        //     updated: true\n        // }\n    }\n\n\n    handleChange = (newValue) => {\n        // if (newValue && newValue.length) {\n        //     this.setState({ \n        //         savedTags: [...newValue]\n        //     });\n        // // newValue is not an array if empty\n        // } else {\n        //     this.setState({ \n        //         savedTags: []\n        //     });\n        // }\n\n\n    };\n\n    // onClickHandler = () => {\n\n    //     let updateData = {\n    //         _id: '5edcbc5027c3271205b2360a',\n    //         tags: []\n    //     };\n\n    //     if (this.state.savedTags && this.state.savedTags.length) {\n    //         this.state.savedTags.map( tag => {\n    //             updateData.tags.push(tag);\n    //         })\n    //     } \n \n    //     this.props.dispatch(updateItem({\n    //         ...updateData\n    //     }))\n    // }\n    \n    render() {\n\n        // const catOptions = this.state.catOptions;\n        const tagOptions = this.state.tagOptions;\n\n        return (\n            <div>\n                {this.props.items.item && this.props.items.item.title ?\n                    <h2>{this.props.items.item.title}</h2>\n                : null }\n\n                {this.state.updated ?\n\n                    <CreatableSelect\n                        isMulti\n                        onChange={this.handleChange}\n                        options={tagOptions}\n                    />\n\n                    // <Select\n                    //     defaultValue={this.state.selected}\n                    //     isMulti\n                    //     name=\"colors\"\n                    //     options={catOptions}\n                    //     className=\"basic-multi-select\"\n                    //     classNamePrefix=\"select\"\n                    //     onChange={this.handleChange}\n                    // />\n                : null}\n\n                <button type=\"button\"onClick={this.onClickHandler}>Submit</button> \n            \n            </div>\n        );\n    }\n};\n \n\nfunction mapStateToProps(state) {\n    return {\n        items:state.items,\n        cats:state.cats.cats\n    }\n}\n\nexport default connect(mapStateToProps)(Sandbox);\n\n"]},"metadata":{},"sourceType":"module"}