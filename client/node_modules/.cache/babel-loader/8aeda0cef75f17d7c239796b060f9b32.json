{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/traveller-collection/client/src/containers/Admin/edit_item_2_sel.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions';\nimport { getAllColls, getAllCats, getAllSubCats } from '../../actions';\n\nclass EditItemSel extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataToUpdate: {\n        _id: null,\n        category_ref: [],\n        subcategory_ref: [],\n        tags: [],\n        collection_id: ''\n      },\n      catsConverted: null,\n      subcatsConverted: null,\n      collConverted: null,\n      tagsConverted: null,\n      collList: null,\n      catList: null,\n      subcatList: [],\n      subcatsInitialised: false\n    };\n\n    this.deletePost = () => {\n      this.props.dispatch(deleteItem(this.state.formdata._id));\n      this.props.history.push('/user/all-items');\n    };\n\n    this.redirectUser = url => {\n      setTimeout(() => {\n        this.props.history.push(url);\n      }, 1000);\n    };\n\n    this.handleInputTags = newValue => {\n      let latestData = { ...this.state.dataToUpdate,\n        tags: newValue\n      };\n      let catchData = { ...this.state.dataToUpdate,\n        tags: []\n      };\n\n      if (newValue == null) {\n        this.setState({\n          dataToUpdate: catchData\n        });\n      } else {\n        this.setState({\n          dataToUpdate: latestData\n        });\n      }\n    };\n\n    this.handleInputColl = newValue => {\n      let latestData = { ...this.state.dataToUpdate,\n        collection_id: newValue.value\n      };\n      this.setState({\n        dataToUpdate: latestData\n      });\n    };\n\n    this.handleInputCats = newValue => {\n      let catArray = [];\n\n      if (newValue && newValue.length) {\n        newValue.map(cat => {\n          catArray.push(cat.value);\n        });\n      } // console.log(newValue);\n      // make reformatted list of all subcats\n\n\n      let newSubcatList = []; // get new cat id\n\n      if (newValue && newValue.length) {\n        // loop through subcats\n        // console.log('new list written')\n        newValue.map(newval => {\n          // console.log(newval)\n          this.props.subcats.map(subcat => {\n            // console.log(newval.value, subcat.parent_cat);\n            if (newval.value == subcat.parent_cat) {\n              newSubcatList.push({\n                value: subcat._id,\n                label: subcat.title\n              });\n            }\n          });\n        }); // console.log(newSubcatList);\n      } // send new array to state\n\n\n      let latestData = { ...this.state.dataToUpdate,\n        category_ref: catArray\n      };\n      this.setState({\n        dataToUpdate: latestData,\n        subcatList: newSubcatList\n      }); // console.log(latestData);\n    };\n\n    this.handleInputSubcats = newValue => {\n      let subcatArray = [];\n\n      if (newValue && newValue.length) {\n        newValue.map(subcat => {\n          subcatArray.push(subcat.value);\n        });\n      }\n\n      let latestData = { ...this.state.dataToUpdate,\n        subcategory_ref: subcatArray\n      };\n      this.setState({\n        dataToUpdate: latestData\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      this.props.dispatch(updateItem({ ...this.state.dataToUpdate\n      }));\n      this.props.history.push(`/user/edit-item-file/${this.props.match.params.id}`);\n    };\n\n    this.getCollOptions = () => {\n      let collList = [{\n        value: 0,\n        label: 'None'\n      }];\n      this.props.colls.map(coll => {\n        collList.push({\n          value: coll.id,\n          label: coll.title\n        });\n      });\n      this.setState({\n        collList\n      });\n    };\n\n    this.getCatOptions = () => {\n      let catList = [];\n      this.props.cats.map(cat => {\n        catList.push({\n          value: cat._id,\n          label: cat.title\n        });\n      });\n      this.setState({\n        catList\n      });\n    };\n\n    this.getSubcatOptions = () => {\n      // console.log('full list written')\n      let subcatList = this.state.subcatList; // make reformatted list of all subcats\n\n      if (!this.state.subcatsInitialised) {\n        if (this.props.items.item.category_ref && this.props.items.item.category_ref.length) {\n          // loop through all subcats\n          this.props.subcats.map(subcat => {\n            // if subcat is part of the chosen cat\n            if (this.props.items.item.category_ref.indexOf(subcat.parent_cat) !== -1) {\n              subcatList.push({\n                value: subcat.subcat_id,\n                label: subcat.title\n              });\n            }\n          });\n        } else {\n          this.props.subcats.map(subcat => {\n            subcatList.push({\n              value: subcat.subcat_id,\n              label: subcat.title\n            });\n          });\n        }\n\n        this.setState({\n          subcatList,\n          subcatsInitialised: true\n        });\n      }\n    };\n\n    this.renderForm = () => /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 25\n      }\n    }, \"Edit item:\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 33\n      }\n    }, \"Tags\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CreatableSelect, {\n      defaultValue: this.state.tagsConverted,\n      isMulti: true,\n      onChange: this.handleInputTags,\n      options: this.state.tagsConverted,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 33\n      }\n    }, \"Collection\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      className: \"basic-single\",\n      classNamePrefix: \"select\",\n      defaultValue: this.state.collConverted,\n      isDisabled: false,\n      isLoading: false,\n      isClearable: true,\n      isRtl: false,\n      isSearchable: true,\n      name: \"color\",\n      options: this.state.collList,\n      onChange: this.handleInputColl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 33\n      }\n    }, \"Category\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      key: `cat_${this.props.items.item._id}`,\n      defaultValue: this.state.catsConverted,\n      isMulti: true,\n      name: \"colors\",\n      options: this.state.catList,\n      className: \"basic-multi-select\",\n      classNamePrefix: \"select\",\n      onChange: this.handleInputCats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 41\n      }\n    })))), this.state.catsConverted ? /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 37\n      }\n    }, \"Sub-categories\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_element select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      key: `cat_${this.props.items.item._id}`,\n      defaultValue: this.state.subcatsConverted,\n      isMulti: true,\n      name: \"colors\",\n      options: this.state.subcatList,\n      className: \"basic-multi-select\",\n      classNamePrefix: \"select\",\n      onChange: this.handleInputSubcats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 45\n      }\n    })))) : null, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 41\n      }\n    }, \"Save and Continue\"))))));\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getItemById(this.props.match.params.id));\n    this.props.dispatch(getAllColls());\n    this.props.dispatch(getAllCats());\n    this.props.dispatch(getAllSubCats());\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(clearItem());\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let item = this.props.items.item; // console.log(item)\n\n    if (this.props !== prevProps) {\n      if (this.props.items && this.props.items.item && this.props.cats && this.props.colls && this.props.subcats) {\n        // REFORMAT EXISTING CATEGORIES\n        let catsForState = [];\n\n        if (this.props.items.item.category_ref && this.props.items.item.category_ref.length) {\n          this.props.items.item.category_ref.map(catref => {\n            this.props.cats.map(cat => {\n              if (cat._id == catref) {\n                catsForState.push({\n                  value: cat._id,\n                  label: cat.title\n                });\n              }\n            });\n          });\n        } // REFORMAT EXISTING SUBCATEGORIES\n\n\n        let subcatsForState = []; // checks if item props have arrived\n        // console.log(this.props.items.item.subcategory_ref)\n\n        if (this.props.items.item.subcategory_ref && this.props.items.item.subcategory_ref.length) {\n          // // if there is categories\n          // if (this.props.items.item.category_ref && this.props.items.item.category_ref.length) {\n          //     console.log('there is categories')\n          //     // loop through all subcats\n          //     this.props.subcats.map( (subcat) => {\n          //         // if subcat is part of the chosen cat\n          //         if (this.props.items.item.category_ref.indexOf(subcat.parent_cat) !== -1) {\n          //             subcatsForState.push({\n          //                 value: subcat.subcat_id,\n          //                 label: subcat.title\n          //             })\n          //         }  \n          //     })\n          // } else {\n          // loop through the item subcats\n          this.props.items.item.subcategory_ref.map(subcatref => {\n            this.props.subcats.map(subcat => {\n              if (subcat._id == subcatref) {\n                // make new array of formatted subcats for the form\n                subcatsForState.push({\n                  value: subcat._id,\n                  label: subcat.title\n                });\n              }\n            });\n          }); // }\n        } // if (this.props.items.item.category_ref && this.props.items.item.category_ref.length && this.state.catsConverted) {\n        //     console.log('hi');\n        //     let catsId = [];\n        //     prevState.catsConverted.map( cat => {\n        //         catsId.push(cat.value)\n        //     })\n        //     let refinedSubcatList = [];\n        //     prevProps.subcats.map( (subcat, i) => {\n        //         if (catsId.indexOf(subcat.parent_cat) !== -1) {\n        //             refinedSubcatList.push({\n        //                 value: subcat.subcat_id,\n        //                 label: subcat.title\n        //             })\n        //         }\n        //     })\n        //     subcatsForState = refinedSubcatList;\n        // }\n        // REFORMAT EXISTING COLLECTION\n\n\n        let collForState = {\n          value: '',\n          label: ''\n        };\n        this.props.colls.map(coll => {\n          if (coll.id == this.props.items.item.collection_id) {\n            collForState = {\n              value: coll.id,\n              label: coll.title\n            };\n          }\n        });\n        let existsForState = {\n          _id: this.props.items.item._id,\n          category_ref: this.props.items.item.category_ref,\n          subcategory_ref: this.props.items.item.subcategory_ref,\n          tags: this.props.items.item.tags,\n          collection_id: this.props.items.item.collection_id\n        };\n        let tagsForState = this.props.items.item.tags;\n\n        if (!tagsForState) {\n          tagsForState = [];\n        } // GET OPTIONS\n\n\n        this.getCollOptions();\n        this.getCatOptions();\n        this.getSubcatOptions();\n        this.renderForm();\n        this.setState({\n          catsConverted: catsForState,\n          subcatsConverted: subcatsForState,\n          collConverted: collForState,\n          tagsConverted: tagsForState,\n          dataToUpdate: existsForState\n        });\n      }\n    }\n  }\n\n  render() {\n    // console.log('rendered');\n    let items = this.props.items; // console.log(this.state);\n\n    console.log(this.props); // this.refineSubcatList();\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rl_container article edit_page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 17\n      }\n    }, items.itemDeleted ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"red_tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 29\n      }\n    }, \"Item Deleted\", this.redirectUser('/user/all-items')) : null, this.state.tagsConverted && this.state.catsConverted && this.state.subcatsConverted && this.state.collConverted ? this.renderForm() : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    items: state.items,\n    colls: state.collections.colls,\n    cats: state.cats.cats,\n    subcats: state.cats.subcats\n  };\n}\n\nexport default connect(mapStateToProps)(EditItemSel);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/traveller-collection/client/src/containers/Admin/edit_item_2_sel.js"],"names":["React","PureComponent","connect","Link","axios","ToastContainer","toast","Select","CreatableSelect","getItemById","updateItem","clearItem","deleteItem","getAllColls","getAllCats","getAllSubCats","EditItemSel","state","dataToUpdate","_id","category_ref","subcategory_ref","tags","collection_id","catsConverted","subcatsConverted","collConverted","tagsConverted","collList","catList","subcatList","subcatsInitialised","deletePost","props","dispatch","formdata","history","push","redirectUser","url","setTimeout","handleInputTags","newValue","latestData","catchData","setState","handleInputColl","value","handleInputCats","catArray","length","map","cat","newSubcatList","newval","subcats","subcat","parent_cat","label","title","handleInputSubcats","subcatArray","onSubmit","e","preventDefault","match","params","id","getCollOptions","colls","coll","getCatOptions","cats","getSubcatOptions","items","item","indexOf","subcat_id","renderForm","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","prevState","catsForState","catref","subcatsForState","subcatref","collForState","existsForState","tagsForState","render","console","log","itemDeleted","mapStateToProps","collections"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\n\n\n\nimport { getItemById, updateItem, clearItem, deleteItem } from '../../actions';\nimport { getAllColls, getAllCats, getAllSubCats  } from '../../actions';\n\n\n\nclass EditItemSel extends PureComponent {\n\n\n    state = {\n\n        dataToUpdate: {\n            _id: null,\n            category_ref: [],\n            subcategory_ref: [],\n            tags: [],\n            collection_id: ''\n            \n        },\n        catsConverted: null,\n        subcatsConverted: null,\n        collConverted: null,\n        tagsConverted: null,\n        collList: null,\n        catList: null,\n        subcatList: [],\n        subcatsInitialised: false\n       \n\n    }\n\n\n    componentDidMount() {\n        this.props.dispatch(getItemById(this.props.match.params.id))\n        this.props.dispatch(getAllColls())\n        this.props.dispatch(getAllCats());\n        this.props.dispatch(getAllSubCats());\n    }\n\n\n    componentWillUnmount() {\n        this.props.dispatch(clearItem())\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n\n        let item = this.props.items.item;\n        // console.log(item)\n        if (this.props !== prevProps) {\n            if (this.props.items && this.props.items.item && this.props.cats && this.props.colls && this.props.subcats) {\n\n\n                // REFORMAT EXISTING CATEGORIES\n                let catsForState = [];\n                if (this.props.items.item.category_ref && this.props.items.item.category_ref.length) {\n                    this.props.items.item.category_ref.map( (catref) => {\n                        this.props.cats.map( (cat) => {\n                            if ( cat._id == catref) {\n                                catsForState.push(\n                                    {\n                                        value: cat._id,\n                                        label: cat.title\n                                    }\n                                )\n                            }\n                        })\n                    })\n                }\n\n\n                // REFORMAT EXISTING SUBCATEGORIES\n                let subcatsForState = [];\n                // checks if item props have arrived\n                // console.log(this.props.items.item.subcategory_ref)\n\n                if (this.props.items.item.subcategory_ref && this.props.items.item.subcategory_ref.length) {\n\n\n                    // // if there is categories\n                    // if (this.props.items.item.category_ref && this.props.items.item.category_ref.length) {\n                    //     console.log('there is categories')\n                    //     // loop through all subcats\n                    //     this.props.subcats.map( (subcat) => {\n                    //         // if subcat is part of the chosen cat\n                    //         if (this.props.items.item.category_ref.indexOf(subcat.parent_cat) !== -1) {\n                    //             subcatsForState.push({\n                    //                 value: subcat.subcat_id,\n                    //                 label: subcat.title\n                    //             })\n                    //         }  \n                    //     })\n                    // } else {\n\n\n\n                        // loop through the item subcats\n                        this.props.items.item.subcategory_ref.map( (subcatref) => {\n                            this.props.subcats.map( (subcat) => {\n                                if ( subcat._id == subcatref) {\n                                    // make new array of formatted subcats for the form\n                                    subcatsForState.push(\n                                        {\n                                            value: subcat._id,\n                                            label: subcat.title\n                                        }\n                                    )\n                                }\n                            })\n                        })\n                    // }\n                }\n\n\n\n\n\n                // if (this.props.items.item.category_ref && this.props.items.item.category_ref.length && this.state.catsConverted) {\n                //     console.log('hi');\n                //     let catsId = [];\n                //     prevState.catsConverted.map( cat => {\n                //         catsId.push(cat.value)\n                //     })\n        \n        \n                //     let refinedSubcatList = [];\n        \n                //     prevProps.subcats.map( (subcat, i) => {\n                        \n                //         if (catsId.indexOf(subcat.parent_cat) !== -1) {\n                //             refinedSubcatList.push({\n                //                 value: subcat.subcat_id,\n                //                 label: subcat.title\n                //             })\n                //         }\n                        \n                //     })\n                //     subcatsForState = refinedSubcatList;\n                // }\n\n\n\n\n                // REFORMAT EXISTING COLLECTION\n                let collForState = {value:'', label:''};\n                this.props.colls.map( (coll) => {\n                    if ( coll.id == this.props.items.item.collection_id) {\n                        collForState = {\n                            value: coll.id,\n                            label: coll.title\n                        }\n                    }\n                })\n\n\n                let existsForState = {\n                    _id: this.props.items.item._id,\n                    category_ref: this.props.items.item.category_ref,\n                    subcategory_ref: this.props.items.item.subcategory_ref,\n                    tags: this.props.items.item.tags,\n                    collection_id: this.props.items.item.collection_id\n                }\n\n                let tagsForState = this.props.items.item.tags;\n                if (!tagsForState) {\n                    tagsForState = []\n                }\n\n\n                \n\n\n                // GET OPTIONS\n                this.getCollOptions()\n                this.getCatOptions()\n                this.getSubcatOptions()\n                this.renderForm()\n\n                this.setState({\n                    catsConverted: catsForState,\n                    subcatsConverted: subcatsForState,\n                    collConverted: collForState,\n                    tagsConverted: tagsForState,\n                    dataToUpdate: existsForState\n                })\n            }\n        } \n    }\n\n\n    deletePost = () => {\n        this.props.dispatch(deleteItem(this.state.formdata._id));\n        this.props.history.push('/user/all-items');\n    }\n\n\n\n    redirectUser = (url) => {\n        setTimeout(() => {\n            this.props.history.push(url)\n        }, 1000)\n    }\n\n\n    handleInputTags = (newValue) => {\n       \n        let latestData = {\n            ...this.state.dataToUpdate,\n            tags: newValue\n        }\n\n        let catchData = {\n            ...this.state.dataToUpdate,\n            tags: []\n        }\n\n\n        if (newValue == null) {\n            this.setState({\n                dataToUpdate: catchData\n            })\n        } else {\n            this.setState({\n                dataToUpdate: latestData\n            })\n        }\n    }\n\n    handleInputColl = (newValue) => {\n        let latestData = {\n            ...this.state.dataToUpdate,\n            collection_id: newValue.value\n        }\n        this.setState({\n            dataToUpdate: latestData\n        })\n    }\n\n    handleInputCats = (newValue) => {\n        let catArray = [];\n        if (newValue && newValue.length) {\n            newValue.map( cat => {\n                catArray.push(cat.value)\n            })\n        }\n        \n\n        // console.log(newValue);\n\n\n        // make reformatted list of all subcats\n        let newSubcatList = [];\n\n        \n        // get new cat id\n        if (newValue && newValue.length) {\n\n\n            // loop through subcats\n            // console.log('new list written')\n\n            newValue.map( newval => {\n                // console.log(newval)\n                this.props.subcats.map( (subcat) => {\n                    // console.log(newval.value, subcat.parent_cat);\n                    if (newval.value == subcat.parent_cat){\n                        newSubcatList.push({\n                            value: subcat._id,\n                            label: subcat.title\n                        })\n                    }\n                })\n            })\n            // console.log(newSubcatList);\n        }\n\n\n        \n\n\n        // send new array to state\n\n\n\n  \n\n\n\n\n        let latestData = {\n            ...this.state.dataToUpdate,\n            category_ref: catArray\n        }\n\n\n\n\n\n        this.setState({\n            dataToUpdate: latestData,\n            subcatList: newSubcatList\n        })\n        // console.log(latestData);\n\n    }\n\n    handleInputSubcats = (newValue) => {\n        let subcatArray = [];\n        if (newValue && newValue.length) {\n            newValue.map( subcat => {\n                subcatArray.push(subcat.value)\n            })\n        }\n        let latestData = {\n            ...this.state.dataToUpdate,\n            subcategory_ref: subcatArray\n        }\n        this.setState({\n            dataToUpdate: latestData\n        })\n    }\n\n\n\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.dispatch(updateItem(\n            { ...this.state.dataToUpdate }\n        ))\n        this.props.history.push(`/user/edit-item-file/${this.props.match.params.id }`)\n\n    }\n\n\n    getCollOptions = () => {\n        \n        let collList = [\n            {\n                value: 0,\n                label: 'None'\n            }\n        ];\n        this.props.colls.map( coll => {\n            collList.push({\n                value: coll.id,\n                label: coll.title\n            })\n        })\n        this.setState({\n            collList\n        })\n    }\n\n\n    getCatOptions = () => {\n        let catList = [];\n        this.props.cats.map( cat => {\n            catList.push({\n                value: cat._id,\n                label: cat.title\n            })\n        })\n        this.setState({\n            catList\n        })\n\n        \n    }\n\n\n\n    getSubcatOptions = () => {\n        \n        // console.log('full list written')\n\n        let subcatList = this.state.subcatList;\n        // make reformatted list of all subcats\n  \n        if (!this.state.subcatsInitialised) {\n            if (this.props.items.item.category_ref && this.props.items.item.category_ref.length) {\n                // loop through all subcats\n                this.props.subcats.map( (subcat) => {\n                    // if subcat is part of the chosen cat\n                    if (this.props.items.item.category_ref.indexOf(subcat.parent_cat) !== -1) {\n                        subcatList.push({\n                            value: subcat.subcat_id,\n                            label: subcat.title\n                        })\n                    }  \n                })\n            } else {\n                this.props.subcats.map( subcat => {\n                    subcatList.push({\n                        value: subcat.subcat_id,\n                        label: subcat.title\n                    })\n                })\n            }\n\n            this.setState({\n                subcatList,\n                subcatsInitialised: true\n            })\n        }\n    }\n\n\n    // refineSubcatList = () => {\n    //     // if cat is selected\n    //     if (this.state.catsConverted && this.state.catsConverted.length) {\n    //         let catsId = [];\n    //         this.state.catsConverted.map( cat => {\n    //             catsId.push(cat.value)\n    //         })\n\n\n    //         let refinedSubcatList = [];\n\n    //         this.props.subcats.map( (subcat, i) => {\n                \n    //             if (catsId.indexOf(subcat.parent_cat) !== -1) {\n    //                 refinedSubcatList.push({\n    //                     value: subcat.subcat_id,\n    //                     label: subcat.title\n    //                 })\n    //             }\n                \n    //         })\n    //         this.setState({subcatList: refinedSubcatList})\n    //     }\n        \n    // }\n\n\n    renderForm = () => (\n        <form onSubmit={this.onSubmit}>\n                        \n                        <h2>Edit item:</h2>\n                       \n                        <table>\n                        <tbody>\n               \n                            <tr>\n                                <td>\n                                    Tags\n                                </td>\n                                <td>\n                                    <div className=\"form_element select\">\n                                        <CreatableSelect\n                                            defaultValue={this.state.tagsConverted}\n                                            isMulti\n                                            onChange={this.handleInputTags}\n                                            options={this.state.tagsConverted}\n                                        />\n                                    </div>\n                                </td>\n                            </tr>\n                          \n\n                            <tr>\n                                <td>\n                                    Collection\n                                </td>\n                                <td>\n                                    <div className=\"form_element select\">\n                                        <Select\n                                            className=\"basic-single\"\n                                            classNamePrefix=\"select\"\n                                            defaultValue={this.state.collConverted}\n                                            isDisabled={false}\n                                            isLoading={false}\n                                            isClearable={true}\n                                            isRtl={false}\n                                            isSearchable={true}\n                                            name=\"color\"\n                                            options={this.state.collList}\n                                            onChange={this.handleInputColl}\n                                        />\n                                    </div>\n                                </td>\n                            </tr>\n\n\n                            <tr>\n                                <td>\n                                    Category\n                                </td>\n                                <td>\n                                    <div className=\"form_element select\">\n                                        <Select\n                                            key={`cat_${this.props.items.item._id}`}\n                                            defaultValue={this.state.catsConverted}\n                                            isMulti\n                                            name=\"colors\"\n                                            options={this.state.catList}\n                                            className=\"basic-multi-select\"\n                                            classNamePrefix=\"select\"\n                                            onChange={this.handleInputCats}\n                                        />\n                                    </div>\n                                </td>\n                            </tr>  \n\n                           \n                            { this.state.catsConverted ?\n                                <tr>\n                                    <td>\n                                        Sub-categories \n                                    </td>\n                                    <td>\n\n                                        <div className=\"form_element select\">\n                                            <Select\n                                                key={`cat_${this.props.items.item._id}`}\n                                                defaultValue={this.state.subcatsConverted}\n                                                isMulti\n                                                name=\"colors\"\n                                                options={this.state.subcatList}\n                                                className=\"basic-multi-select\"\n                                                classNamePrefix=\"select\"\n                                                onChange={this.handleInputSubcats}\n                                            />\n                                        </div>\n                                    </td>\n                                </tr>\n                            : null }\n\n                                <tr>\n                                    <td></td>\n                                    <td>\n                                        <button type=\"submit\">Save and Continue</button>\n                                    </td>\n                                </tr>\n                            \n                            \n                        </tbody>\n                        </table>\n\n                        \n                        \n                        {/* <div className=\"delete_post\">\n                            <div className=\"button\" onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) this.deletePost(e) } }>\n                                Delete item\n                            </div>\n                        </div> */}\n\n                    </form>\n    )\n\n    render() {\n        // console.log('rendered');\n\n        let items = this.props.items;\n\n        // console.log(this.state);\n        console.log(this.props);\n\n        // this.refineSubcatList();\n\n\n\n        return (\n            \n            <div className=\"main_view\">\n                <div className=\"rl_container article edit_page\">\n                    \n                    {/* {\n                        items.updateItem ?\n                            <div className=\"edit_confirm\">\n                                Post updated, <Link to={`/items/${items.item._id}`}>\n                                    Click here to see your post\n                                </Link>\n                            </div>\n                        : null\n                    } */}\n\n\n                    {\n                        items.itemDeleted ?\n                            <div className=\"red_tag\">\n                                Item Deleted    \n                                {this.redirectUser('/user/all-items')}\n                            </div>\n\n                        : null\n                    }\n                    \n                    {this.state.tagsConverted && this.state.catsConverted && this.state.subcatsConverted && this.state.collConverted ?\n                    \n                        this.renderForm()\n                    : null }\n\n                        \n                </div>\n            </div>\n            \n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        items:state.items,\n        colls:state.collections.colls,\n        cats:state.cats.cats,\n        subcats:state.cats.subcats\n    }\n}\n\nexport default connect(mapStateToProps)(EditItemSel)\n\n\n"]},"metadata":{},"sourceType":"module"}