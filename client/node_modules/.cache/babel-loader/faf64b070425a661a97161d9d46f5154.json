{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint\n   no-plusplus: off,\n   no-mixed-operators: off\n*/\n\nvar MonotonicInterpolant =\n/** @class */\nfunction () {\n  function MonotonicInterpolant(xs, ys) {\n    var length = xs.length; // Rearrange xs and ys so that xs is sorted\n\n    var indexes = [];\n\n    for (var i = 0; i < length; i++) {\n      indexes.push(i);\n    }\n\n    indexes.sort(function (a, b) {\n      return xs[a] < xs[b] ? -1 : 1;\n    }); // Get consecutive differences and slopes\n\n    var dys = [];\n    var dxs = [];\n    var ms = [];\n    var dx;\n    var dy;\n\n    for (var i = 0; i < length - 1; i++) {\n      dx = xs[i + 1] - xs[i];\n      dy = ys[i + 1] - ys[i];\n      dxs.push(dx);\n      dys.push(dy);\n      ms.push(dy / dx);\n    } // Get degree-1 coefficients\n\n\n    var c1s = [ms[0]];\n\n    for (var i = 0; i < dxs.length - 1; i++) {\n      var m2 = ms[i];\n      var mNext = ms[i + 1];\n\n      if (m2 * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        dx = dxs[i];\n        var dxNext = dxs[i + 1];\n        var common = dx + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));\n      }\n    }\n\n    c1s.push(ms[ms.length - 1]); // Get degree-2 and degree-3 coefficients\n\n    var c2s = [];\n    var c3s = [];\n    var m;\n\n    for (var i = 0; i < c1s.length - 1; i++) {\n      m = ms[i];\n      var c1 = c1s[i];\n      var invDx = 1 / dxs[i];\n      var common = c1 + c1s[i + 1] - m - m;\n      c2s.push((m - c1 - common) * invDx);\n      c3s.push(common * invDx * invDx);\n    }\n\n    this.xs = xs;\n    this.ys = ys;\n    this.c1s = c1s;\n    this.c2s = c2s;\n    this.c3s = c3s;\n  }\n\n  MonotonicInterpolant.prototype.interpolate = function (x) {\n    var _a = this,\n        xs = _a.xs,\n        ys = _a.ys,\n        c1s = _a.c1s,\n        c2s = _a.c2s,\n        c3s = _a.c3s; // The rightmost point in the dataset should give an exact result\n\n\n    var i = xs.length - 1;\n\n    if (x === xs[i]) {\n      return ys[i];\n    } // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n\n\n    var low = 0;\n    var high = c3s.length - 1;\n    var mid;\n\n    while (low <= high) {\n      mid = Math.floor(0.5 * (low + high));\n      var xHere = xs[mid];\n\n      if (xHere < x) {\n        low = mid + 1;\n      } else if (xHere > x) {\n        high = mid - 1;\n      } else {\n        return ys[mid];\n      }\n    }\n\n    i = Math.max(0, high); // Interpolate\n\n    var diff = x - xs[i];\n    var diffSq = diff * diff;\n    return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n  };\n\n  return MonotonicInterpolant;\n}();\n\nexports.default = MonotonicInterpolant;","map":{"version":3,"sources":["../src/MonotonicInterpolant.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* eslint\n   no-plusplus: off,\n   no-mixed-operators: off\n*/\nvar MonotonicInterpolant = /** @class */ (function () {\n    function MonotonicInterpolant(xs, ys) {\n        var length = xs.length;\n        // Rearrange xs and ys so that xs is sorted\n        var indexes = [];\n        for (var i = 0; i < length; i++) {\n            indexes.push(i);\n        }\n        indexes.sort(function (a, b) { return (xs[a] < xs[b] ? -1 : 1); });\n        // Get consecutive differences and slopes\n        var dys = [];\n        var dxs = [];\n        var ms = [];\n        var dx;\n        var dy;\n        for (var i = 0; i < length - 1; i++) {\n            dx = xs[i + 1] - xs[i];\n            dy = ys[i + 1] - ys[i];\n            dxs.push(dx);\n            dys.push(dy);\n            ms.push(dy / dx);\n        }\n        // Get degree-1 coefficients\n        var c1s = [ms[0]];\n        for (var i = 0; i < dxs.length - 1; i++) {\n            var m2 = ms[i];\n            var mNext = ms[i + 1];\n            if (m2 * mNext <= 0) {\n                c1s.push(0);\n            }\n            else {\n                dx = dxs[i];\n                var dxNext = dxs[i + 1];\n                var common = dx + dxNext;\n                c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));\n            }\n        }\n        c1s.push(ms[ms.length - 1]);\n        // Get degree-2 and degree-3 coefficients\n        var c2s = [];\n        var c3s = [];\n        var m;\n        for (var i = 0; i < c1s.length - 1; i++) {\n            m = ms[i];\n            var c1 = c1s[i];\n            var invDx = 1 / dxs[i];\n            var common = c1 + c1s[i + 1] - m - m;\n            c2s.push((m - c1 - common) * invDx);\n            c3s.push(common * invDx * invDx);\n        }\n        this.xs = xs;\n        this.ys = ys;\n        this.c1s = c1s;\n        this.c2s = c2s;\n        this.c3s = c3s;\n    }\n    MonotonicInterpolant.prototype.interpolate = function (x) {\n        var _a = this, xs = _a.xs, ys = _a.ys, c1s = _a.c1s, c2s = _a.c2s, c3s = _a.c3s;\n        // The rightmost point in the dataset should give an exact result\n        var i = xs.length - 1;\n        if (x === xs[i]) {\n            return ys[i];\n        }\n        // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n        var low = 0;\n        var high = c3s.length - 1;\n        var mid;\n        while (low <= high) {\n            mid = Math.floor(0.5 * (low + high));\n            var xHere = xs[mid];\n            if (xHere < x) {\n                low = mid + 1;\n            }\n            else if (xHere > x) {\n                high = mid - 1;\n            }\n            else {\n                return ys[mid];\n            }\n        }\n        i = Math.max(0, high);\n        // Interpolate\n        var diff = x - xs[i];\n        var diffSq = diff * diff;\n        return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n    };\n    return MonotonicInterpolant;\n}());\nexports.default = MonotonicInterpolant;\n//# sourceMappingURL=MonotonicInterpolant.js.map"]},"metadata":{},"sourceType":"script"}