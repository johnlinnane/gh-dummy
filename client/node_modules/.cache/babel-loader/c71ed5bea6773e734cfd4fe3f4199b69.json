{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isFunction = require('lodash/isFunction');\n\nvar noop = require('lodash/noop');\n/**\n * Provides a set of static methods for creating Disposables.\n * @param {Function} action Action to run during the first call to dispose.\n * The action is guaranteed to be run at most once.\n */\n\n\nvar Disposable =\n/** @class */\nfunction () {\n  function Disposable(action) {\n    this.isDisposed = false;\n    this.action = isFunction(action) ? action : noop;\n  }\n  /**\n   * Validates whether the given object is a disposable\n   * @param {Object} Object to test whether it has a dispose method\n   * @returns {Boolean} true if a disposable object, else false.\n   */\n\n\n  Disposable.isDisposable = function (d) {\n    return d && isFunction(d.dispose);\n  };\n\n  Disposable._fixup = function (result) {\n    return Disposable.isDisposable(result) ? result : Disposable.empty;\n  };\n  /**\n   * Creates a disposable object that invokes the specified action when disposed.\n   * @param {Function} dispose Action to run during the first call to dispose.\n   * The action is guaranteed to be run at most once.\n   * @return {Disposable} The disposable object that runs the given action upon disposal.\n   */\n\n\n  Disposable.create = function (action) {\n    return new Disposable(action);\n  };\n  /** Performs the task of cleaning up resources. */\n\n\n  Disposable.prototype.dispose = function () {\n    if (!this.isDisposed) {\n      this.action();\n      this.isDisposed = true;\n    }\n  };\n  /**\n   * Gets the disposable that does nothing when disposed.\n   */\n\n\n  Disposable.empty = {\n    dispose: noop\n  };\n  return Disposable;\n}();\n\nexports.Disposable = Disposable;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/node_modules/react-dnd/lib/utils/disposables/Disposable.js"],"names":["Object","defineProperty","exports","value","isFunction","require","noop","Disposable","action","isDisposed","isDisposable","d","dispose","_fixup","result","empty","create","prototype"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAAlB;AACA;;;;;;;AAKA,IAAIE,UAAU;AAAG;AAAe,YAAY;AACxC,WAASA,UAAT,CAAoBC,MAApB,EAA4B;AACxB,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKD,MAAL,GAAcJ,UAAU,CAACI,MAAD,CAAV,GAAqBA,MAArB,GAA8BF,IAA5C;AACH;AACD;;;;;;;AAKAC,EAAAA,UAAU,CAACG,YAAX,GAA0B,UAAUC,CAAV,EAAa;AACnC,WAAOA,CAAC,IAAIP,UAAU,CAACO,CAAC,CAACC,OAAH,CAAtB;AACH,GAFD;;AAGAL,EAAAA,UAAU,CAACM,MAAX,GAAoB,UAAUC,MAAV,EAAkB;AAClC,WAAOP,UAAU,CAACG,YAAX,CAAwBI,MAAxB,IAAkCA,MAAlC,GAA2CP,UAAU,CAACQ,KAA7D;AACH,GAFD;AAGA;;;;;;;;AAMAR,EAAAA,UAAU,CAACS,MAAX,GAAoB,UAAUR,MAAV,EAAkB;AAClC,WAAO,IAAID,UAAJ,CAAeC,MAAf,CAAP;AACH,GAFD;AAGA;;;AACAD,EAAAA,UAAU,CAACU,SAAX,CAAqBL,OAArB,GAA+B,YAAY;AACvC,QAAI,CAAC,KAAKH,UAAV,EAAsB;AAClB,WAAKD,MAAL;AACA,WAAKC,UAAL,GAAkB,IAAlB;AACH;AACJ,GALD;AAMA;;;;;AAGAF,EAAAA,UAAU,CAACQ,KAAX,GAAmB;AAAEH,IAAAA,OAAO,EAAEN;AAAX,GAAnB;AACA,SAAOC,UAAP;AACH,CArC+B,EAAhC;;AAsCAL,OAAO,CAACK,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isFunction = require('lodash/isFunction');\nvar noop = require('lodash/noop');\n/**\n * Provides a set of static methods for creating Disposables.\n * @param {Function} action Action to run during the first call to dispose.\n * The action is guaranteed to be run at most once.\n */\nvar Disposable = /** @class */ (function () {\n    function Disposable(action) {\n        this.isDisposed = false;\n        this.action = isFunction(action) ? action : noop;\n    }\n    /**\n     * Validates whether the given object is a disposable\n     * @param {Object} Object to test whether it has a dispose method\n     * @returns {Boolean} true if a disposable object, else false.\n     */\n    Disposable.isDisposable = function (d) {\n        return d && isFunction(d.dispose);\n    };\n    Disposable._fixup = function (result) {\n        return Disposable.isDisposable(result) ? result : Disposable.empty;\n    };\n    /**\n     * Creates a disposable object that invokes the specified action when disposed.\n     * @param {Function} dispose Action to run during the first call to dispose.\n     * The action is guaranteed to be run at most once.\n     * @return {Disposable} The disposable object that runs the given action upon disposal.\n     */\n    Disposable.create = function (action) {\n        return new Disposable(action);\n    };\n    /** Performs the task of cleaning up resources. */\n    Disposable.prototype.dispose = function () {\n        if (!this.isDisposed) {\n            this.action();\n            this.isDisposed = true;\n        }\n    };\n    /**\n     * Gets the disposable that does nothing when disposed.\n     */\n    Disposable.empty = { dispose: noop };\n    return Disposable;\n}());\nexports.Disposable = Disposable;\n"]},"metadata":{},"sourceType":"script"}