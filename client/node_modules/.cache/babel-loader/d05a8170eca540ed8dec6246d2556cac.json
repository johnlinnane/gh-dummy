{"ast":null,"code":"var _jsxFileName = \"/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { getAllCats, getItemById, updateItem } from '../../actions';\n\nclass Sandbox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      catOptions: [],\n      selected: [],\n      savedCats: [],\n      updated: false\n    };\n\n    this.handleChange = newValue => {\n      if (newValue && newValue.length) {\n        this.setState({\n          savedCats: [...newValue]\n        }); // newValue is not an array if empty\n      } else {\n        this.setState({\n          savedCats: []\n        });\n      }\n    };\n\n    this.onClickHandler = () => {\n      let updateData = {\n        _id: '5edcbc5027c3271205b2360a',\n        category_ref: []\n      };\n\n      if (this.state.savedCats && this.state.savedCats.length) {\n        this.state.savedCats.map(cat => {\n          updateData.category_ref.push(cat.value);\n        });\n      }\n\n      this.props.dispatch(updateItem({ ...updateData\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getAllCats());\n    this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let newCatOptions = prevState.catOptions;\n    let newSelected = prevState.selected; // check if props have arrived\n\n    if (nextProps.cats && nextProps.cats.length) {\n      // create list of all categories and ids\n      nextProps.cats.map((cat, i) => {\n        newCatOptions.push({\n          value: cat.cat_id,\n          label: cat.title\n        });\n      }); // chack for any categories already set\n\n      if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length) {\n        nextProps.items.item.category_ref.map((catref, i) => {\n          let catTitle;\n          nextProps.cats.map((cat, i) => {\n            if (cat.cat_id == catref) {\n              catTitle = cat.title;\n              newSelected.push({\n                value: catref,\n                label: catTitle\n              });\n            }\n          });\n        });\n      }\n    }\n\n    return {\n      catOptions: newCatOptions,\n      selected: newSelected,\n      updated: true\n    };\n  }\n\n  render() {\n    const catOptions = this.state.catOptions;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, this.props.items.item && this.props.items.item.title ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, this.props.items.item.title) : null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, \"Categories:\"), this.state.updated ? /*#__PURE__*/React.createElement(Select, {\n      defaultValue: this.state.selected,\n      isMulti: true,\n      name: \"colors\",\n      options: catOptions,\n      className: \"basic-multi-select\",\n      classNamePrefix: \"select\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    items: state.items,\n    cats: state.cats.cats\n  };\n}\n\nexport default connect(mapStateToProps)(Sandbox);","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/client/src/components/Sandbox/sandbox.js"],"names":["React","connect","Select","getAllCats","getItemById","updateItem","Sandbox","Component","state","catOptions","selected","savedCats","updated","handleChange","newValue","length","setState","onClickHandler","updateData","_id","category_ref","map","cat","push","value","props","dispatch","componentDidMount","getDerivedStateFromProps","nextProps","prevState","newCatOptions","newSelected","cats","i","cat_id","label","title","items","item","catref","catTitle","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\n\nimport { getAllCats, getItemById, updateItem } from '../../actions';\n\n\nclass Sandbox extends React.Component {\n    \n    state = {\n        catOptions: [],\n        selected: [],\n        savedCats: [],\n        updated: false\n    }\n\n    componentDidMount() {\n        this.props.dispatch(getAllCats());\n        this.props.dispatch(getItemById('5edcbc5027c3271205b2360a'));\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        \n        let newCatOptions = prevState.catOptions;\n        let newSelected = prevState.selected;\n\n        // check if props have arrived\n        if (nextProps.cats && nextProps.cats.length) {\n            // create list of all categories and ids\n            nextProps.cats.map( (cat, i) => {\n                newCatOptions.push({\n                    value: cat.cat_id,\n                    label: cat.title\n                })\n            })\n\n            // chack for any categories already set\n            if (nextProps.items && nextProps.items.item && nextProps.items.item.category_ref && nextProps.items.item.category_ref.length ) {\n\n                nextProps.items.item.category_ref.map( (catref, i) => {\n\n                    let catTitle;\n\n                    nextProps.cats.map( (cat, i) => {\n                        if (cat.cat_id == catref) {\n                            catTitle = cat.title;\n\n                            newSelected.push({\n                                value: catref,\n                                label: catTitle\n                            })\n                        }\n                    })\n                })\n                \n            }\n        }\n        return {\n            catOptions: newCatOptions,\n            selected: newSelected,\n            updated: true\n        }\n    }\n\n\n    handleChange = (newValue) => {\n        if (newValue && newValue.length) {\n            this.setState({ \n                savedCats: [...newValue]\n            });\n        // newValue is not an array if empty\n        } else {\n            this.setState({ \n                savedCats: []\n            });\n        }\n\n\n    };\n\n    onClickHandler = () => {\n\n        let updateData = {\n            _id: '5edcbc5027c3271205b2360a',\n            category_ref: []\n        };\n\n        if (this.state.savedCats && this.state.savedCats.length) {\n            this.state.savedCats.map( cat => {\n                updateData.category_ref.push(cat.value);\n            })\n        } \n \n        this.props.dispatch(updateItem({\n            ...updateData\n        }))\n    }\n    \n    render() {\n\n        const catOptions = this.state.catOptions;\n\n        return (\n            <div>\n                {this.props.items.item && this.props.items.item.title ?\n                    <h2>{this.props.items.item.title}</h2>\n                : null }\n\n                <h2>Categories:</h2>\n\n                {this.state.updated ?\n                    <Select\n                        defaultValue={this.state.selected}\n                        isMulti\n                        name=\"colors\"\n                        options={catOptions}\n                        className=\"basic-multi-select\"\n                        classNamePrefix=\"select\"\n                        onChange={this.handleChange}\n                    />\n                : null}\n\n                <button type=\"button\"onClick={this.onClickHandler}>Submit</button> \n            \n            </div>\n        );\n    }\n\n\n};\n \n\nfunction mapStateToProps(state) {\n    return {\n        items:state.items,\n        cats:state.cats.cats\n    }\n}\n\n\n\nexport default connect(mapStateToProps)(Sandbox);\n\n"]},"metadata":{},"sourceType":"module"}