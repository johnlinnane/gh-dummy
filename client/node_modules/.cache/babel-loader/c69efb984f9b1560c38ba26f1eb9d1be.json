{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar cloneWithRef_1 = require(\"./utils/cloneWithRef\");\n\nfunction throwIfCompositeComponentElement(element) {\n  // Custom components can no longer be wrapped directly in React DnD 2.0\n  // so that we don't need to depend on findDOMNode() from react-dom.\n  if (typeof element.type === 'string') {\n    return;\n  }\n\n  var displayName = element.type.displayName || element.type.name || 'the component';\n  throw new Error('Only native element nodes can now be passed to React DnD connectors.' + (\"You can either wrap \" + displayName + \" into a <div>, or turn it into a \") + 'drag source or a drop target itself.');\n}\n\nfunction wrapHookToRecognizeElement(hook) {\n  return function (elementOrNode, options) {\n    if (elementOrNode === void 0) {\n      elementOrNode = null;\n    }\n\n    if (options === void 0) {\n      options = null;\n    } // When passed a node, call the hook straight away.\n\n\n    if (!react_1.isValidElement(elementOrNode)) {\n      var node = elementOrNode;\n      hook(node, options);\n      return undefined;\n    } // If passed a ReactElement, clone it and attach this function as a ref.\n    // This helps us achieve a neat API where user doesn't even know that refs\n    // are being used under the hood.\n\n\n    var element = elementOrNode;\n    throwIfCompositeComponentElement(element); // When no options are passed, use the hook directly\n\n    var ref = options ? function (node) {\n      return hook(node, options);\n    } : hook;\n    return cloneWithRef_1.default(element, ref);\n  };\n}\n\nfunction wrapConnectorHooks(hooks) {\n  var wrappedHooks = {};\n  Object.keys(hooks).forEach(function (key) {\n    var hook = hooks[key];\n    var wrappedHook = wrapHookToRecognizeElement(hook);\n\n    wrappedHooks[key] = function () {\n      return wrappedHook;\n    };\n  });\n  return wrappedHooks;\n}\n\nexports.default = wrapConnectorHooks;","map":{"version":3,"sources":["/Users/johnlinnane/DEV/tc-book/node_modules/react-dnd/lib/wrapConnectorHooks.js"],"names":["Object","defineProperty","exports","value","react_1","require","cloneWithRef_1","throwIfCompositeComponentElement","element","type","displayName","name","Error","wrapHookToRecognizeElement","hook","elementOrNode","options","isValidElement","node","undefined","ref","default","wrapConnectorHooks","hooks","wrappedHooks","keys","forEach","key","wrappedHook"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,sBAAD,CAA5B;;AACA,SAASE,gCAAT,CAA0CC,OAA1C,EAAmD;AAC/C;AACA;AACA,MAAI,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA5B,EAAsC;AAClC;AACH;;AACD,MAAIC,WAAW,GAAGF,OAAO,CAACC,IAAR,CAAaC,WAAb,IAA4BF,OAAO,CAACC,IAAR,CAAaE,IAAzC,IAAiD,eAAnE;AACA,QAAM,IAAIC,KAAJ,CAAU,0EACX,yBAAyBF,WAAzB,GAAuC,mCAD5B,IAEZ,sCAFE,CAAN;AAGH;;AACD,SAASG,0BAAT,CAAoCC,IAApC,EAA0C;AACtC,SAAO,UAAUC,aAAV,EAAyBC,OAAzB,EAAkC;AACrC,QAAID,aAAa,KAAK,KAAK,CAA3B,EAA8B;AAAEA,MAAAA,aAAa,GAAG,IAAhB;AAAuB;;AACvD,QAAIC,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,IAAV;AAAiB,KAFN,CAGrC;;;AACA,QAAI,CAACZ,OAAO,CAACa,cAAR,CAAuBF,aAAvB,CAAL,EAA4C;AACxC,UAAIG,IAAI,GAAGH,aAAX;AACAD,MAAAA,IAAI,CAACI,IAAD,EAAOF,OAAP,CAAJ;AACA,aAAOG,SAAP;AACH,KARoC,CASrC;AACA;AACA;;;AACA,QAAIX,OAAO,GAAGO,aAAd;AACAR,IAAAA,gCAAgC,CAACC,OAAD,CAAhC,CAbqC,CAcrC;;AACA,QAAIY,GAAG,GAAGJ,OAAO,GAAG,UAAUE,IAAV,EAAgB;AAAE,aAAOJ,IAAI,CAACI,IAAD,EAAOF,OAAP,CAAX;AAA6B,KAAlD,GAAqDF,IAAtE;AACA,WAAOR,cAAc,CAACe,OAAf,CAAuBb,OAAvB,EAAgCY,GAAhC,CAAP;AACH,GAjBD;AAkBH;;AACD,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,MAAIC,YAAY,GAAG,EAAnB;AACAxB,EAAAA,MAAM,CAACyB,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAUC,GAAV,EAAe;AACtC,QAAIb,IAAI,GAAGS,KAAK,CAACI,GAAD,CAAhB;AACA,QAAIC,WAAW,GAAGf,0BAA0B,CAACC,IAAD,CAA5C;;AACAU,IAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoB,YAAY;AAAE,aAAOC,WAAP;AAAqB,KAAvD;AACH,GAJD;AAKA,SAAOJ,YAAP;AACH;;AACDtB,OAAO,CAACmB,OAAR,GAAkBC,kBAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar cloneWithRef_1 = require(\"./utils/cloneWithRef\");\nfunction throwIfCompositeComponentElement(element) {\n    // Custom components can no longer be wrapped directly in React DnD 2.0\n    // so that we don't need to depend on findDOMNode() from react-dom.\n    if (typeof element.type === 'string') {\n        return;\n    }\n    var displayName = element.type.displayName || element.type.name || 'the component';\n    throw new Error('Only native element nodes can now be passed to React DnD connectors.' +\n        (\"You can either wrap \" + displayName + \" into a <div>, or turn it into a \") +\n        'drag source or a drop target itself.');\n}\nfunction wrapHookToRecognizeElement(hook) {\n    return function (elementOrNode, options) {\n        if (elementOrNode === void 0) { elementOrNode = null; }\n        if (options === void 0) { options = null; }\n        // When passed a node, call the hook straight away.\n        if (!react_1.isValidElement(elementOrNode)) {\n            var node = elementOrNode;\n            hook(node, options);\n            return undefined;\n        }\n        // If passed a ReactElement, clone it and attach this function as a ref.\n        // This helps us achieve a neat API where user doesn't even know that refs\n        // are being used under the hood.\n        var element = elementOrNode;\n        throwIfCompositeComponentElement(element);\n        // When no options are passed, use the hook directly\n        var ref = options ? function (node) { return hook(node, options); } : hook;\n        return cloneWithRef_1.default(element, ref);\n    };\n}\nfunction wrapConnectorHooks(hooks) {\n    var wrappedHooks = {};\n    Object.keys(hooks).forEach(function (key) {\n        var hook = hooks[key];\n        var wrappedHook = wrapHookToRecognizeElement(hook);\n        wrappedHooks[key] = function () { return wrappedHook; };\n    });\n    return wrappedHooks;\n}\nexports.default = wrapConnectorHooks;\n"]},"metadata":{},"sourceType":"script"}